<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UMD.HCIL.PiccoloX</name>
    </assembly>
    <members>
        <member name="T:UMD.HCIL.PiccoloX.Activities.NamespaceDoc">
            <summary>
            This namespace provides "extra" activities, which may be useful, but are not
            important enough to be included in the core Piccolo package.  Activities are
            used to control some time dependent aspect of Piccolo such as animation
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Activities.PPathActivity">
            <summary>
            <b>PPathActivity</b> is the abstract base class for all path activity interpolators.
            Path activities interpolate between multiple states over the duration of the activity.
            </summary>
            <remarks>
            Knots are used to determine when in time the activity should move from state to state.
            Knot values should be increasing in value from 0 to 1 inclusive.
            <para>
            See <see cref="T:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity"/> for a concrete path activity that will animate
            through a list of points.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Activities.PPathActivity.knots">
            <summary>
            An array of values between 0 and 1 that indicate when the activity should
            transition from state to state.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.#ctor(System.Int64,System.Int64,System.Single[])">
            <summary>
            Constructs a new PPathActivity that will interpolate between multiple states from
            source to destination, transitioning from state to state as specified by the given
            knot values.
            </summary>
            <param name="duration">The length of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="knots">
            An array of values between 0 and 1 that indicate when the state UsefulThings.WinForms.Transitions should
            occur.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.#ctor(System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode,System.Single[])">
            <summary>
            Constructs a new PPathActivity that will interpolate between multiple states in the
            order specified by the mode, transitioning from state to state as specified by the
            given knot values and looping the given number of iterations.
            </summary>
            <param name="duration">The length of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            The mode defines how the activity interpolates between states.
            </param>
            <param name="knots">
            An array of values between 0 and 1 that indicate when the state UsefulThings.WinForms.Transitions should
            occur.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.SetKnot(System.Int32,System.Single)">
            <summary>
            Sets the knot at the specified index.
            </summary>
            <param name="index">The index at which to set the knot.</param>
            <param name="knot">The knot to set.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.GetKnot(System.Int32)">
            <summary>
            Gets the knot at the specified index.
            </summary>
            <param name="index">The index of the desired knot.</param>
            <returns>The knot at the specified index.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.SetRelativeTargetValue(System.Single)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SetRelativeTargetValue(System.Single)">
            PInterpolatingActivity.SetRelativeTargetValue</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.SetRelativeTargetValue(System.Single,System.Int32,System.Int32)">
            <summary>
            Subclasses should override this method and set the value on their target (the
            object that they are modifying) accordingly.
            </summary>
            <param name="zeroToOne">
            The current interpolation value (from 0 to 1) between the start knot and the end knot.
            </param>
            <param name="startKnot">The previous knot the activity is interpolating from.</param>
            <param name="endKnot">The next knot the activity is interpolating to.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Activities.PPathActivity.KnotsLength">
            <summary>
            Gets the current length of the knots array.
            </summary>
            <value>The current length of the knots array.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Activities.PPathActivity.Knots">
            <summary>
            Gets or sets the knots array.
            </summary>
            <value>The knots array.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity">
            <summary>
            <b>PPositionPathActivity</b> animates through a sequence of points.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.positions">
            <summary>
            The sequence of points that this activity animates through.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.target">
            <summary>
            The target that will be positioned as the activity runs.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Target)">
            <summary>
            Constructs a new PPositionPathActivity that will move the target through multiple
            positions (from source to destination), transitioning from position to position
            as specified by the knot values.
            </summary>
            <param name="duration">The length of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="aTarget">The object that the activity will be applied to.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Target,System.Single[],System.Drawing.PointF[])">
            <summary>
            Constructs a new PPositionPathActivity that will move the target through the given
            positions (from source to destination), transitioning from position to position
            as specified by the given knot values.
            </summary>
            <param name="duration">The length of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="aTarget">The object that the activity will be applied to.</param>
            <param name="knots">
            An array of values between 0 and 1 that indicate when the position UsefulThings.WinForms.Transitions should
            occur.
            </param>
            <param name="positions">
            The sequence of points that this activity animates through.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.#ctor(System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode,UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Target,System.Single[],System.Drawing.PointF[])">
            <summary>
            Constructs a new PPositionPathActivity that will move the target through the given
            positions in the order specified by the mode, transitioning from position to position
            as specified by the given knot values and looping the given number of iterations.
            </summary>
            <param name="duration">The length of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            The mode defines how the activity interpolates between states.
            </param>
            <param name="aTarget">The object that the activity will be applied to.</param>
            <param name="knots">
            An array of values between 0 and 1 that indicate when the position UsefulThings.WinForms.Transitions should
            occur.
            </param>
            <param name="positions">
            The sequence of points that this activity animates through.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.GetPosition(System.Int32)">
            <summary>
            Gets the position at the specified index.
            </summary>
            <param name="index">The index of the desired position.</param>
            <returns>The position at the specified index.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.SetPosition(System.Int32,System.Drawing.PointF)">
            <summary>
            Sets the position at the specified index.
            </summary>
            <param name="index">The index at which to set the position.</param>
            <param name="position">The new position to set.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.SetRelativeTargetValue(System.Single,System.Int32,System.Int32)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.PiccoloX.Activities.PPathActivity.SetRelativeTargetValue(System.Single,System.Int32,System.Int32)">
            PPathActivity.SetRelativeTargetValue</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.IsAnimation">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.Activities.PActivity.IsAnimation">PActivity.IsAnimation</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Positions">
            <summary>
            Gets or sets the sequence of points that this activity animates through.
            </summary>
            <value>The sequence of points this activity animates through.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.PositionPath">
            <summary>
            Sets the sequence of points that this activity animates through to the points along
            the given graphics path.
            </summary>
            <value>
            A graphics path whose points will be used to set the positions that this activity
            animates through.
            </value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Target">
            <summary>
            <b>Target</b> objects that want their position to be set by the position path
            activity must implement this interface.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Activities.PPositionPathActivity.Target.SetPosition(System.Single,System.Single)">
            <summary>
            This will be called by the position path activity for each new
            interpolated position that it computes while it is stepping.
            </summary>
            <param name="x">The x coordinate of the new position.</param>
            <param name="y">The y coordinate of the new position.</param>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.NamespaceDoc">
            <summary>
            This namespace contains classes that help integrate piccolo code with Windows
            forms components, such as a scrollable control.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.PCacheCanvas">
            <summary>
            <b>PCacheCanvas</b> is an extension of PCanvas that automatically
            installs a <see cref="T:UMD.HCIL.PiccoloX.Nodes.PCacheCamera">PCacheCamera</see>.
            </summary>
            <remarks>
            Java code contributed by Lance Good and ported by Aaron Clamage.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PCacheCanvas.CreateBasicScenegraph">
            <summary>
            Overridden.  Creats a scene graph with a <see cref="T:UMD.HCIL.PiccoloX.Nodes.PCacheCamera">PCacheCamera</see>
            as the main camera.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector">
            <summary>
            <b>PDefaultScrollDirector</b> is the default scroll director implementation.
            </summary>
            <remarks>
            This default implementation follows the widely accepted model of scrolling - namely
            the scrollbars control the movement of the window over the document rather than the
            movement of the document under the window.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.PScrollDirector">
            <summary>
            <b>PScrollDirector</b> is the interface an application can implement to control
            the scrolling of a <see cref="T:UMD.HCIL.Piccolo.PCanvas"/> in a <see cref="T:UMD.HCIL.PiccoloX.Components.PScrollableControl"/>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollDirector.Install(UMD.HCIL.PiccoloX.Components.PScrollableControl,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Installs the scroll director.
            </summary>
            <param name="scrollableControl">
            The scrollable control that signals this director.
            </param>
            <param name="view">The PCanvas that the scrollable control scrolls.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollDirector.UnInstall">
            <summary>
            Uninstalls the scroll director.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollDirector.GetViewPosition(System.Drawing.RectangleF)">
            <summary>
            Gets the view position given the specified camera bounds.
            </summary>
            <param name="bounds">
            The bounds for which the view position will be computed.
            </param>
            <returns>The view position.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollDirector.SetViewPosition(System.Single,System.Single)">
            <summary>
            Sets the view position.
            </summary>
            <param name="x">The x coordinate of the new position.</param>
            <param name="y">The y coordinate of the new position.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollDirector.GetViewSize(System.Drawing.RectangleF)">
            <summary>
            Gets the size of the view based on the specific camera bounds.
            </summary>
            <param name="bounds">
            The view bounds for which the view size will be computed.
            </param>
            <returns>The view size.</returns>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.scrollableControl">
            <summary>
            The scrollablecontrol that signals the scrolldirector.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.view">
            <summary>
            The canvas that this class directs.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.camera">
            <summary>
            The canvas' camera.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.root">
            <summary>
            The canvas' root. 
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.scrollInProgress">
            <summary>
            Flag to indicate when scrolling is currently in progress. 
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.#ctor">
            <summary>
            Constructs a new PDefaultScrollDirector.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.Install(UMD.HCIL.PiccoloX.Components.PScrollableControl,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Installs the scroll director and adds the appropriate handlers.
            </summary>
            <param name="scrollableControl">
            The scrollable control on which this director directs.
            </param>
            <param name="view">The PCanvas that the scrollable control scrolls.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.UnInstall">
            <summary>
            Uninstalls the scroll director from the scrollable control.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.GetViewPosition(System.Drawing.RectangleF)">
            <summary>
            Gets the view position given the specified camera bounds.
            </summary>
            <param name="bounds">
            The bounds for which the view position will be computed.
            </param>
            <returns>The view position.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.SetViewPosition(System.Single,System.Single)">
            <summary>
            Sets the view position in a manner consistent with standardized scrolling.
            </summary>
            <param name="x">The x coordinate of the new position.</param>
            <param name="y">The y coordinate of the new position.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.GetViewSize(System.Drawing.RectangleF)">
            <summary>
            Gets the size of the view based on the specified camera bounds.
            </summary>
            <param name="bounds">The view bounds for which the view size will be computed.</param>
            <returns>The view size.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.camera_ViewTransformChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Invoked when the camera's view changes.
            </summary>
            <param name="sender">The source of the property changed event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.camera_BoundsChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Invoked when the bounds of the camera changes.
            </summary>
            <param name="sender">The source of the property changed event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.camera_FullBoundsChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Invoked when the full bounds of the camera changes.
            </summary>
            <param name="sender">The source of the property changed event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.root_BoundsChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Invoked when the bounds of the root changes.
            </summary>
            <param name="sender">The source of the property changed event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.root_FullBoundsChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Invoked when the full bounds of the root changes.
            </summary>
            <param name="sender">The source of the property changed event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PDefaultScrollDirector.UnionOfLayerFullBounds">
            <summary>
            Gets the the total bounds of all the layers.
            </summary>
            <remarks>
            Subclasses can override this method to add a margin.
            </remarks>
            <value>The total bounds of all the layers.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.ScrollBarPolicy">
            <summary>
            This enumeration is used by the <see cref="T:UMD.HCIL.PiccoloX.Components.PScrollableControl"/> class.  It represents
            the various policies that guide when a scrollbar should be displayed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.ScrollBarPolicy.Always">
            <summary>
            The scrollbar should always be displayed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.ScrollBarPolicy.Never">
            <summary>
            The scrollbar should never be displayed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.ScrollBarPolicy.AsNeeded">
            <summary>
            The scrollbar should only be displayed when needed.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.PScrollableControl">
            <summary>
            <b>PScrollableControl</b> is a simple control that correctly handles scrolling a
            <see cref="T:UMD.HCIL.Piccolo.PCanvas"/>.
            </summary>
            <remarks>
            This class does not extend <see cref="T:System.Windows.Forms.ScrollableControl">
            System.Windows.Forms.ScrollableControl</see> since there is no simple mechanism
            to override the scrolling behavior in that class.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.vScrollBar">
            <summary>
            The scrollbar that scrolls the canvas in the vertical direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.hScrollBar">
            <summary>
            The scrollbar that scrolls the canvas in the horizontal direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.view">
            <summary>
            The canvas scrolled by the vertical and horizontal scrollbars.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.scrollDirector">
            <summary>
            The director that this scrollable control signals.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.scrollable">
            <summary>
            A value that indicates whether scrolling is turned on for this scrollable
            control.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.vsbPolicy">
            <summary>
            The policy for the vertical scrollbar.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.hsbPolicy">
            <summary>
            The policy for the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.smallChangeFactor">
            <summary>
            The value multiplied by the viewsize to calculate the SmallChange.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.largeChangeFactor">
            <summary>
            The value multiplied by the viewsize to calculate the LargeChange.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.vSmallChange">
            <summary>
            The vertical small change in pixels.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.hSmallChange">
            <summary>
            The horizontal small change in pixels.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.vLargeChange">
            <summary>
            The vertical large change in pixels.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.hLargeChange">
            <summary>
            The horizontal large change in pixels.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.autoLargeChange">
            <summary>
            The value indicating whether or not the large change should be
            calculated automatically as the extent changes.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.scroll">
            <summary>
            The activity used to scroll the view when AnimateScrolls is true.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.animateScrolls">
            <summary>
            A value that indicates whether or not scrolls are animated.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Components.PScrollableControl.animateScrollDuration">
            <summary>
            The duration of a scroll when animateScrolls is true.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.#ctor">
            <summary>
            Constructs a new PScrollableControl.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.#ctor(UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Constructs a new PScrollableControl that scrolls the given canvas.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden.  This method is overridden to direct the focus to the view.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.scrollBar_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Sets the view position to the appropriate value when either scrollbar changes.
            </summary>
            <param name="sender">The source of the ScrollEvent.</param>
            <param name="e">A ScrollEventArgs containing the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.Scroll(System.Windows.Forms.ScrollBar,System.Windows.Forms.ScrollEventArgs,System.Boolean)">
            <summary>
            Scrolls the view according to the given ScrollEventArgs.
            </summary>
            <param name="scrollBar">The source of the ScrollEvent.</param>
            <param name="e">A ScrollEventArgs containing the event data.</param>
            <param name="animateFirst">
            A boolean value indicating whether or not to animate the first scroll.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.TerminatePreviousScroll(System.Windows.Forms.ScrollBar,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Terminates the previous scroll activity if a new scroll event occurs.
            </summary>
            <param name="scrollBar">The source of the new Scroll event.</param>
            <param name="e">The event data associated with the Scroll event.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden.  See <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Lays out the scrollbars and the canvas.
            </summary>
            <param name="levent">A LayoutEventArgs containing the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.UpdateScrollbars">
            <summary>
            Updates the values of the scrollbars to the current state of the view.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.CreateScrollDirector">
            <summary>
            Subclassers can override this method to install a different scroll director
            in the constructor.  Returns a new <see cref="T:UMD.HCIL.PiccoloX.Components.PScrollDirector"/> object.
            </summary>
            <returns>A new <see cref="T:UMD.HCIL.PiccoloX.Components.PScrollDirector"/> object.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.GetViewSize(System.Drawing.RectangleF)">
            <summary>
            Gets the view size from the scroll director based on the specified extent size
            </summary>
            <param name="bounds">The extent size from which the view size is computed.</param>
            <returns>The view size.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.SetViewPosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Sets the view position of the scrollDirector.
            </summary>
            <param name="point">The new position.</param>
            <param name="animate">Indicates whether or not to animate the transition.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.GetVSmallChange(System.Drawing.Size)">
            <summary>
            Deprecated.  Use VSmallChange instead.
            <para>
            Subclasses should override the get accessor to change the value set when
            <see cref="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.UpdateScrollbars"/> is called.
            </para>
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.GetVLargeChange(System.Drawing.Size)">
            <summary>
            Deprecated.  Use VLargeChange instead.
            <para>
            Subclasses should override the get accessor to change the value set when
            <see cref="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.UpdateScrollbars"/> is called.
            </para>
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.GetHSmallChange(System.Drawing.Size)">
            <summary>
            Deprecated.  Use HSmallChange instead.
            <para>
            Subclasses should override the get accessor to change the value set when
            <see cref="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.UpdateScrollbars"/> is called.
            </para>
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.GetHLargeChange(System.Drawing.Size)">
            <summary>
            Deprecated;  Use HLargeChange instead.
            <para>
            Subclasses should override the get accessor to change the value set when
            <see cref="M:UMD.HCIL.PiccoloX.Components.PScrollableControl.UpdateScrollbars"/> is called.
            </para>
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.Canvas">
            <summary>
            Gets or sets the canvas scrolled by this scrollable control.
            </summary>
            <value>The canvas scrolled by this scrollable control.</value>
            <remarks>
            When this property is set, the canvas is anchored to the scrollable control, the
            appropriate event handlers are set up, and the scroll director is instantiated.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VScroll">
            <summary>
            Gets a value indicating whether the vertical scrollbar is currently being
            displayed.
            </summary>
            <value>
            A value indicating whether the vertical scrollbar is currently being displayed.
            </value>
            <remarks>
            Use the <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VsbPolicy"/> property to control when the vertical scrollbar
            is displayed.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HScroll">
            <summary>
            Gets a value indicating whether the horizontal scrollbar is currently being
            displayed.
            </summary>
            <value>
            A value indicating whether the horizontal scrollbar is currently being displayed.
            </value>
            <remarks>
            Use the <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HsbPolicy"/> property to control when the horizontal scrollbar
            is displayed.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.Scrollable">
            <summary>
            Gets or sets a value that indicates whether scrolling is turned on for this scrollable
            control.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VsbPolicy">
            <summary>
            Gets or sets the policy for the vertical scrollbar.
            </summary>
            <value>The policy for the vertical scrollbar.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HsbPolicy">
            <summary>
            Gets or sets the policy for the horizontal scrollbar.
            </summary>
            <value>The policy for the horizontal scrollbar.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AnimateScrolls">
            <summary>
            Gets or sets a value that indicates whether or not scrolls are animated.
            </summary>
            <value>True if scrolls should be animated; false, otherwise.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AnimateScrollDuration">
            <summary>
            Gets or sets the duration of a scroll when
            <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AnimateScrolls">AnimateScrolls</see> is true.
            </summary>
            <remarks>
            Note, if the scroll duration is longer than the interval of the scrollbar's
            internal timer, the animation will be cut off when the mouse is held down
            over the arrow buttons or the scrollbar's trough.  To avoid this behavior,
            use a relatively short animation time.
            </remarks>
            <value>The duration of a scroll.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.ScrollDirector">
            <summary>
            Gets or sets the scroll director for this scrollable control.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.Extent">
            <summary>
            Gets the extent size.
            </summary>
            <value>The extent size.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.ViewSize">
            <summary>
            Gets the view size from the scroll director based on the current extent size.
            </summary>
            <value>The view size.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.ViewPosition">
            <summary>
            Gets or sets the view position from the scroll director.
            </summary>
            <value>The view position.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChangeFactor">
            <summary>
            Gets or sets the value multiplied by the extent to calculate the LargeChange
            when <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">AutoLargeChange</see> is true.
            </summary>
            <value>The value multiplied by the viewsize to calculate the LargeChange.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">
            <summary>
            Gets or sets a value indicating whether or not the large change should be
            calculatied automatically as the extent changes.
            </summary>
            <remarks>
            When this property is true, the large change will always be equal to the
            <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChangeFactor">AutoLargeChangeFactor</see> *
            <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.Extent">Extent</see>.Height and any value set via the VLargeChangeXXX
            and HLargeChangeXXX properties will be ignored.  When this property is false,
            the large change will be equal to the values set via the VLargeChangeXXX and
            the HLargeChangeXXX properties.
            </remarks>
            <value>
            A value indicating whether or not the large change should be calculated
            automatically as the extent changes.
            </value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VLargeChangePixels">
            <summary>
            Gets or sets the vertical large change in pixels.
            </summary>
            <remarks>
            This value is ignored if <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">AutoLargeChange</see> is true.
            </remarks>
            <value>The vertical large change in pixels</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VLargeChangeView">
            <summary>
            Gets or sets the vertical large change in view coordinates.
            </summary>
            <remarks>
            This value is ignored if <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">AutoLargeChange</see> is true.
            </remarks>
            <value>The vertical large change in view coordinates</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HLargeChangePixels">
            <summary>
            Gets or sets the horizontal large change in pixels.
            </summary>
            <remarks>
            This value is ignored if <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">AutoLargeChange</see> is true.
            </remarks>
            <value>The horizontal large change in pixels</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HLargeChangeView">
            <summary>
            Gets or sets the horizontal large change in view coordinates.
            </summary>
            <remarks>
            This value is ignored if <see cref="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.AutoLargeChange">AutoLargeChange</see> is true.
            </remarks>
            <value>The horizontal large change in view coordinates</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VSmallChangePixels">
            <summary>
            Gets or sets the vertical small change in pixels.
            </summary>
            <value>The vertical small change in pixels</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.VSmallChangeView">
            <summary>
            Gets or sets the vertical small change in view coordinates.
            </summary>
            <value>The vertical small change in pixels</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HSmallChangePixels">
            <summary>
            Gets or sets the horizontal small change in pixels.
            </summary>
            <value>The horizontal small change in pixels</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Components.PScrollableControl.HSmallChangeView">
            <summary>
            Gets or sets the horizontal small change in view coordinates.
            </summary>
            <value>The horizontal small change in view coordinates</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Components.PScrollableControl.ScrollActivity">
            <summary>
            An activity that animates the view to a new position.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.NamespaceDoc">
            <summary>
            This namespace provides "extra" event handlers, which may be useful, but are not
            important enough to be included in the core Piccolo package.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PControlEventHandler">
            <summary>
            <b>PControlEventHandler</b> implements simple focus based navigation for
            <see cref="T:UMD.HCIL.PiccoloX.Nodes.PControl"/> nodes.
            </summary>
            <remarks>
            When a mouse button is pressed over a <see cref="T:UMD.HCIL.PiccoloX.Nodes.PControl"/> node, the
            view is zoomed so that the node is at the natural size of the control
            (100 percent scale).  The view is also panned, if necessary, to keep the
            node on the screen.  The <see cref="T:UMD.HCIL.PiccoloX.Nodes.PControl"/> node is then switched to
            editing mode.
            <para>
            A control can only have one parent.  But, Piccolo nodes can be viewed by
            multiple cameras, which in turn may be displayed on multiple canvases.
            For simplicity, this event handler only allows one <see cref="T:UMD.HCIL.PiccoloX.Nodes.PControl"/>
            node to be editable at a time.  So, whenever a new PControl gets the focus,
            the previously focused node is made non-editable.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PControlEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Moves the focus to the <see cref="T:UMD.HCIL.PiccoloX.Nodes.PControl"/> node under
            the cursor.
            </summary>
            <param name="sender">The source of the PInputEvent.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PControlEventHandler.DirectCameraViewToControl(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.PiccoloX.Nodes.PControl,UMD.HCIL.Piccolo.Util.PPickPath,System.Int32)">
            <summary>
            Animates the camera's view to keep the control node on the screen and at 100
            percent scale with minimal view movement.
            </summary>
            <param name="aCamera">The camera whose view will be animated.</param>
            <param name="aControlNode">The control node to animate to.</param>
            <param name="path">The pick path through which the control node was picked.</param>
            <param name="duration">The length of the animation.</param>
            <returns>
            The activity that animates the camera's view to the control node.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PControlEventHandler.AnimateCameraViewMatrixTo(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.Util.PMatrix,System.Int32)">
            <summary>
            Animate the camera's view matrix from its current value when the activity
            starts to the new destination matrix value.
            </summary>
            <param name="aCamera">The camera whose view matrix will be animated.</param>
            <param name="aMatrix">The final matrix value.</param>
            <param name="duration">
            The amount of time that the animation should take.
            </param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler">
            <summary>
            <b>PNavigationEventHandler</b> implements simple focus based navigation.
            </summary>
            <remarks>
            This event handler uses mouse button one or the arrow keys to set a new focus.
            It then animates the canvas view to keep the focus node on the screen and at
            100 percent scale with minimal view movement.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.#ctor">
            <summary>
            Constructs a new PNavigationEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Accepts left mouse button events and non-mouse events.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the event is a left mouse button event or non-mouse event; otherwise,
            false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.OnKeyDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Handles key events that move the focus.
            </summary>
            <param name="sender">The source of the PInputEvent.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            If an arrow key was pressed, this method moves the focus to a node in the
            appropriate direction.  The Page Up and Page Down keys act just like the Up
            and Down arrow keys respectively.  However when the Alt modifier is pressed,
            Page Up will move the focus to the parent of the current focus and Page Down
            will move the focus to the nearest child.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Moves the focus to the node under the cursor.
            </summary>
            <param name="sender">The source of the PInputEvent.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusDown(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest node below this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusIn(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest child of this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusLeft(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest node left of this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusOut(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest ancestor of this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusRight(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest node right of this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusUp(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the nearest node above this node.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.MoveFocusToMouseOver(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Moves the focus to the node under the cursor.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.GetNeighborInDirection(UMD.HCIL.PiccoloX.Util.Direction)">
            <summary>
            Gets the nearest neighbor in the specified direction.
            </summary>
            <param name="aDirection">
            The direction in which to find the nearest neighbor.
            </param>
            <returns>The nearest neighbor in the specified direction.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.GetNeighbors">
            <summary>
            Get a list of all neighbors (parent, siblings and children).
            </summary>
            <returns>A list of all neighbors.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.NodeIsNeighborInDirection(UMD.HCIL.Piccolo.PNode,UMD.HCIL.PiccoloX.Util.Direction)">
            <summary>
            Returns true if the given node is a neighbor of the current focus in the
            specified direction.
            </summary>
            <param name="aNode">The node to test.</param>
            <param name="aDirection">The direction in which to perform the test.</param>
            <returns>
            True if the given node is a neighbor in the specified direction; otherwise,
            false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.SortNodesByDistanceFromPoint(UMD.HCIL.Piccolo.Util.PNodeList,System.Drawing.PointF)">
            <summary>
            Sorts the given list of nodes by their distance from the given point.  Nodes
            closest to the point will be placed first in the list.
            </summary>
            <param name="aNodesList">The list to sort.</param>
            <param name="aPoint">The point to use for the comparison.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.AnimateCameraViewMatrixTo(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.Util.PMatrix,System.Int32)">
            <summary>
            Animate the camera's view matrix from its current value when the activity
            starts to the new destination matrix value.
            </summary>
            <param name="aCamera">The camera whose view matrix will be animated.</param>
            <param name="aMatrix">The final matrix value.</param>
            <param name="duration">
            The amount of time that the animation should take.
            </param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.DirectCameraViewToFocus(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.PNode,System.Int32)">
            <summary>
            Animates the camera's view to keep the focus node on the screen and at 100
            percent scale with minimal view movement.
            </summary>
            <param name="aCamera">The camera whose view will be animated.</param>
            <param name="aFocusNode">The focus node to animate to.</param>
            <param name="duration">The length of the animation.</param>
            <returns>
            The activity that animates the camera's view to the focus node.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.FillViewWhiteSpace(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Removes any white space.  The canvas may be panned and zoomed in to do this.
            </summary>
            <param name="aCamera">The camera whose view will be adjusted.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.ZoomToFocusDuration">
            <summary>
            Gets or sets the duration for animating to a new focus node.
            </summary>
            <value>The duration for animating to a new focus node.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.DistanceFromPointComparer">
            <summary>
            A comparer class used by <see cref="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.SortNodesByDistanceFromPoint(UMD.HCIL.Piccolo.Util.PNodeList,System.Drawing.PointF)"/>.
            </summary>
            <remarks>
            This comparer is used to sort nodes by their distance from the specified point.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.DistanceFromPointComparer.#ctor(System.Drawing.PointF)">
            <summary>
            Constructs a new DistanceFromPointComparer with the given point.
            </summary>
            <param name="aPoint">The point to use for the comparison.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNavigationEventHandler.DistanceFromPointComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two nodes and returns a value indicating whether the first node's
            distance to the point is less than, equal to or greater than the second
            node's distance to the specified point.
            </summary>
            <param name="o1">The first node to compare.</param>
            <param name="o2">The second node to compare.</param>
            <returns>
            Less than 0, if o1's distance to the point is less than o2's distance to the
            point; 0 if o1's distance to the point equals 02's distance to the point;
            greater than 0 if o1's distance to the point is greater than o2's distance to
            the point.
            </returns>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNotification">
            <summary>
            <b>PNotification</b> objects encapsulate information so that it can be
            broadcast to other objects by a <see cref="T:UMD.HCIL.PiccoloX.Events.PNotificationCenter"/>.
            </summary>
            <remarks>
            A PNotification contains a name, an object, and an optional properties map.
            The name is a tag identifying the notification.  The object is any object
            that the poster of the notification wants to send to observers of that
            notification (typically, it is the object that posted the notification). The
            properties map stores other related objects, if any.
            <para>
            You don’t usually create your own notifications directly. The
            <see cref="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.PostNotification(System.String,System.Object)">
            PNotificationCenter.PostNotification</see> method allows you to conveniently
            post a notification without creating it first.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotification.name">
            <summary>
            The name of this notification.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotification.source">
            <summary>
            The object associated with this notification.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotification.properties">
            <summary>
            Properties associated with this notification.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotification.#ctor(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Constructs a new PNotification.
            </summary>
            <param name="name">The name of this notification.</param>
            <param name="source">The object associated with this notification.</param>
            <param name="properties">Properties associated with this notification.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotification.GetProperty(System.Object)">
            <summary>
            Gets a property associated with this notfication.
            </summary>
            <param name="key">The key that identifies the desired property.</param>
            <returns>A property associated with this notification.</returns>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNotification.Name">
            <summary>
            Gets the name of this notification.
            </summary>
            <value>The name of this notification.</value>
            <remarks>
            The value returned is the same name used to register with the notification center.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNotification.Object">
            <summary>
            Gets the object associated with this notification.
            </summary>
            <value>The object associated with this notification.</value>
            <remarks>
            The value returned is most often the same object that posted the notfication.  It
            may be null.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNotificationCenter">
            <summary>
            <b>PNotificationCenter</b> provides a way for objects that don’t know about
            each other to communicate.
            </summary>
            <remarks>
            This class receives PNotification objects and broadcasts them to all interested
            listeners.  Unlike standard C# events, the event handlers don't need to know about
            the event source, and the event source doesn't need to maintain event delegates.
            <para>
            Listeners of the notfications center are held by weak references.  So the
            notfication center will not create garbage collection problems as standard event
            listeners do.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotificationCenter.NULL_MARKER">
            <summary>
            Used to represent a null name or object in the listenersMap.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotificationCenter.DEFAULT_CENTER">
            <summary>
            The default notification center for registering listeners.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotificationCenter.listenersMap">
            <summary>
            A hash table of all listeners registered with this notification center.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.#ctor">
            <summary>
            Constructs a new PNotificationCenter.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.AddListener(System.Object,System.String,System.String,System.Object)">
            <summary>
            Registers the listener to receive notifications with the specified
            notification name and/or containing the given object.
            </summary>
            <param name="listener">The listener to register.</param>
            <param name="callbackMethodName">
            The name of the method to invoke on the listener.
            </param>
            <param name="notificationName">
            The name of notifications the listener would like to receive.
            </param>
            <param name="obj">
            The object for which the listener would like to recieve associated notifications.
            </param>
            <remarks>
            When a matching notification is posted, the 'callBackMethodName' message will be
            sent to the listener with a single PNotification argument.  If the notification
            name is null, the listener will receive all notifications with an object matching
            the given object. If the object is null, the listener will receive all
            notifications with the notification name.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.RemoveListener(System.Object)">
            <summary>
            Unregisters the listener from recieving notfications from this notfication
            center.
            </summary>
            <param name="listener">The listener to unregister.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.RemoveListener(System.Object,System.String,System.Object)">
            <summary>
            Unregisters the listener from recieving notifications matching notificationName
            and object.
            </summary>
            <param name="listener">The listener to unregister, or <c>null</c>.</param>
            <param name="notificationName">
            The name of notifications the listener would like to be unregistered from recieving.
            </param>
            <param name="obj">
            The object for which the listener would like to be unregistered from recieving
            associated notifications.
            </param>
            <remarks>
            If the listener is null, all listeners matching notificationName and object
            are unregistered.  If notificationName is null, the listener will be unregistered
            from all notifications containing the object.  If the object is null, the listener
            will be unregistered from all notifications matching notficationName.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.PostNotification(System.String,System.Object)">
            <summary>
            Creates a notification with the given name and object, and posts
            it to this notification center.
            </summary>
            <param name="notificationName">The name of the notification to post.</param>
            <param name="obj">The object associated with the notification.</param>
            <remarks>
            The object is typically the object posting the notification.  It may also be
            null.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.PostNotification(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates a notification with the given name, object and properties, and posts
            it to this notification center.
            </summary>
            <param name="notificationName">The name of the notification to post.</param>
            <param name="obj">The object to associate with the notification.</param>
            <param name="properties">The properties to associate with the notification.</param>
            <remarks>
            The object is typically the object posting the notification.  It may also be
            <c>null</c>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.PostNotification(UMD.HCIL.PiccoloX.Events.PNotification)">
            <summary>
            Post the notification to this notification center.
            </summary>
            <remarks>
            Instead of calling this method directly, it is usually easier to use one of the
            convenience <c>PostNotifcation</c> methods, which create the notification
            internally.
            </remarks>
            <param name="aNotification">The notification to post.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.MatchingKeys(System.String,System.Object)">
            <summary>
            Gets all keys that match the name/object pair.
            </summary>
            <remarks>
            Either or both the name and the object can be null.
            <para>
            If both the name and the object are specified, only keys that match both of these
            values will be returned.  If the name is <c>null</c>, all keys that match the
            object will be returned.  If the object is null, all keys that match the name will
            be returned.  And, If both the name and the object are <c>null</c>, all of the keys
            in the listeners map will be returned.
            </para>
            </remarks>
            <param name="name">The name for which to find matching keys.</param>
            <param name="obj">The object for which to find matching keys.</param>
            <returns>All keys that match the name/object pair.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.RemoveListener(System.Object,System.Object)">
            <summary>
            Removes the listener from the list mapped to the given key in the listeners
            map.
            </summary>
            <param name="listener">The listener to remove, or <c>null</c>.</param>
            <param name="key">
            The key that maps the list from which the listener will be removed.
            </param>
            <remarks>
            If listener is null, the entire list of listeners mapped to the given key will be
            removed.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.ProcessDeadKeys">
            <summary>
            Removes listeners that are mapped to keys which have been garbage collected.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNotificationCenter.DefaultCenter">
            <summary>
            Gets the default notification center for registering listeners.
            </summary>
            <value>The default notification center for registering listeners.</value>
            <remarks>
            This property returns a static PNotificationCenter that is lazily created.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundKey">
            <summary>
            <b>CompoundKey</b> stores a name/object pair used to map listener lists in the
            listeners map.
            </summary>
            <remarks>
            This class extends WeakReference to avoid the garbage collection problems
            associated with standard event listeners.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundKey.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a new CompoundKey, creating a weak reference to the object.
            </summary>
            <param name="aName">The name attribute of this key.</param>
            <param name="anObject">The object attribute of this key.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundKey.GetHashCode">
            <summary>
            Overridden.  See <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundKey.Equals(System.Object)">
            <summary>
            Overridden.  See <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundKey.Name">
            <summary>
            Gets the name attribute of this key.
            </summary>
            <value>The name attribute of this key.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue">
            <summary>
            <b>CompoundValue</b> stores an object (the listener) and a callback to invoke
            on that object.
            </summary>
            <remarks>
            This class extends WeakReference to avoid the garbage collection problems
            associated with standard event listeners.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.hashCode">
            <summary>
            A hash value, suitable for use in hashing algorithms and data structures like
            a hash table.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.methodInfo">
            <summary>
            The callback attribute of this compound value.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Constructs a new CompoundValue, creating a weak reference to the object.
            </summary>
            <param name="obj">The object attribute of this compound value.</param>
            <param name="methodInfo">The callback attribute of this compound value.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.GetHashCode">
            <summary>
            Overridden.  See <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.Equals(System.Object)">
            <summary>
            Overridden.  See <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PNotificationCenter.CompoundValue.MethodInfo">
            <summary>
            Gets the callback attribute of this compound value.
            </summary>
            <value>The callback attribute of this compound value.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler">
            <summary>
            <b>PSelectionEventHandler</b> provides standard interaction for selection.
            </summary>
            <remarks>
            Clicking selects the object under the cursor.  Shift-clicking allows multiple
            objects to be selected.  Dragging offers marquee selection.  And, by default,
            pressing the delete key deletes the selection.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.SELECTION_CHANGED_NOTIFICATION">
            <summary>
            The name for a selection changed notificaton.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.#ctor(UMD.HCIL.Piccolo.PNode,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Constructs a new PSelectionEventHandler that will handle selection for the
            children of the given selectable parent node.
            </summary>
            <param name="marqueeParent">
            The node to which the event handler dynamically adds a marquee (temporarily)
            to represent the area being selected.
            </param>
            <param name="selectableParent">
            The node whose children will be selected by this event handler.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.#ctor(UMD.HCIL.Piccolo.PNode,UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Constructs a new PSelectionEventHandler that will handle selection for the
            children of the given list of selectable parent nodes.
            </summary>
            <param name="marqueeParent">
            The node to which the event handler dynamically adds a marquee (temporarily)
            to represent the area being selected.
            </param>
            <param name="selectableParents">
            A list of nodes whose children will be selected by this event handler.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Init">
            <summary>
            Called by the constructors to perform some common initialization tasks.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Select(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Selects each node in the list, if the node is not already selected.
            </summary>
            <param name="items">The list of items to select.</param>
            <remarks>
            This method will decorate the nodes in the list with handles and
            post a SELECTION_CHANGED_NOTIFICATION if the selection has changed.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Select(System.Collections.ICollection)">
            <summary>
            Selects each node in the collection, if the node is not already selected.
            </summary>
            <param name="items">The collection of items to select.</param>
            <remarks>
            This method will decorate the nodes in the collection with handles and
            post a SELECTION_CHANGED_NOTIFICATION if the selection has changed.
            <para>
            Note that the collection must only contain objects of type
            <see cref="T:UMD.HCIL.Piccolo.PNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Select(System.Collections.IDictionary)">
            <summary>
            Selects each node used as a key in the dictionary, if the node is not
            already selected.
            </summary>
            <param name="items">The dictionary whose keys will be selected.</param>
            <remarks>
            This method will decorate the nodes used as keys with handles and post a
            SELECTION_CHANGED_NOTIFICATION if the selection has changed.
            <para>
            Note that the keys in the dictionary must be objects of type
            <see cref="T:UMD.HCIL.Piccolo.PNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.InternalSelect(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Selects the given node, if it is not already selected.
            </summary>
            <param name="node">The node to select.</param>
            <returns>True if the node was selected; otherwise, false.</returns>
            <remarks>
            The node will be decorated with handles if it is selected.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.PostSelectionChanged">
            <summary>
            Posts a SELECTION_CHANGED_NOTIFICATION to indicate that the current
            selection has changed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Select(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Selects the given node, if it is not already selected, and posts a
            SELECTION_CHANGED_NOTIFICATION if the current selection has changed.
            </summary>
            <param name="node">The node to select.</param>
            <remarks>
            The node will be decorated with handles if it is selected.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.DecorateSelectedNode(UMD.HCIL.Piccolo.PNode)">
            <summary> 
            Adds bounds handles to the given node.
            </summary>
            <param name="node">The node to decorate.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Unselect(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Unselects each node in the list, if the node is currently selected.
            </summary>
            <param name="items">The list of items to unselect.</param>
            <remarks>
            This method will remove the handles from the selected nodes in the
            list and post a SELECTION_CHANGED_NOTIFICATION if the selection has
            changed.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Unselect(System.Collections.ICollection)">
            <summary>
            Unselects each node in the collection, if the node is currently selected.
            </summary>
            <param name="items">The collection of items to unselect.</param>
            <remarks>
            This method will remove the handles from the selected nodes in the
            collection and post a SELECTION_CHANGED_NOTIFICATION if the selection has
            changed.
            <para>
            Note that the collection must only contain objects of type
            <see cref="T:UMD.HCIL.Piccolo.PNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.InternalUnselect(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Unselects the given node, if it is currently selected.
            </summary>
            <param name="node">The node to unselect.</param>
            <returns>True if the node was unselected; otherwise, false.</returns>
            <remarks>
            The handles will be removed from the node if it is unselected.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Unselect(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Unselects the given node, if it is currently selected, and posts a
            SELECTION_CHANGED_NOTIFICATION if the current selection has changed.
            </summary>
            <param name="node">The node to unselect.</param>
            <remarks>
            The handles will be removed from the node if it is unselected.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.UndecorateSelectedNode(UMD.HCIL.Piccolo.PNode)">
            <summary> 
            Removes bounds handles from the given node.
            </summary>
            <param name="node">The node to undecorate.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.UnselectAll">
            <summary>
            Unselects all the nodes that are currently selected, and posts a
            SELECTION_CHANGED_NOTIFICATION if the current selection has changed.
            </summary>
            <remarks>
            This method will remove the handles from all of the selected nodes.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.IsSelected(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the specified node is currently selected and false
            otherwise.
            </summary>
            <param name="node">The node to test.</param>
            <returns>True if the node is selected; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.IsSelectable(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Determines if the specified node is selectable (i.e., if it is a child
            of a node in the list of selectable parents).
            </summary>
            <param name="node">The node to test.</param>
            <returns>True if the node is selectable; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.AddSelectableParent(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Adds the specified node to the list of selectable parents.
            </summary>
            <param name="node">The node to add.</param>
            <remarks>
            Only nodes whose parents are added to the selectable parents list will
            be selectable.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.RemoveSelectableParent(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Removes the specified node from the list of selectable parents.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnStartDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnEndDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.IsOptionSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Returns a value indicating whether or not the input event was modified
            with a <c>Shift</c> key, in which case multiple selections will be
            allowed.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the input event was modified with a shift key; otherwise false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.IsMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Returns a value indicating whether the event represents a marquee
            selection or a normal selection.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the input event represents a marquee selection; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.InitializeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Sets the initial press point and press node for the selection.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.InitializeMarquee(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Sets some initial values for the marquee including it's brush and pen.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.StartOptionMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Starts an option marquee selection sequence (i.e. a marquee selection
            sequence where the <c>Shift</c> key was pressed).
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified at
            the beginning of an option marquee selection sequence.
            <para>
            Overriding methods must still call <c>base.StartOptionMarqueeSelection()</c> for
            correct behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.StartMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Starts a marquee selection sequence.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified
            at the beginning of a marquee selection sequence.
            <para>
            Overriding methods must still call <c>base.StartMarqueeSelection()</c> for correct
            behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.StartStandardSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Starts a standard selection sequence.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified at
            the beginning of a standard selection sequence.
            <para>
            Overriding methods must still call <c>base.StartStandardSelection()</c> for correct
            behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.StartStandardOptionSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Starts an option selection sequence (i.e. a selection sequence where the
            <c>Shift</c> key was pressed).
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified at
            the beginning of an option selection sequence.
            <para>
            Overriding methods must still call <c>base.StartStandardOptionSelection()</c> for
            correct behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.UpdateMarquee(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Update the marquee bounds based on the given event data.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.SetSafeMarqueePen(System.Single,System.Single)">
            <summary>
            When the width and the height are too small to render the path using the current
            pen, this method sets the marquee to a pen that can render the path safely.
            </summary>
            <param name="width">The width of the marquee.</param>
            <param name="height">The height of the marquee.</param>
            <returns>True if the marquee pen was changed; otherwise, false.</returns>
            <remarks>
            This method is necessary to handle the case where the perimeter of the marquee
            is less than the DashWidth.  In that case, if the path is rendered with a pen that
            has a DashOffset greater than or equal to the DashWidth, .NET will throw a
            <see cref="T:System.OutOfMemoryException">System.OutOfMemeoryException</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.ComputeMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Select the selectable nodes whose bounds intersect the marquee, unselecting
            previously selected nodes.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.ComputeOptionMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Select the selectable nodes whose bounds intersect the marquee, without
            unselecting previously selected nodes.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.CreateNodeFilter(System.Drawing.RectangleF)">
            <summary>
            Creates a new <see cref="T:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter"/> with the given bounds.
            </summary>
            <param name="bounds">The bounds for the <see cref="T:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter"/>.</param>
            <returns>Returns a new <see cref="T:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter"/>.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.DragStandardSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Drags the nodes in a standard selection.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified
            while a standard selection is being dragged.
            <para>
            Overriding methods must still call <c>base.DragStandardSelection()</c> for correct
            behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.EndMarqueeSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Ends a marquee selection sequence.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified
            at the end of a marquee selection sequence.
            <para>
            Overriding methods must still call <c>base.EndMarqueeSelection()</c> for correct
            behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.EndStandardSelection(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Ends a standard selection sequence.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses can override this method to be notified
            at the end of a standard selection sequence.
            <para>
            Overriding methods must still call <c>base.EndStandardSelection()</c> for correct
            behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.OnDragActivityStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  This gets called continuously during the drag, and is used
            to animate the marquee.
            </summary>
            <param name="sender">The source of the PInputEvent.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.OnKeyDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Deletes selection when delete key is pressed (if enabled).
            </summary>
            <param name="sender">The source of the PInputEvent.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.Selection">
            <summary>
            Gets a copy of the currently selected nodes.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.SelectionReference">
            <summary>
            Gets a reference to the currently selected nodes.  You should not
            modify or store this collection.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.SelectableParent">
            <summary>
            Clears the list of selectable parents and sets the given node as the only
            selectable parent.
            </summary>
            <value>The node whose children will be selectable.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.SelectableParents">
            <summary>
            Gets or sets the list of selectable parents.
            </summary>
            <value>The list of selectable parents.</value>
            <remarks>
            Only nodes whose parents are added in the selectable parents list will
            be selectable.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.MarqueeBounds">
            <summary>
            Gets the bounds of the marquee, if the marquee exists.
            </summary>
            <value>
            The bounds of the marquee, if it exists; otherwise,
            <see cref="F:System.Drawing.RectangleF.Empty"/>.
            </value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.DeleteKeyActive">
            <summary>
            Gets or sets a value that indicates whether or not the <c>Delete</c> key
            should delete the selection.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.MarqueeBrush">
            <summary>
            Gets or sets the brush used to fill the interior of the marquee.
            </summary>
            <value>The brush used to paint the marquee.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter">
            <summary>
            A node filter that accepts nodes whose bounds intersect the specified
            bounds.
            </summary>
            <remarks>
            This class is used during a marquee selection to retrieve nodes that
            intersect the bounds of the marquee.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.selectionHandler">
            <summary>
            The current selection handler.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.bounds">
            <summary>
            The bounds to use when deciding whether to accept a node.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.localBounds">
            <summary>
            The bounds stored in the local coordinates of the node being checked.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.#ctor(System.Drawing.RectangleF,UMD.HCIL.PiccoloX.Events.PSelectionEventHandler)">
            <summary>
            Constructs a new BoundsFilter with the given bounds and selectionHandler.
            </summary>
            <param name="bounds">
            The bounds to use when deciding whether to accept a node.
            </param>
            <param name="selectionHandler">
            The selection event handler to which this BoundsFilter will apply.
            </param>  
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.Accept(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the node's bounds intersects the bounds specified by the
            BoundsFilter.
            </summary>
            <remarks>
            For a node to be accepted, it must also satisfy the following conditions:
            it must be pickable, it must not be the marquee node, it must not be a
            selectable parent, and the it must not be a layer that is viewed by a camera
            that is a selectable parent
            </remarks>
            <param name="node">The node to test.</param>
            <returns>True if the node is accepted; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.AcceptChildrenOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the node is a selectable parent or a layer that is viewed
            by a camera that is a selectable parent.
            </summary>
            <param name="node">The node to test.</param>
            <returns>
            True if the node's children should be accepted; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PSelectionEventHandler.BoundsFilter.IsCameraLayer(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the node a layer that is viewed by a camera that is a
            selectable parent.
            </summary>
            <param name="node">The node to test.</param>
            <returns>
            True if the node is a layer that is viewed by a camera that is a selectable
            parent; otherwise, false.
            </returns>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Events.PZoomToEventHandler">
            <summary>
            <b>PZoomToEventHandler</b> is used to zoom the camera view to the node
            clicked on with button one.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PZoomToEventHandler.#ctor">
            <summary>
            Constructs a new PZoomToEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PZoomToEventHandler.PZoomToEventHandlerAcceptsEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            The filter for a PZoomToEventHandler.  This method only accepts left mouse button
            events that have not yet been handled.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the event is an unhandled left mouse button event; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PZoomToEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Events.PZoomToEventHandler.ZoomTo(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Animates the camera's view, panning and scaling when necessary, to fully fit the
            bounds of the picked node into the camera's view bounds.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.NamespaceDoc">
            <summary>
            This namespace contains handle nodes that modify some aspect of Piccolo when
            they are dragged.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.PBoundsHandle">
            <summary>
            <b>PBoundsHandle</b> is a handle for resizing the bounds of another node.
            </summary>
            <remarks>
            If a bounds handle is dragged such that the target node's width or height becomes
            negative then each drag handle's locator associated with that target node is
            "flipped" so that they are attached to and dragging a different corner of the
            node's bounds.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.PHandle">
            <summary>
            <b>PHandle</b> is used to modify some aspect of Piccolo when it is dragged.
            </summary>
            <remarks>
            Each handle has a <see cref="T:UMD.HCIL.PiccoloX.Util.PLocator"/> that it uses to automatically position itself.
            See <see cref="T:UMD.HCIL.PiccoloX.Handles.PBoundsHandle"/> for an example of a handle that resizes the bounds
            of another node.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Handles.PHandle.DEFAULT_HANDLE_SIZE">
            <summary>
            The default width and height of a handle.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Handles.PHandle.DEFAULT_COLOR">
            <summary>
            The default color of a handle.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Handles.PHandle.StartHandleDrag">
            <summary>
            Used to notify classes of the start of a new handle drag sequence.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDrag">
            <summary>
            Used to notify classes of drag events in a handle drag sequence.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Handles.PHandle.EndHandleDrag">
            <summary>
            Used to notify classes of the end of a handle drag sequence.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.#ctor(UMD.HCIL.PiccoloX.Util.PLocator)">
            <summary>
            Constructs a new handle that will use the given locator to locate itself
            on its parent node.
            </summary>
            <param name="aLocator">
            The locator used by this handle to locate itself on its parent node.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.OnStartHandleDrag(System.Object,System.Drawing.PointF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified when the handle starts
            to get dragged.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="point">The drag position relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.OnHandleDrag(System.Object,System.Drawing.SizeF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified as the handle is dragged.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="size">The drag delta relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.OnEndHandleDrag(System.Object,System.Drawing.PointF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified when the handle stops
            getting dragged.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="point">The drag position relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.InstallHandleEventHandlers">
            <summary>
            Adds the event handler that will be responsible for the drag handle interaction.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.ParentBoundsChanged">
            <summary>
            Overridden.  Relocate the handle whenever the parent's bounds change.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.RelocateHandle">
            <summary>
            Force this handle to relocate itself using its locator.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PHandle and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this PHandle and all of its descendent nodes to the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
            <remarks>
            This node's parent is written out conditionally, that is it will only be written out
            if someone else writes it out unconditionally.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PHandle.CreatePath">
            <summary>
            Creates the path that will represent this handle.
            </summary>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses should override this method to use a specialized
            path for the handle.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragHandler">
            <summary>
            Gets the event handler that is responsible for the drag handle interaction.
            </summary>
            <value>The event handler responsible for the drag handle interaction.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PHandle.Locator">
            <summary>
            Gets or sets the locator that this handle uses to position itself on its parent
            node.
            </summary>
            <value>
            The locator that this handle uses to position itself on its parent node.
            </value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PHandle.Parent">
            <summary>
            Overridden.  Relocate the handle whenever the parent changes.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler">
            <summary>
            <b>HandleDragEventHandler</b> is the event handler responsible for the drag handle
            interaction.
            </summary>
            <remarks>
            This event handler will delegate drag events to this handle's <c>OnHandleDrag</c>
            methods.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler.#ctor(UMD.HCIL.PiccoloX.Handles.PHandle)">
            <summary>
            Constructs a new HandleDragEventHandler.
            </summary>
            <param name="handle">
            The node that this event handler will handle drag events for.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.DoesAcceptEvent</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnStartDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PHandle.HandleDragEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnEndDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.#ctor(UMD.HCIL.PiccoloX.Util.PLocator)">
            <summary>
            Constructs a new PBoundsHandle that will use the given locator to locate itself
            on another node's bounds.
            </summary>
            <param name="locator">
            The locator used by this handle to locate itself on another node's bounds.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.AddBoundsHandlesTo(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Adds bounds handles to the given node.
            </summary>
            <param name="aNode">The node to add bounds handles to.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.AddStickyBoundsHandlesTo(UMD.HCIL.Piccolo.PNode,UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Adds sticky bounds handles (with respect to the given camera) to the specified node.
            </summary>
            <param name="aNode">The node to add sticky bounds handles to.</param>
            <param name="camera">The camera to stick the bounds handles to.</param>
            <remarks>
            Sticky bounds handles are not affected by the view transform of the camera.  That
            is, they will remain a constant size as the view is zoomed in and out.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.RemoveBoundsHandlesFrom(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Removes bounds handles from the given node.
            </summary>
            <param name="aNode">The node to remove the bounds handles from.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.InstallHandleEventHandlers">
            <summary>
            Overridden.  Adds the event handler that will be responsible for setting the mouse
            cursor when it enters/leaves this handle.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.GetCursorFor(UMD.HCIL.PiccoloX.Util.Direction)">
            <summary>
            Gets the appropriate cursor for the given direction.
            </summary>
            <param name="side">The direction for which to get the appropriate cursor.</param>
            <returns>The appropriate cursor for the given direction.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.OnStartHandleDrag(System.Object,System.Drawing.PointF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Notifies the node whose bounds this handle is locating itself on that
            <c>SetBounds</c> will be repeatedly called.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="point">The drag position relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.OnHandleDrag(System.Object,System.Drawing.SizeF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Determines if this bounds handle or any of it's siblings need to be
            flipped.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="size">The drag delta relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            While dragging the bounds handles, the node being resized may cross over itself and
            become reversed (if it is dragged through zero-width or zero-height).  In this case,
            the locators for some of the bounds handles will have to be flipped to the opposite
            side.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.OnEndHandleDrag(System.Object,System.Drawing.PointF,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Notifies the node whose bounds this handle is locating itself on that
            the resize bounds sequence is finisheed.
            </summary>
            <param name="sender">The source of this handle drag event.</param>
            <param name="point">The drag position relative to the handle.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.FlipSiblingBoundsHandles(System.Boolean,System.Boolean)">
            <summary>
            Flips this bounds handle or any if it's siblings if necessary.
            </summary>
            <param name="flipX">
            True if bounds handles should be flipped in the x-direction.
            </param>
            <param name="flipY">
            True if bounds handles should be flipped in the y-direction.
            </param>
            <remarks>
            While dragging the bounds handles, the node being resized may cross over itself and
            become reversed (if it is dragged through zero-width or zero-height).  In this case,
            the locators for some of the bounds handles will have to be flipped to the opposite
            side.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.FlipHandleIfNeeded(System.Boolean,System.Boolean)">
            <summary>
            Flips this bounds handle if necessary.
            </summary>
            <param name="flipX">
            True if this bounds handle should be flipped in the x-direction.
            </param>
            <param name="flipY">
            True if this bounds handle should be flipped in the y-direction.
            </param>
            <remarks>
            While dragging the bounds handles, the node being resized may cross over itself and
            become reversed (if it is dragged through zero-width or zero-height).  In this case,
            the locators for some of the bounds handles will have to be flipped to the opposite
            side.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PBoundsHandle and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorEventHandler">
            <summary>
            Gets the event handler that is responsible for setting the mouse cursor when it
            enters/exits this handle.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorHandler">
            <summary>
            <b>HandleCursorHandler</b> is the event handler that is responsible for setting the
            mouse cursor when it enters/leaves this handle.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorHandler.#ctor(UMD.HCIL.PiccoloX.Handles.PBoundsHandle)">
            <summary>
            Constructs a new HandleCursorHandler.
            </summary>
            <param name="target">
            The node that this event handler will change the cursor for.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorHandler.OnMouseEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseEnter</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorHandler.OnMouseLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseLeave</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PBoundsHandle.HandleCursorHandler.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseUp</see>.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.StartHandleDragDelegate">
            <summary>
            A delegate used to notify classes of the start of a new handle drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.HandleDragDelegate">
            <summary>
            A delegate used to notify classes of drag events in a handle drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.EndHandleDragDelegate">
            <summary>
            A delegate used to notify classes of the end of a handle drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager">
            <summary>
            <b>PStickHandleManager</b> is used to add "sticky" handles to a node.
            </summary>
            <remarks>
            Sticky handles are handles that will not be affected by the view matrix of the
            camera they are stuck to.  This means, for example, they will not change in size
            as the camera is zoomed in and out.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.#ctor(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Constructs a new PStickyHandleManager, adding sticky bounds handles (with
            respect to the given camera) to the specified target node.
            </summary>
            <param name="newCamera">The camera to stick the bounds handles to.</param>
            <param name="newTarget">
            The node that will be resized by the sticky bounds handles.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.SetCameraTarget(UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Sets the camera the bounds handles will be stuck to and the target node that
            will be resized by the sticky bounds handles.
            </summary>
            <param name="newCamera">The camera to stick the bounds handles to.</param>
            <param name="newTarget">
            The node that will be resized by the sticky bounds handles.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Overridden.  Sets the bounds of the target node.
            </summary>
            <param name="x">The new x coordinate of the bounds.</param>
            <param name="y">The new y coordinate of the bounds.</param>
            <param name="width">The new width of the bounds.</param>
            <param name="height">The new height of the bounds.</param>
            <returns>True if the bounds have changed; otherwise, false.</returns>
            <remarks>
            These bounds are stored in the local coordinate system of the target node.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.StartResizeBounds">
            <summary>
            Overridden.  Notifies the target node that <c>SetBounds</c> will be repeatedly
            called.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.EndResizeBounds">
            <summary>
            Overridden.  Notifies the target node that the resize bounds sequence is
            finished.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.PickAfterChildren(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  Return false since this node should never be picked.
            </summary>
            <param name="pickPath">The pick path used for the pick operation.</param>
            <returns>False since this node should never be picked.</returns>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.BoundsVolatile">
            <summary>
            Overridden.  Returns true since this nodes bounds are volatile (they may
            change at any time and should not be cached).
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Handles.PStickyHandleManager.Bounds">
            <summary>
            Overridden.  Sets the bounds of this node to the bounds of the target and
            returns those bounds.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.NamespaceDoc">
            <summary>
            This is the root namespace for all of the "extras" provided by the Piccolo
            framework.  It contains non-essential, but potentially useful classes.  In
            particular, it contains the <see cref="T:UMD.HCIL.PiccoloX.PForm"/> class, which is meant to be
            subclassed by applications that just need a <see cref="N:UMD.HCIL.Piccolo">
            PCanvas</see> in a Form.  This namespace also includes <see cref="N:UMD.HCIL.PiccoloX.Activities">
            Activities</see>, <see cref="N:UMD.HCIL.PiccoloX.Components">Components</see>, <see cref="N:UMD.HCIL.PiccoloX.Events">
            Events</see>, <see cref="N:UMD.HCIL.PiccoloX.Handles">Handles</see>, <see cref="N:UMD.HCIL.PiccoloX.Nodes">Nodes</see>
            and <see cref="N:UMD.HCIL.PiccoloX.Util">Util</see> namespaces.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.NamespaceDoc">
            <summary>
            This namespace provides "extra" nodes, which may be useful, but are not
            important enough to be included in the core Piccolo package.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.P3DRectangle">
            <summary>
            This is a simple node that draws a "3D" rectangle within it's bounds.
            </summary>
            <remarks>
            Drawing a 3D rectangle in a zooming environment is a little tricky because you
            generally do not want the 3D borders to get scaled.  This version always draws
            the 3D border at a fixed 2 pixel width.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.#ctor">
            <summary>
            Constructs a new P3DRectangle with empty bounds.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Constructs a new P3DRectangle with the given bounds.
            </summary>
            <param name="bounds">The bounds of the new P3DRectangle</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new P3DRectangle with the given x, y, width and height values.
            </summary>
            <param name="x">The x coordinate of the new P3DRectangle.</param>
            <param name="y">The y coordinate of the new P3DRectangle.</param>
            <param name="width">The width of the new P3DRectangle.</param>
            <param name="height">The width of the new P3DRectangle.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">PNode.Paint</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this P3DRectangle and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this P3DRectangle and all of its descendent nodes to the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
            <remarks>
            This node's parent is written out conditionally, that is it will only be written out
            if someone else writes it out unconditionally.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.Raised">
            <summary>
            Gets or sets a value that indicates whether the 3D rectangle is rendered so that
            it appears raised or depressed.
            </summary>
            <value>True if the rectangle is raised; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.P3DRectangle.Brush">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.PNode.Brush">PNode.Brush</see>.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PCacheCamera">
            <summary>
            <b>PCacheCamera</b> is an extension to PCamera that provides a fast
            image based animationToCenterBounds method.
            </summary>
            <remarks>
            Java code contributed by Lance Good and ported by Aaron Clamage.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.CacheViewBounds(System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Caches the information necessary to animate from the current view bounds to the
            specified centerBounds
            </summary>
            <param name="centerBounds">The bounds to center the view on.</param>
            <param name="scaleToFit">
            Indicates whether the camera should scale it's view when necessary to fully fit
            the given bounds within the camera's view bounds.
            </param>
            <returns>The new view matrix to center the specified bounds.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.ClearViewCache">
            <summary>
            Turns off the fast image animation and does any other applicable cleanup 
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.AnimateStaticViewToCenterBoundsFast(System.Drawing.RectangleF,System.Boolean,System.Int64)">
            <summary>
             Mimics the standard <see cref="M:UMD.HCIL.Piccolo.PCamera.AnimateViewToCenterBounds(System.Drawing.RectangleF,System.Boolean,System.Int64)">AnimateViewToCenterBounds</see>
             but uses a cached image for performance rather than re-rendering the scene at each step 
            </summary>
            <param name="centerBounds">The bounds to center the view on.</param>
            <param name="shouldScaleToFit">
            Indicates whether the camera should scale it's view when necessary to fully fit
            the given bounds within the camera's view bounds.
            </param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.AnimateStaticViewToTransformFast(UMD.HCIL.Piccolo.Util.PMatrix,System.Int64)">
            <summary>
            This copies the behavior of the standard
            <see cref="M:UMD.HCIL.Piccolo.PCamera.AnimateViewToMatrix(UMD.HCIL.Piccolo.Util.PMatrix,System.Int64)">AnimateViewToMatrix</see> but clears the cache
            when it is done.
            </summary>
            <param name="destination">The final matrix value.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.FullPaint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Does fast rendering when possible.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.PaintBuffer">
            <summary>
            Get the buffer used to provide fast image based animation.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PCacheCamera.FastTransformActivity">
            <summary>
            A transform activity that does fast rendering when possible.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PClip">
            <summary>
            <b>PClip</b> is a simple node that applies a clip before rendering or picking its
            children.
            </summary>
            <remarks>
            PClip is a subclass of PPath.  The clip applied is the GraphicsPath wrapped by the
            base class.  See <c>UMD.HCIL.PiccoloExample.ClipExample</c>.
            </remarks>>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.#ctor">
            <summary>
            Constructs a new PClip.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.ComputeFullBounds">
            <summary>
            Overridden.  Returns the bounds of the clip in parent coordinates.
            </summary>
            <returns>
            The bounds of the clip in the parent coordinate system of this node.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.RepaintFrom(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Overridden.  If the repaint request comes from a child, then
            repaint the intersection of the clip's bounds and the requested
            repaint bounds.
            </summary>
            <param name="bounds">
            The bounds to repaint, specified in the local coordinate system.
            </param>
            <param name="childOrThis">
            If childOrThis does not equal this then this node's matrix will
            be applied to the bounds paramater.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Renders the fill for this node and then pushes the clip onto the
            paint context, so that when this node's children are rendered they will be
            clipped accordingly.
            </summary>
            <param name="paintContext">
            The paint context to use for painting this node.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.PaintAfterChildren(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Pops the clip from the paint context and then renders the outline
            of this node.
            </summary>
            <param name="paintContext">
            The paint context to use for painting this node.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.FullPick(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  Only picks this node's children if the pick bounds intersects the
            clip.
            </summary>
            <param name="pickPath">The pick path to add the node to if its picked.</param>
            <returns>
            True if this node or one of its descendents was picked; else false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PClip.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PClip and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PComposite">
            <summary>
            <b>PComposite</b> is a simple node that makes a group of nodes appear to
            be a single node when picking and interacting.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PComposite.#ctor">
            <summary>
            Constructs a new PComposite.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PComposite.FullPick(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  Returns true if this node or any pickable descendends are picked.
            </summary>
            <remarks>
            If a pick occurs the pickPath is modified so that this node is always returned as
            the picked node, even if it was a decendent node that initialy reported the pick.
            </remarks>
            <param name="pickPath"></param>
            <returns>True if this node or any descendents are picked; false, otherwise.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PComposite.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PComposite and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PControl">
            <summary>
            <b>PControl</b> is a wrapper around a <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Control">
            System.Windows.Forms.Control</see>.
            </summary>
            <remarks>
            This class provides a mechanism for adding standard controls to the piccolo scene
            graph, with some limitations.  When a PControl's <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> property is set
            to <c>true</c>, the underlying control is added to the specified canvas and treated as
            a normal windows component.  However, when the <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> property is set to
            <c>false</c>, the control is rendered as an image.  Typically, you will want to
            turn off editing while the user is zooming or panning the camera and turn editing
            back on when the user is ready to interact with the control.
            <para>
            The underlying control's "natural size" or the actual bounds of the control is
            equivalent to the bounds of the node at 100% scale.  So, setting the
            bounds of PControl will directly set the bounds of the underlying control.  Typically,
            you will use PControl nodes in conjunction with
            <see cref="T:UMD.HCIL.PiccoloX.Events.PControlEventHandler">PControlEventHandler</see>,
            which only allows a PControl node to be editable when it is displayed at its
            natural size.
            </para>
            <para>
            The <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.CurrentCanvas"/> property indicates which canvas will display the
            editable control when editing is turned on.  All other canvases will display an
            image.  This is necessary since an instance of a control cannot be added to a
            canvas more than once or to more than one canvas.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.#ctor(UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Constructs a new PControl,
            setting the current canvas to the given canvas.
            </summary>
            <param name="currentCanvas">
            The canvas to add the control to when <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> is turned on.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructs a new PControl, wrapping the given
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>.
            </summary>
            <param name="control">The control to wrap.</param>
            <remarks>
            This constructor will set the current canvas to
            <see cref="F:UMD.HCIL.Piccolo.PCanvas.CURRENT_PCANVAS">PCanvas.CURRENT_PCANVAS</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.#ctor(System.Windows.Forms.Control,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Constructs a new PControl, wrapping the given
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> and
            setting the current canvas to the given canvas.
            </summary>
            <param name="control">The control to wrap.</param>
            <param name="currentCanvas">
            The canvas to add the control to when <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> is turned on.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.UpdateImage">
            <summary>
            Updates the image of the control, used to render the node when <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/>
            is turned off.
            </summary>
            <remarks>
            Inheritors can override this method to modify how the image is generated for a
            given control.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.GenerateImage">
            <summary>
            Generates an image that represents the control to be used when 
            the control is unmapped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.AddControlToCanvas">
            <summary>
            Adds the control to the current canvas.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.SetBounds(System.Single,System.Single,System.Single,System.Single)">PNode.SetBounds</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PControl.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">PNode.Paint</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PControl.Image">
            <summary>
            Gets or sets the image used to display the control when not Editing
            </summary>
            <value>The image used to display the control when not Editing</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PControl.Control">
            <summary>
            Gets or sets the control wrapped by this node.
            </summary>
            <value>The control wrapped by this node.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PControl.ControlLocation">
            <summary>
            Gets or sets the current location of the control wrapped by this node.
            </summary>
            <value>The current location of the control wrapped by this node.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PControl.CurrentCanvas">
            <summary>
            Gets or sets the canvas the control will be added to when <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> is
            turned on.
            </summary>
            <value>
            The canvas this control will be added to when <see cref="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing"/> is turned on.
            </value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PControl.Editing">
            <summary>
            Gets or sets a value indicating whether or not the control is editable.
            </summary>
            <value>Indicates whether or not the control is editable.</value>
            <remarks>
            When the property is set to <c>true</c>, the underlying control is added to the
            current canvas and treated as a normal windows component.  However, when the
            property is set to <c>false</c>, the control is rendered as an image.  
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PLens">
            <summary>
            <b>PLens</b> is a simple default lens implementation for Piccolo.
            </summary>
            <remarks>
            Lenses are often application specific.  It may be easiest to study this code, and
            then implement a custom lens using the general principles illustrated here.
            See <c>UMD.HCIL.PiccoloExample.LensExample</c> for one possible use of this lens. 
            <para>
            The basic design here is to add a PCamera as the child of a PNode (the lens node).
            The camera is the viewing part of the lens, and the node is the title bar that can
            be used to move the lens around.  Users of this lens will probably want to set up
            a lens specific event handler and attach it to the camera.
            </para>
            <para>
            A lens also needs a layer that it will look at (it should not be the same as the
            layer that it’s added to because then it will draw itself in a recursive loop).
            Last of all, PLens will need to be added to the PCanvas layer (so that it can be
            seen  by the main camera).
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Nodes.PLens.LENS_DRAGBAR_HEIGHT">
            <summary>
            The height of the lens's dragbar.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Nodes.PLens.DEFAULT_DRAGBAR_BRUSH">
            <summary>
            The default brush used to render the lens's dragbar.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Nodes.PLens.DEFAULT_LENS_BRUSH">
            <summary>
            The default brush used to render the lens's camera.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.#ctor">
            <summary>
            Constructs a new PLens.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.#ctor(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Constructs a new PLens whose camera views the specified layer.
            </summary>
            <param name="layer">The layer this lens will view.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.AddLayer(System.Int32,UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Add the layer at the given index in the list of layers managed by the camera child
            of this lens.
            </summary>
            <param name="index">The index at which to add the layer.</param>
            <param name="layer">The layer to add to the camera child of this lens.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.RemoveLayer(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Remove the given layer from the list of layers managed by the camera child of
            this lens.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.PLens_TransformChanged(System.Object,UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            When this PLens is dragged around, adjust the camera's view transform so that the
            squiggles remain fixed at their original locations.
            </summary>
            <param name="sender">The source of this TransformChanged event.</param>
            <param name="e">A PPropertyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.LayoutChildren">
            <summary>
            Overridden.  When the lens is resized this method gives us a chance to layout the
            lens's camera child appropriately.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PLens and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PLens.Camera">
            <summary>
            Gets the camera child of this lens.
            </summary>
            <value>The camera child of this lens.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PLens.DragBar">
            <summary>
            Gets the dragbar for this lens.
            </summary>
            <value>The dragbar for this lens.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PLens.LensDraggerHandler">
            <summary>
            Gets the drag event handler responsible for dragging this lens.
            </summary>
            <value>The drag event handler responsible for dragging this lens.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PLens.LensDragHandler">
            <summary>
            <b>LensDragHandler</b> is the event handler responsible for dragging the lens.
            </summary>
            <remarks>
            This event handler consumes events in case another conflicting event handler has
            been installed higher up in the heirarchy.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PLens.LensDragHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.DoesAcceptEvent</see>
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Nodes.PNodeCache">
            <summary>
            PNodeCache caches a visual representation of it's children 
            into an image and uses this cached image for painting instead of
            painting it's children directly.
            </summary>
            <remarks>
            This class is intended to be used in two ways.
            <P>
            First it can be used as a simple optimization technique. If a node 
            has many descendents it may be faster to paint the cached image 
            representation instead of painting each node.
            </P>
            <P>
            Second PNodeCache provides a place where "image" effects such as
            blurring and drop shadows can be added to the Piccolo scene graph.
            This can be done by overriding the method createImageCache and
            returing an image with the desired effect applied.
            </P>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.#ctor">
            <summary>
            Constructs a new PNodeCache.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.CreateImageCache(System.Drawing.SizeF@)">
            <summary>
            Override this method to customize the image cache creation process. For
            example if you want to create a shadow effect you would do that here. Fill
            in the cacheOffsetRef if needed to make your image cache line up with the
            nodes children.
            </summary>
            <param name="cacheOffsetRef">
            Set this value to apply an offset to the image cache.
            </param>
            <returns>The newly created image cache.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.InvalidateCache">
            <summary>
            Discards the current image cache.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.InvalidatePaint">
            <summary>
            Overridden.  Invalidate this node's paint if the image cache is not currently
            being created.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.RepaintFrom(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Overridden.  Pass the given repaint request up the tree if the image cache is
            not currently being created.
            </summary>
            <param name="bounds">
            The bounds to repaint, specified in the local coordinate system.
            </param>
            <param name="childOrThis">
            If childOrThis does not equal this then this node's matrix will be applied to
            the bounds paramater.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.FullPaint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Paints the cached image representation of this node's children if
            it is not currently being created.
            </summary>
            <param name="paintContext"></param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.PickAfterChildren(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  Return false since this node should never be picked.
            </summary>
            <param name="pickPath">The pick path used for the pick operation.</param>
            <returns>False since this node should never be picked.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Nodes.PNodeCache.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this PNodeCache and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Nodes.PNodeCache.ImageCache">
            <summary>
            Gets a cached image representation of this node's children.
            </summary>
            <remarks>A cached image representation of this node's children.</remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.ProcessDelegate">
            <summary>
            A delegate used to invoke the <see cref="M:UMD.HCIL.PiccoloX.PForm.Initialize">Initialize</see> method
            on the main event dispatch thread.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.PForm">
            <summary>
            <b>PForm</b> is meant to be subclassed by applications that just need a
            <see cref="T:UMD.HCIL.Piccolo.PCanvas"/> in a <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
            <remarks>
            PForm also provides full screen mode functionality.
            <para>
            <b>Notes to Inheritors:</b>  Subclasses should override the Initialize
            method and start adding their own code there.  Look in the
            UMD.HCIL.PiccoloExamples package to see some uses of PForm.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.PForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.#ctor">
            <summary>
            Constructs a new PForm.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.#ctor(System.Boolean,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Constructs a new PForm, with the given canvas, in full screen mode if
            specified.
            </summary>
            <param name="fullScreenMode">
            Determines whether this PForm starts in full screen mode.
            </param>
            <param name="aCanvas">The canvas to add to this PForm.</param>
            <remarks>
            A <c>null</c> value can be passed in for <c>aCanvas</c>, in which a case
            a new canvas will be created.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.InitializePiccolo(System.Boolean,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Sets up the form, sizing and anchoring the canvas.
            </summary>
            <param name="fullScreenMode">
            Indicates whether or not to start up in full screen mode.
            </param>
            <param name="aCanvas">
            The canvas to add to this PForm; can be null.
            </param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.AddEscapeFullScreenModeHandler">
            <summary>
            This method adds a key event handler that will take this PForm out of full
            screen mode when the escape key is pressed.
            </summary>
            <remarks>
            This is called for you automatically when the form enters full screen mode.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.RemoveEscapeFullScreenModeHandler">
            <summary>
            This method removes the escape full screen mode key event handler.
            </summary>
            <remarks>
            This is called for you automatically when full screen mode exits, but the
            method has been made public for applications that wish to use other methods
            for exiting full screen mode.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.canvas_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Exits full screen mode when the escape key is pressed.
            </summary>
            <param name="sender">The source of the KeyEvent.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.BeforeInitialize">
            <summary>
            This method will be called before the <see cref="M:UMD.HCIL.PiccoloX.PForm.Initialize"/> method and will
            be called on the thread that is constructing this object.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.Initialize">
            <summary>
            Subclasses should override this method and add their Piccolo initialization code
            there.
            </summary>
            <remarks>
            This method will be called on the main event dispatch thread.  Note that the
            constructors of PForm subclasses may not be complete when this method is called.
            If you need to initailize some things in your class before this method is called
            place that code in <see cref="M:UMD.HCIL.PiccoloX.PForm.BeforeInitialize"/>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.OnCreateControl">
            <summary>
            Overridden.  Invokes the initialize method on the event dispatch thread.
            </summary>
            <remarks>
            The handle of the canvas should exist at this point, so it is safe to call invoke.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.PForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.Canvas">
            <summary>
            Gets this form's canvas.
            </summary>
            <value>This form's canvas.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.ScrollControl">
            <summary>
            Gets the scrollable control that contains the canvas.
            </summary>
            <value>The scrollable control that contains the canvas.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.AutoScrollCanvas">
            <summary>
            Gets or sets a value that indicates whether or not this form's canvas is
            scrollable.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.AutoScrollCanvasPosition">
            <summary>
            Gets or sets the view position of the canvas, if it is scrollable.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.DefaultFormBounds">
            <summary>
            Gets the default bounds to use for this form.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.NonFullScreenBounds">
            <summary>
            Gets or sets the bounds this form should revert to when full screen mode is exited
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.PForm.FullScreenMode">
            <summary>
            Gets or sets a value that indicates whether or not this form should be viewed
            in full screen mode.
            </summary>
            <value>
            A value that indicates whether or not this form should be viewed in full screen
            mode.
            </value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.NamespaceDoc">
            <summary>
            This namespace defines several "extra" utility classes, which may be useful,
            but are not important enough to be included in the core Piccolo package.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.Direction">
            <summary>
            This enumeration represents both compass directions (e.g. North and South) as well as
            directions in the zooming space (e.g. In and Out).
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.East">
            <summary>
            The East compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.NorthEast">
            <summary>
            The North East compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.NorthWest">
            <summary>
            The North West compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.North">
            <summary>
            The North compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.South">
            <summary>
            The South compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.West">
            <summary>
            The West compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.SouthWest">
            <summary>
            The South West compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.SouthEast">
            <summary>
            The South East compass direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.In">
            <summary>
            Inward zoom direction.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.Direction.Out">
            <summary>
            Outward zoom direction.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.PBoundsLocator">
            <summary>
            <b>PBoundsLocator</b> is a locator that locates points on the bounds of a node.
            </summary>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.PNodeLocator">
            <summary>
            <b>PNodeLocator</b> provides an abstraction for locating points on a node.
            </summary>
            <remarks>
            Points are located in the local corrdinate system of the node.  The default
            behavior is to locate the center point of the node's bounds.  The node where
            the point is located is stored internal to this locator (as an instance
            variable).  If you want to use the same locator to locate center points on
            many different nodes, you will need to set the <see cref="P:UMD.HCIL.PiccoloX.Util.PNodeLocator.Node">
            Node</see> property before asking for each location.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.PLocator">
            <summary>
            <b>PLocator</b> provides an abstraction for locating points.
            </summary>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses such as <see cref="T:UMD.HCIL.PiccoloX.Util.PNodeLocator"/> and
            <see cref="T:UMD.HCIL.PiccoloX.Util.PBoundsLocator"/> specialize this behavior by locating points on nodes,
            or on the bounds of nodes.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PLocator.#ctor">
            <summary>
            Constructs a new PLocator.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PLocator.LocatePoint">
            <summary>
            Gets the located point.
            </summary>
            <value>The located point.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PLocator.LocateX">
            <summary>
            Gets the x coordinate of the located point.
            </summary>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PLocator.LocateY">
            <summary>
            Gets the y coordinate of the located point.
            </summary>
        </member>
        <member name="F:UMD.HCIL.PiccoloX.Util.PNodeLocator.node">
            <summary>
            The node on which points are located.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PNodeLocator.#ctor(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Constructs a new PNodeLocator that locates points on the given node.
            </summary>
            <param name="node">The node on which the points are located.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PNodeLocator.Node">
            <summary>
            Gets or sets the node on which points are located.
            </summary>
            <value>The node on which points are located.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PNodeLocator.LocateX">
            <summary>
            Overridden.  Gets the x coordinate of the point located on the node.
            </summary>
            <value>The x coordinate of the located point.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PNodeLocator.LocateY">
            <summary>
            Overridden.  Gets the y coordinate of the point located on the node.
            </summary>
            <value>The y coordinate of the located point.</value>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateEastLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the East (right) side of the
            node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the East side of the node's bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateNorthEastLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the North East (upper right)
            corner of the node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the North East corner of the node's
            bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateNorthWestLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the North West (upper left)
            corner of the node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the North West corner of the node's
            bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateNorthLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the North (top) side of the
            node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the North side of the node's bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateSouthLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the South (bottom) side of the
            node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the South side of the node's bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateWestLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the West (left) side of the
            node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the West side of the node's bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateSouthWestLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the South West (lower left)
            corner of the node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the South West corner of the node's
            bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.CreateSouthEastLocator(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Creates a locator that will locate points in the South East (lower right)
            corner of the node's bounds.
            </summary>
            <param name="node">The node on which to locate the point.</param>
            <returns>
            A locator that will locate points on the South East corner of the node's
            bounds.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PBoundsLocator.#ctor(UMD.HCIL.Piccolo.PNode,UMD.HCIL.PiccoloX.Util.Direction)">
            <summary>
            Creates a new PBoundsLocator that will locate points in the given direction
            specified node's bounds.
            </summary>
            <param name="node">The node on which to locate points.</param>
            <param name="aSide">The direction in which to locate points.</param>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PBoundsLocator.Side">
            <summary>
            Gets the direction in which this locator will locate points on the node's
            bounds.
            </summary>
            <value>The direction in which this locator will locate points.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PBoundsLocator.LocateX">
            <summary>
            Overridden.  Gets the x coordinate of the point located on the node's bounds
            in the specified direction.
            </summary>
            <value>The x coordinate of the located point.</value>
        </member>
        <member name="P:UMD.HCIL.PiccoloX.Util.PBoundsLocator.LocateY">
            <summary>
            Overridden.  Gets the y coordinate of the point located on the node's bounds
            in the specified direction.
            </summary>
            <value>The y coordinate of the located point.</value>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.POcclusionDetection">
            <summary>
            <b>POcclusionDetection</b> is an experimental class for detecting occlusions.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.POcclusionDetection.DetectOccusions(UMD.HCIL.Piccolo.PNode,System.Drawing.RectangleF)">
            <summary>
            Traverse from the bottom right of the scene graph (top visible node)
            up the tree determining which parent nodes are occluded by their children
            nodes.
            </summary>
            <param name="n">The node to find occlusions for.</param>
            <param name="bounds">The bounds of <c>n</c> in parent coordinates.</param>
            <remarks>
            Note that this is only detecting a subset of occlusions (parent, child),
            others such as overlapping siblings or cousins are not detected.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.POcclusionDetection.DetectOcclusions(UMD.HCIL.Piccolo.PNode,UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Traverse from the bottom right of the scene graph (top visible node)
            up the tree determining which parent nodes are occluded by their children
            nodes.
            </summary>
            <param name="n">The node to find occlusions for.</param>
            <param name="pickPath">
            A pick path representing the bounds of <c>n</c> in parent coordinates.
            </param>
            <remarks>
            Note that this is only detecting a subset of occlusions (parent, child),
            others such as overlapping siblings or cousins are not detected.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.PiccoloX.Util.PXUtil">
            <summary>
            <b>PXUtil</b> provides utility methods for the PiccoloX module.
            </summary>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PXUtil.GrabControl(System.Windows.Forms.Control)">
            <summary>
            Gets an image snapshot of the specified control, which must be mapped to a
            <see cref="T:System.Windows.Forms.Form"/> and must be fully visible.
            </summary>
            <param name="control">The control to get an image snapshot of.</param>
            <returns>An image snapshot of the control.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PXUtil.OffscreenGrab(System.Windows.Forms.Control)">
            <summary>
            Gets an image snapshot of the specified control, which does not have to be
            mapped to a <see cref="T:System.Windows.Forms.Form"/> and does not have to be
            fully visible.
            </summary>
            <param name="control">The control to get an image snapshot of.</param>
            <returns>An image snapshot of the control.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PXUtil.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Imports the GDI BitBlt function that enables the background of the window 
            to be captured.
            </summary>
            <param name="hdcDest">Handle to the destination device context.</param>
            <param name="nXDest">
            Specifies the x-coordinate, in logical units, of the upper-left corner of
            the destination rectangle. 
            </param>
            <param name="nYDest">
            Specifies the y-coordinate, in logical units, of the upper-left corner of
            the destination rectangle.
            </param>
            <param name="nWidth">
            Specifies the width, in logical units, of the source and destination
            rectangles. 
            </param>
            <param name="nHeight">
            Specifies the height, in logical units, of the source and the destination
            rectangles.
            </param>
            <param name="hdcSrc">Handle to the source device context.</param>
            <param name="nXSrc">
            the x-coordinate, in logical units, of the upper-left corner of the source
            rectangle.
            </param>
            <param name="nYSrc">
            Specifies the y-coordinate, in logical units, of the upper-left corner of
            the source rectangle.
            </param>
            <param name="dwRop">
            Specifies a raster-operation code. These codes define how the color data
            for the source rectangle is to be combined with the color data for the
            destination rectangle to achieve the final color. </param>
            <returns>Nonzero if the function succeeds; otherwise, zero.</returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PXUtil.GetDC(System.IntPtr)">
            <summary>
            Imports the GDI GetDC function that retrieves a handle to a display device
            context (DC) for the client area of a specified window or for the entire screen. 
            </summary>
            <param name="hWnd">
            Handle to the window whose DC is to be retrieved. If this value is NULL, GetDC
            retrieves the DC for the entire screen.
            </param>
            <returns>
            A handle to the DC for the specified window's client area if the function succeeds;
            otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:UMD.HCIL.PiccoloX.Util.PXUtil.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Imports the GDI ReleaseDC function that releases a device context (DC), freeing it
            for use by other applications.
            </summary>
            <param name="hWnd">Handle to the window whose DC is to be released.</param>
            <param name="hDC">Handle to the DC to be released.</param>
            <returns><c>1</c> if the DC was released; otherwise, zero.</returns>
        </member>
    </members>
</doc>
