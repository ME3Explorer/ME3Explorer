<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UMD.HCIL.Piccolo</name>
    </assembly>
    <members>
        <member name="T:UMD.HCIL.Piccolo.Activities.NamespaceDoc">
            <summary>
            This namespace supports Piccolo activities. Activities are used to control
            some time dependent aspect of Piccolo such as animation
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.TerminationBehavior">
            <summary>
            This enumeration is used by the PActivity class.  It defines the behavior an activity
            has when its <see cref="M:UMD.HCIL.Piccolo.Activities.PActivity.Terminate(UMD.HCIL.Piccolo.Activities.TerminationBehavior)">Terminate</see>
            method is called.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.TerminationBehavior.TerminateWithoutFinishing">
            <summary>
            The method OnActivityFinished will never get called and so the activity
            will be terminated midway.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.TerminationBehavior.TerminateAndFinish">
            <summary>
            The method OnActivityFinished will always get called.  And so the activity
            will always end in it's completed state.  If the activity has not yet started
            the method OnActivityStarted will also be called.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.TerminationBehavior.TerminateAndFinishIfStepping">
            <summary>
            The method OnActivityFinished will only be called if the activity has previously
            started.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.ActivityStartedDelegate">
            <summary>
            Used to notify classes when the activity has started.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.ActivitySteppedDelegate">
            <summary>
            Used to notify classes when the activity is running.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.ActivityFinishedDelegate">
            <summary>
            Used to notify classes when the activity has finished.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PActivity">
            <summary>
            <b>PActivity</b> controls some time dependent aspect of Piccolo, such
            as animation.
            </summary>
            <remarks>
            Once created activities must be scheduled with the PActivityScheduler
            managed by the PRoot to run. They are automatically removed from the
            scheduler when the animation has finished.
            </remarks>
            <example>
            There are several ways to be notfied of changes in an activity's state.  You can
            extend PActivity and override the <c>OnActivityStarted()</c>, <c>OnActivityStep()</c>, and
            <c>OnActivityFinished()</c> methods.  You can instantiate a PActivity and set its
            ActivityDelegate to a class that implements the PActivityDelegate interface methods
            (<c>ActivityStarted()</c>, <c>ActivityStepped()</c>, and <c>ActivityFinished()</c>).  Or,
            if you only wish to be notified of some of these changes you can directly set any of
            the individual delegates (<c>ActivityStarted</c>, <c>ActivityStepped</c> and
            <c>ActivityFinished</c>).  Each of these approaches are illustrated below:
            <para>
            <b>Extend PActivity</b>
            <code>
            public class MyActivity : PActivity {
            
            	...
            	
            	protected override void OnActivityStarted() {
            		base.OnActivityStarted ();
            		// Do something when the activity starts.
            	}
            				
            	protected override void OnActivityStep(long elapsedTime) {
            		base.OnActivityStep (elapsedTime);
            		// Do something while the activity is running.
            	}
            				
            	protected override void OnActivityFinished() {
            		base.OnActivityFinished ();
            		// Do something when the activity finishes.
            	}
            	
            	...
            	
            }
            </code>
            </para>
            
            <para>
            <b>Set the ActivityDelegate</b>
            <code>
            ...
            	
            PActivty activity = new PActivity();
            activity.ActivityDelegate = new MyActivityDelegate();
            	
            ...
            	
            public class MyActivityDelegate : PActivity.PActivityDelegate {
            	public void ActivityStarted(PActivity activity) {
            		// Do something when the activity starts.
            	}
            		
            	public void ActivityStepped(PActivity activity) {
            		// Do something while the activity is running.
            	}
            		
            	public void ActivityFinished(PActivity activity) {
            		// Do something when the activity finishes.
            	}
            }	
            </code>
            </para>
            
            <para>
            <b>Set an Individual Delegate</b>
            <code>
            ...
            
            PActivity activity = new PActivity();
            activity.ActivityStepped = new ActivitySteppedDelegate(MySteppedDelegate);
            
            ...
            
            protected void MySteppedDelegate(PActivity activity) {
            	// Do something while the activity is running.
            }
            </code>
            </para>
            
            <para>
            See the <c>PNode.Animate*()</c> methods for more examples of how to setup and run
            different activities.
            </para>
            </example>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.PActivity.ActivityStarted">
            <summary>
            Used to notify classes when the activity has started.
            </summary>
            <remarks>
            When the PActivityDelegate is set, the <c>ActivityStarted()</c> method is connected to the
            this delegate.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.PActivity.ActivityStepped">
            <summary>
            Used to notify classes when the activity is running.
            </summary>
            <remarks>
            When the PActivityDelegate is set, the <c>ActivityStepped()</c> method is connected to the
            this delegate.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.PActivity.ActivityFinished">
            <summary>
            Used to notify classes when the activity has finished.
            </summary>
            <remarks>
            When the PActivityDelegate is set, the <c>ActivityFinished()</c> method is connected to this
            delegate.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.#ctor(System.Int64)">
            <summary>
            Constructs a new PActivity.
            </summary>
            <param name="aDuration">
            The amount of time this activity should take to complete, -1 for infinite.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new PActivity.
            </summary>
            <param name="aDuration">
            The amount of time this activity should take to complete, -1 for infinite.
            </param>
            <param name="aStepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new PActivity.
            </summary>
            <param name="aDuration">
            The amount of time this activity should take to complete, -1 for infinite.
            </param>
            <param name="aStepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="aStartTime">
            The time (relative to <c>PUtil.CurrentTimeMillis</c>) that this activity should start.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityStarted">
            <summary>
            This method is called right before an activity is scheduled to start running.
            </summary>
            <remarks>
            After this method is called <c>OnActivityStep()</c> will be called until the
            activity finishes.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityStep(System.Int64)">
            <summary>
            This method is called repeatedly when the activity is running.
            </summary>
            <param name="elapsedTime">
            The amount of time that has passed relative to the activities startTime.
            </param>
            <remarks>
            This is the method that most activities override to perform their behavior.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityFinished">
            <summary>
            This method is called after an activity has finished running and the activity
            has been removed from the PActivityScheduler queue.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.StartAfter(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Schedules this activity to start after the first activity has finished.
            </summary>
            <param name="first">The activity to start after.</param>
            <remarks>
            Note that no link is created between these activities, if the startTime or duration
            of the first activity is later changed this activities start time will not be updated
            to reflect that change.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.Terminate">
            <summary>
            Stop this activity immediately, and remove it from the activity scheduler.
            </summary>
            <remarks>
            The default termination behavior is to call <c>OnActivityFinished()</c> if
            the activity is currently stepping. Use Terminate(TerminationBehavior) for
            a different termination behavior.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.Terminate(UMD.HCIL.Piccolo.Activities.TerminationBehavior)">
            <summary>
            Stop this activity immediately, and remove it from the activity scheduler.
            </summary>
            <remarks>
            The <see cref="T:UMD.HCIL.Piccolo.Activities.TerminationBehavior">TerminationBehavior</see> determines when
            and if OnActivityStarted and OnActivityFinished get called.
            </remarks>
            <param name="terminationBehavior"></param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.ProcessStep(System.Int64)">
            <summary>
            The activity scheduler calls this method and it is here that the activity decides
            if it should do a step or not for the given time.
            </summary>
            <param name="currentTime">
            The time for which this activity must decide whether or not to step.
            </param>
            <returns>The step rate of this activity, -1 if past the stopTime.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.ToString">
            <summary>
            Returns a string representation of this object for debugging purposes.
            </summary>
            <returns>A string representation of this node's state.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.StartTime">
            <summary>
            Gets or sets the time that this activity should start running in PRoot global time.
            </summary>
            <value>The time that this activity should start.</value>
            <remarks>
            When this time is reached (or soon after) this activity will have its
            <c>OnActivityStarted()</c> method called.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.StepInterval">
            <summary>
            Gets or sets the minimum number of milliseconds that this activity should delay
            between steps.
            </summary>
            <value>
            The minimum number of milliseconds that this activity should delay between steps.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.NextStepTime">
            <summary>
            Gets the next time this activity should step, in PRoot global time.
            </summary>
            <value>The next step time for this activity.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.Duration">
            <summary>
            Gets or sets the amount of time that this activity should take to complete, after
            the <c>OnActivityStarted</c> method is called.
            </summary>
            <value>The amount of time this activity should take to complete.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.ActivityScheduler">
            <summary>
            Gets or sets the activity scheduler associated with this activity.
            </summary>
            <value>The activity scheduler associated with this activity.</value>
            <remarks>
            An activity scheduler manages a list of activities to be run.  Typically,
            activities are scheduled with the activity scheduler stored in the root node of
            the scene graph tree.
            <seealso cref="T:UMD.HCIL.Piccolo.Activities.PActivityScheduler"/>
            <seealso cref="T:UMD.HCIL.Piccolo.PRoot"/>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.IsStepping">
            <summary>
            Gets a value indicating whether this activity is stepping.
            </summary>
            <value>True if this activity is stepping; else false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.IsAnimation">
             <summary>
             Gets a value indicating whether this activity is performing an animation.
             </summary>
             <value>True if this activity is performing an animation; otherwise, false.</value>
             <remarks>
             This is used by the PCanvas to determine if it should set the render quality to
             PCanvas.animatingRenderQuality or not for each frame it renders. 
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.ActivityDelegate">
            <summary>
            Sets the PActivityDelegate for this activity.
            </summary>
            <value>The PActivityDelegate associated with this activity.</value>
            <remarks>
            The delegate is notified when the activity starts and stops stepping.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.StopTime">
            <summary>
            Gets the time when this activity should finish running.
            </summary>
            <value>The time when this activity should finish running.</value>
            <remarks>
            At this time (or soon after) the <c>OnActivityFinished()</c> method will be called
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivity.ParamString">
            <summary>
            Gets a string representing the state of this object.
            </summary>
            <value>A string representation of this object's state.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content and
            format of the returned string may vary between implementations. The returned string
            may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PActivity.PActivityDelegate">
            <summary>
            <b>PActivityDelegate</b> is used by classes to learn about and act on the
            different states that a PActivity goes through, such as when the activity
            starts and stops stepping.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.PActivityDelegate.ActivityStarted(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            This method is used to notify a user right before an activity is scheduled
            to start running.
            </summary>
            <remarks>
            This method will be connected to the ActivityStarted delegate, which is called
            from the <c>OnActivityStarted()</c> method.
            </remarks>
            <param name="activity">The activity that is about to start.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.PActivityDelegate.ActivityStepped(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            This method is used to notify a user when the activity is running.
            </summary>
            <remarks>
            This method will be connected to the ActivityStepped delegate, which is called
            from the <c>OnActivityStep()</c> method.
            </remarks>
            <param name="activity">The activity that is running.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivity.PActivityDelegate.ActivityFinished(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            This method is used to notify a user after an activity has finished running and
            the activity has been removed from the PActivityScheduler queue.
            </summary>
            <remarks>
            This method will be connected to the ActivityFinished delegate, which is called
            from the <c>OnActivityStarted()</c> method.
            </remarks>
            <param name="activity">The activity that has just finished.</param>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PActivityScheduler">
            <summary>
            <b>PActivityScheduler</b> is responsible for managing a list of
            activities to be processed.
            </summary>
            <remarks>
            PActivityScheduler is given a chance to process these activities from 
            the PRoot's ProcessInputs() method. Most users will not need to use
            the PActivityScheduler directly, instead you should look at:
            <ul>
            <li><c>PNode.AddActivity</c> - to schedule a new activity</li>
            <li><c>PActivity.Terminate</c> - to terminate a running activity</li>
            <li><c>PRoot.ProcessInputs</c> - already calls processActivities for you.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.#ctor(UMD.HCIL.Piccolo.PRoot)">
            <summary>
            Constructs a new PActivityScheduler.
            </summary>
            <param name="rootNode">The root node to associate with this activity scheduler.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.AddActivity(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Add this activity to the scheduler.
            </summary>
            <param name="activity">The activity to be added.</param>
            <remarks>
            Adding an activity schedules that activity to run at some point in the
            future.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.AddActivity(UMD.HCIL.Piccolo.Activities.PActivity,System.Boolean)">
            <summary>
            Add this activity to the scheduler.
            </summary>
            <param name="activity">The activity to be added.</param>
            <param name="processLast">
            Specifies whether the activity should be run last.
            </param>
            <remarks>
            Adding an activity schedules that activity to run at some point in the
            future.
            <para>
            Sometimes it's useful to make sure that an activity is run after all other
            activities have been run. To do this set processLast to true when adding the
            activity.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.RemoveActivity(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Remove this activity from the scheduler.
            </summary>
            <param name="activity">The activity to be removed.</param>
            <remarks>
            Once an activity has been removed from the scheduler, it will no longer be
            run.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.RemoveAllActivities">
            <summary>
            Removes all activities currently scheduled to run.
            </summary>
            <remarks>This method clears the scheduler.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.StartActivityTimer">
            <summary>
            Starts the timer that controls the stepping of activities.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.StopActivityTimer">
            <summary>
            Stops the timer that controls the stepping of activities.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.StepActivities(System.Object,System.EventArgs)">
            <summary>
            Steps all running activities by calling the root's <c>ProcessInputs</c>,
            which in turn will call <c>ProcessActivities</c>.
            </summary>
            <param name="sender">The source of this Tick Event.</param>
            <param name="eArgs">The arguments for this Tick Event.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PActivityScheduler.ProcessActivities(System.Int64)">
            <summary>
            Process all scheduled activities for the given time. Each activity is
            given one "step", equivalent to one frame of animation.
            </summary>
            <param name="currentTime">The time for which to process each activity.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivityScheduler.Root">
            <summary>
            Gets the root node associated with this activity scheduler.
            </summary>
            <value>The root node assocated with this activity scheduler.</value>
            <remarks>
            The root's <c>ProcessInputs</c> method calls <c>ProcessActivities</c> on
            this activity scheduler at the appropriate time in the UI loop.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivityScheduler.ActivitiesReference">
            <summary>
            Gets a reference to the list of scheduled activities.
            </summary>
            <value>A reference to the activities list.</value>
            <remarks>
            This list should not be modified.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivityScheduler.Animating">
            <summary>
            Gets a value indicating whether any of the scheduled activities are
            performing animations.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PActivityScheduler.ActivityTimer">
            <summary>
            Gets the timer that controls the stepping of activities.
            </summary>
            <value>The timer that controls activity processing.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PColorActivity">
            <summary>
            <b>PColorActivity</b> interpolates between two colors for its target over the
            duration of the animation. 
            </summary>
            <remarks>
            The source color is retrieved from the target just before the activity is
            scheduled to start.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity">
            <summary>
            <b>PInterpolatingActivity</b> interpolates between two states (source and
            destination) over the duration of the activity.
            </summary>
            <remarks>
            The interpolation can be either linear or slow- in, slow-out.
            <para>
            The mode determines how the activity interpolates between the two states. The
            default mode interpolates from source to destination, but you can also go
            from destination to source, and from source to destination to source.
            </para>
            <para>
            A loopCount of greater then one will make the activity reschedule itself when
            it has finished. This makes the activity loop between the two states.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new PInterpolatingActivity that will interpolate from the source
            state to the destination state.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.#ctor(System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode)">
            <summary>
            Constructs a new PInterpolatingActivity that will interpolate from the source
            state to the destination state, looping the given number of iterations.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            The mode defines how the activity interpolates between states.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.#ctor(System.Int64,System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode)">
            <summary>
            Constructs a new PInterpolatingActivity that will interpolate between two states
            in the order specified by the mode, starting at the given start time and looping
            the given number of iterations.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="startTime">
            The time (relative to <c>PUtil.CurrentTimeMillis()</c>) that
            this activity should start.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            The mode defines how the activity interpolates between states.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityStarted">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityStarted">PActivity.OnActivityStarted</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityStep(System.Int64)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityStep(System.Int64)">PActivity.OnActivityStep</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityFinished">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PActivity.OnActivityFinished">PActivity.OnActivityFinished</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.Terminate">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PActivity.Terminate">PActivity.Terminate</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SetRelativeTargetValue(System.Single)">
            <summary>
            Subclasses should override this method and set the value on their
            target (the object that they are modifying) accordingly.
            </summary>
            <param name="zeroToOne">The current interpolation value.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.ComputeSlowInSlowOut(System.Single)">
            <summary>
            Compute the adjusted t value for simulating acceleration and friction.
            </summary>
            <param name="zeroToOne">The t value, between 0 and 1.</param>
            <returns>The adjusted t value.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.Duration">
            <summary>
            Overriden.  Set the amount of time that this activity should take to complete,
            after the startStepping method is called.
            </summary>
            <remarks>
            The duration must be greater than zero so that the interpolation value can be
            computed.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.Mode">
            <summary>
            Gets or sets the mode that defines how the activity interpolates between states.
            </summary>
            <value>The mode that defines how the activity interpolates between states.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.LoopCount">
            <summary>
            Gets or sets the number of times the activity should automatically reschedule
            itself after it has finished.
            </summary>
            <value>The number of times the activity should loop.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.FirstLoop">
            <summary>
            Gets or sets a value indicating whether the activity is executing its first loop.
            </summary>
            <value>A value indicating whether the activity is executing its first loop.</value>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses normally initialize their source state on the first loop.
            <para>
            This property will rarely need to be set, unless your are reusing activities.
            </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SlowInSlowOut">
            <summary>
            Gets or sets a value indicating whether the activity will be a pure interpolation, or
            simulate acceleration and friction.
            </summary>
            <value>
            A value indicating whether the activity should simulate acceleration and friction.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.RelativeTargetValue">
            <summary>
            Calls <c>SetRelativeTargetValue</c> with the appropriate t value for the current mode.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this object.
            </summary>
            <value>A string representation of this object's state.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content and
            format of the returned string may vary between implementations. The returned string
            may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PColorActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.Piccolo.Activities.PColorActivity.Target)">
            <summary>
            Constructs a new PColorActivity that will animate from the source color
            to no color, unless the destination color is later set.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between
            steps.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source state
            will be taken from.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PColorActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.Piccolo.Activities.PColorActivity.Target,System.Drawing.Color)">
            <summary>
            Constructs a new PColorActivity that will animate from the source color
            to the destination color.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between
            steps.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source state
            will be taken from.
            </param>
            <param name="aDestination">The destination color state.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PColorActivity.#ctor(System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode,UMD.HCIL.Piccolo.Activities.PColorActivity.Target,System.Drawing.Color)">
            <summary>
            Constructs a new PColorActivity that animate between the source and destination
            colors in the order specified by the mode, looping the given number of iterations.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            Defines how the activity interpolates between states.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source state
            will be taken from.
            </param>
            <param name="aDestination">The destination color state.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PColorActivity.OnActivityStarted">
            <summary>
            Overridden.
            See <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityStarted">
            PInterpolatingActivity.OnActivityStarted</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PColorActivity.SetRelativeTargetValue(System.Single)">
            <summary>
            Overridden.
            See <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SetRelativeTargetValue(System.Single)">
            PInterpolatingActivity.SetRelativeTargetValue</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PColorActivity.IsAnimation">
             <summary>
             Overridden.  Gets a value indicating whether this activity is performing an animation.
             </summary>
             <value>True if this activity is performing an animation; false otherwise.</value>
             <remarks>
             This property will always return true since a PColorActivity is an animating
             activity.
             <para>
             This is used by the PCanvas to determine if it should set the render quality to
             PCanvas.animatingRenderQuality or not for each frame it renders. 
             </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PColorActivity.DestinationColor">
            <summary>
            Return the final color that will be set on the color activities target
            when the activity stops stepping.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PColorActivity.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this object.
            </summary>
            <value>A string representation of this object's state.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content and
            format of the returned string may vary between implementations. The returned string
            may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PColorActivity.Target">
            <summary>
            <b>Target</b> objects that want their color to be set by the color activity
            must implement this interface.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PColorActivity.Target.Color">
            <summary>
            Gets or sets the color of the target.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.ActivityMode">
            <summary>
            This enumeration is used by the PInterpolatingActivity class.  It represents the
            types of interpolation that the activity can perform.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.ActivityMode.SourceToDestination">
            <summary>
            The activity should interpolate from the source to the destination.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.ActivityMode.DestinationToSource">
            <summary>
            The activity should interpolate from the destination to the source.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Activities.ActivityMode.SourceToDestinationToSource">
            <summary>
            The activity should interpolate from the source to the destination and back
            to the source again.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PTransformActivity">
            <summary> 
            <b>PTransformActivity</b> interpolates between two transforms setting its
            target's transform as it goes.
            </summary>
            <remarks>
            See PNode. animate*() for an example of this activity in used. The source
            transform is retrieved from the target just before the animation is scheduled
            to start.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.Piccolo.Activities.PTransformActivity.Target)">
            <summary>
            Constructs a new PTransformActivity that will animate from the source matrix
            to the destination matrix.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between
            steps.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source
            state will be taken from.
            </param>
            <remarks>
            This constructs a PTransformActivity with a null destination matrix.  The
            destination matrix must be set before this activity is scheduled.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.#ctor(System.Int64,System.Int64,UMD.HCIL.Piccolo.Activities.PTransformActivity.Target,UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Constructs a new PTransformActivity that will animate from the source matrix
            to the destination matrix.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between
            steps.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source
            state will be taken from.
            </param>
            <param name="aDestination">The destination matrix.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.#ctor(System.Int64,System.Int64,System.Int32,UMD.HCIL.Piccolo.Activities.ActivityMode,UMD.HCIL.Piccolo.Activities.PTransformActivity.Target,UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Constructs a new PTransformActivity that animate between the source and destination
            matrices in the order specified by the mode, looping the given number of iterations.
            </summary>
            <param name="duration">The length of one loop of the activity.</param>
            <param name="stepInterval">
            The minimum number of milliseconds that this activity should delay between steps.
            </param>
            <param name="loopCount">
            The number of times the activity should reschedule itself.
            </param>
            <param name="mode">
            Defines how the activity interpolates between states.
            </param>
            <param name="aTarget">
            The object that the activity will be applied to and where the source
            state will be taken from.
            </param>
            <param name="aDestination">The destination matrix.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.OnActivityStarted">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityStarted">
            PInterpolatingActivity.OnActivityStarted</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.SetRelativeTargetValue(System.Single)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SetRelativeTargetValue(System.Single)">
            PInterpolatingActivity.SetRelativeTargetValue</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Activities.PTransformActivity.GetElementString(System.Single[])">
            <summary>
            Gets a string representation of the elements of a matrix.
            </summary>
            <param name="elements">The elements of a matrix.</param>
            <returns>A string representation of the elements of a matrix.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PTransformActivity.IsAnimation">
             <summary>
             Overridden.  Gets a value indicating whether this activity is performing an animation.
             </summary>
             <value>True if this activity is performing an animation; false otherwise.</value>
             <remarks>
             This property will always return true since a PTransformActivity is an animating
             activity.
             <para>
             This is used by the PCanvas to determine if it should set the render quality to
             PCanvas.animatingRenderQuality or not for each frame it renders. 
             </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PTransformActivity.DestinationMatrix">
            <summary>
            Gets or sets the final matrix that will be used on the transform activity's
            target when the transform activity stops stepping.
            </summary>
            <value>The final matrix that will be used on the target.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PTransformActivity.ActivityTarget">
            <summary>
            Gets the Target associated with this activity.
            </summary>
            <value>This activity's target.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PTransformActivity.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this object.
            </summary>
            <value>A string representation of this object's state.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content and
            format of the returned string may vary between implementations. The returned string
            may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Activities.PTransformActivity.Target">
            <summary>
            <b>Target</b> objects that want to get transformed by the transform 
            activity must implement this interface.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Activities.PTransformActivity.Target.Matrix">
            <summary>
            Gets or sets the matrix of the target.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.NamespaceDoc">
            <summary>
            This namespace supports Piccolo event handlers.  It contains event listeners
            for user-driven input events. It also contains basic event handlers for
            common typical interaction such as zooming and panning.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.AcceptsEventDelegate">
            <summary>
            A delegate that is used to add a filter to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.KeyDownDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.KeyPressDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.KeyUpDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> events
            sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.ClickDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> events
            sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DoubleClickDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseDownDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseUpDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> events
            sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseMoveDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see>
            sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseDragDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseEnterDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseLeaveDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.MouseWheelDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragEnterDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragLeaveDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragOverDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragDropDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.GotFocusDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.LostFocusDelegate">
            <summary>
            A delegate that is used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see>
            events sent to this event handler class.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler">
            <summary>
            <b>PBasicInputEventHandler</b> is the standard class in Piccolo that
            is used to register for mouse and keyboard events on a PNode.
            </summary>
            <remarks>
            The events that you get depends on the node that you have registered with.
            For example you will only get mouse moved events when the mouse is over the node
            that you have registered with, not when the mouse is over some other node.
            <para>
            There are a couple of ways to use this event handler class.  You can extend
            PBasicInputEventHandler and override the OnEvent methods or you can instantiate
            a PBasicInputEventHandler and attach a handler method to one of the event
            delegates.
            </para>
            <para>
            <b>Note: </b>you can also attach an event handler method directly to an event on a node,
            but you will lose the ability to implement a filter or add other state to your
            event handler.  See the events in <c>PNode</c> for more details.
            </para>
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PInputEventListener">
            <summary>
            <b>PInputEventListener</b> defines an interface for objects that want to listen to
            PNodes for input events.  If you are just using Piccolo's default input management
            system then you will most often use PBasicInputEventHandler to register with a node
            for input events. 
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Returns true if the filter accepts the given event and false otherwise.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>True if the filter accepts the event; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnKeyDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnKeyPress(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnKeyUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnClick(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnDoubleClick(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseMove(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnMouseWheel(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnDragEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnDragLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnDragOver(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnDragDrop(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnGotFocus(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> event is sent to te
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventListener.OnLostFocus(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> event is sent to the
            listener that implements this interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.AcceptsEvent">
            <summary>
            Used to add a filter to this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.KeyDown">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.KeyPress">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.KeyUp">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> events sent to this event
            handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.Click">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">Click</see> events sent to this event
            handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DoubleClick">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see> events sent
            to this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseDown">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseUp">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseMove">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see> sent to this event
            handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseDrag">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseEnter">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseLeave">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.MouseWheel">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DragEnter">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DragLeave">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DragOver">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">DragOver</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DragDrop">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.GotFocus">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> events sent to this
            event handler class.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.LostFocus">
            <summary>
            Used to handle <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> events sent to
            this event handler class.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.#ctor">
            <summary>
            Constructs a new PBasicInputEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.DoesAcceptEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Returns true if the filter accepts the given event and false otherwise.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>True if the filter accepts the event; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.PBasicInputEventHandlerAcceptsEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            The filter for a PBasicInputEventHandler.  This method only rejects an event
            if it has already been marked as handled.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>True if the event has not been handled; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnKeyDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnKeyPress(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnKeyUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnClick(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnDoubleClick(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseMove(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseWheel(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnDragEnter(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnDragLeave(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnDragOver(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnDragDrop(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnGotFocus(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnLostFocus(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Called when a <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> event is sent to this
            listener.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.ToString">
            <summary>
            Overridden.  Returns a string representation of this object for debugging
            purposes.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.ParamString">
            <summary>
            Returns a string representing the state of this object.
            </summary>
            <value>A string representing the state of this object.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PDragEventHandler">
            <summary>
            <b>PDragEventHandler</b> is a simple event handler for dragging a
            node on the canvas.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler">
            <summary>
            <b>PDragSequenceEventHandler</b> is designed to support mouse pressed, dragged, and
            released interaction sequences. Support is also provided for running a continuous
            activity during the drag sequence. 
            </summary>
            <remarks>
            PDragSequenceEventHandler should be subclassed by a concrete event handler
            that implements a particular interaction. See PPanEventHandler, PZoomEventHandler,
            and PDragEventHandler for examples
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.StartDrag">
            <summary>
            Used to notify classes of the start of a new drag sequence.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.Drag">
            <summary>
            Used to notify classes of drag events in a drag sequence.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.EndDrag">
            <summary>
            Used to notify classes of the end of a drag sequence.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.DragActivityFirstStep">
            <summary>
            Used to notify classes that the drag activity has started stepping.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.DragActivityStep">
            <summary>
            Used to notify classes that the drag activity is stepping.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.DragActivityFinalStep">
            <summary>
            Used to notify classes that the drag activity has stopped stepping.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.#ctor">
            <summary>
             Constructs a new PDragSequenceEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified of the start of a new
            drag sequence.
            </summary>
            <param name="sender">The source of the start drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            This method is called at the beginning of a drag sequence.
            <para>
            Unlike the <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)"/> method, this method will not get called
            until after the <see cref="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.MinDragStartDistance"/> has been reached.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  Overriding methods must still call
            <c>base.OnStartDrag()</c> for correct behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified of the drag events in
            a drag sequence. 
            </summary>
            <param name="sender">The source of the end drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            This method is called in the middle of a drag sequence, between the
            <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)"/> and the <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)"/> methods.
            <para>
            Unlike the <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)"/> method, this method will not get called
            until after the <see cref="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.MinDragStartDistance"/> has been reached.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  Overriding methods must still call
            <c>base.OnDrag()</c> for correct behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Subclasses should override this method to get notified of the end event in
            a drag sequence. 
            </summary>
            <param name="sender">The source of the end drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            This method is called at the end of a drag sequence.
            <para>
            </para>
            Unlike the <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)"/> method, this method will not get called
            until after the <see cref="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.MinDragStartDistance"/> has been reached.
            <para>
            <b>Notes to Inheritors:</b>  Overriding methods must still call
            <c>base.OnEndDrag()</c> for correct behavior.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ShouldStartDragInteraction(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Returns true if a drag sequence should be initiated.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>True if a drag sequence should be initiated; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.StartDragActivity(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Schedules the drag activity to run.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.StopDragActivity(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Stops the drag activity.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ActivityStarted(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Called when the drag activity starts running.
            </summary>
            <param name="activity">The drag activity.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ActivityStepped(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Called when the drag activity is running.
            </summary>
            <param name="activity">The drag activity.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ActivityFinished(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Called when the drag activity stops running.
            </summary>
            <param name="activity">The drag activity.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDragActivityFirstStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Override this method to get notified when the drag activity is stepping.
            </summary>
            <param name="sender">The source of the drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <remarks>
            During a drag sequence an activity is scheduled that runs continuously while
            the drag sequence is active. This can be used to support some additional
            behavior that is not driven directly by mouse events. For example
            PZoomEventHandler uses it for zooming and PPanEventHandler uses it for auto
            panning.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDragActivityStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Override this method to get notified when the drag activity starts stepping.
            </summary>
            <param name="sender">The source of the drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDragActivityFinalStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Override this method to get notified when the drag activity stops stepping.
            </summary>
            <param name="sender">The source of the drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseDown(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PBasicInputEventHandler.OnMouseUp(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PBasicInputEventHandler.OnMouseUp</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.Dragging">
            <summary>
            Gets or sets a value indicating whether the a drag sequence is in progress.
            </summary>
            <value>True if a drag sequence is in progress; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.MinDragStartDistance">
            <summary>
            Gets or sets the minimum distance (in screen coordinates) the mouse must
            move before a drag sequence is initiated.
            </summary>
            <value>The minimum distance required to initate a drag sequence.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.MousePressedCanvasPoint">
            <summary>
            Gets or sets the point in canvas coordinates where the mouse was last pressed.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.DragActivityStepInterval">
            <summary>
            Gets the minimum number of milliseconds that the drag activity associated with
            this listener should delay between steps.
            </summary>
            <value>
            The minimum number of milliseconds that the drag activity should delay between
            steps.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.DragActivity">
            <summary>
            Gets the drag activity.
            </summary>
            <value>The drag activity.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ParamString">
            <summary>
            Returns a string representing the state of this object.
            </summary>
            <value>A string representing the state of this object.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.#ctor">
            <summary>
            Constructs a new PDragEventhandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.PDragEventHandlerAcceptsEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            The filter for a PDragEventHandler.  This method only accepts left mouse button
            events that have not yet been handled.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the event is an unhandled left mouse button event; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.ShouldStartDragInteraction(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.ShouldStartDragInteraction(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.ShouldStartDragInteraction</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnStartDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnStartDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PDragEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnEndDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnEndDrag</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragEventHandler.DraggedNode">
            <summary>
            Gets or sets the node being dragged.
            </summary>
            <value>The node being dragged.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragEventHandler.MoveToFrontOnPress">
            <summary>
            Gets or sets a value indicating whether or not a node should move to the
            front in the z-order at the beginning of a drag operation.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PDragEventHandler.ParamString">
            <summary>
            Overridden.  Returns a string representing the state of this object.
            </summary>
            <value>A string representing the state of this object.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.StartDragDelegate">
            <summary>
            A delegate used to notify classes of the start of a new drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragDelegate">
            <summary>
            A delegate used to notify classes of drag events in a drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.EndDragDelegate">
            <summary>
            A delegate used to notify classes of the end of a drag sequence.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragActivityFirstStepDelegate">
            <summary>
            A delegate used to notify classes that the drag activity has started stepping.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragActivityStepDelegate">
            <summary>
            A delegate used to notify classes that the drag activity is stepping.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.DragActivityFinalStepDelegate">
            <summary>
            A delegate used to notify classes that the drag activity has stopped stepping.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PInputType">
            <summary>
            This enumeration is used by the PInputEventArgs.  It represents the
            types of PInputEvents that are dispatched to Piccolo.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.KeyDown">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.KeyPress">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.KeyUp">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.Click">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.DoubleClick">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseDown">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseUp">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseMove">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseDrag">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseEnter">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseLeave">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.MouseWheel">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.DragEnter">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.DragLeave">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.DragOver">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.DragDrop">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.GotFocus">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> event.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PInputType.LostFocus">
            <summary>
            Identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> event.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PInputEventArgs">
            <summary>
            <b>PInputEventArgs</b> is used to pass keyboard and mouse event data to
            PInputEventListeners.
            </summary>
            <remarks>
            This class has methods for normal event properties such as event modifier keys
            and event canvas location.
            <para>
            In addition it has methods to get the mouse position and delta in a variety 
            of coordinate systems.
            </para>
            <para>
            Last of all, it provides access to the dispatch manager that can be queried
            to find the current mouse over, mouse focus, and keyboard focus.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.#ctor(UMD.HCIL.Piccolo.PInputManager,System.EventArgs,UMD.HCIL.Piccolo.Event.PInputType)">
            <summary>
            Constructs a new PInputEventArgs
            </summary>
            <param name="inputManager">The input manager that dispatched this event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
            <param name="type">The type of input event.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.PushCursor(System.Windows.Forms.Cursor)">
            <summary>
            Set the canvas cursor, and remember the previous cursor on the cursor stack.
            </summary>
            <param name="cursor">The new canvas cursor.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.PopCursor">
            <summary>
            Pop the cursor on top of the cursorStack and set it as the canvas cursor.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.GetPositionRelativeTo(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Return the mouse position relative to a given node on the pick path.
            </summary>
            <param name="nodeOnPath">
            The returned position will be in the local coordinate system of this node.
            </param>
            <returns>The mouse position relative to a given node on the pick path.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.GetDeltaRelativeTo(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Return the delta between the last and current mouse positions relative to a
            given node on the pick path.
            </summary>
            <param name="nodeOnPath">
            The returned delta will be in the local coordinate system of this node.
            </param>
            <returns>
            The delta between the last and current mouse positions relative to a given
            node on the pick path.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.DispatchTo(System.Object)">
            <summary>
            Raises the appropriate event on the given node.
            </summary>
            <param name="sender">The node for which the event will be raised.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PInputEventArgs.ToString">
            <summary>
            Overridden.  Returns a string representation of this object for debugging purposes.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Camera">
            <summary>
            Gets the bottom-most camera that is currently painting.
            </summary>
            <value>The bottom-most camera.</value>
            <remarks>
            If you are using internal cameras this may be different than what is
            returned by TopCamera.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.TopCamera">
            <summary>
            Gets the top-most camera this is painting.
            </summary>
            <value>The top-most camera.</value>
            <remarks>
            This is the camera associated with the PCanvas that requested the current
            repaint.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Canvas">
            <summary>
            Gets the canvas associated with the top camera.
            </summary>
            <value>The canvas associated with the top camera.</value>
            <remarks>
            This is the canvas where the originating event came from.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.InputManager">
            <summary>
            Gets the input manager that dispatched this event.
            </summary>
            <value>The input manager that dispatched this event.</value>
            <remarks>
            You can use this input manager to find the current mouse focus, mouse
            over, and key focus nodes. You can also set a new key focus node.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Path">
            <summary>
            Gets or sets the PPickPath associated with this input event.
            </summary>
            <value>The PPickPath associated with this input event.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.PickedNode">
            <summary>
            Gets the bottom node on the current pickpath, that is the picked node
            furthest from the root node.
            </summary>
            <value>The picked node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.KeyCode">
            <summary>
            Gets the Keyboard code for a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> or
            <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event.
            </summary>
            <value>A Keys value that is the key code for the event.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.KeyData">
            <summary>
            Gets the key data for a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> or
            <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event.
            </summary>
            <value>
            A Keys value representing the key code for the key that was pressed, combined
            with modifier flags that indicate which combination of CTRL, SHIFT, and ALT
            keys were pressed at the same time.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.KeyValue">
            <summary>
            Gets the keyboard value for a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> or
            <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event.
            </summary>
            <value>The integer representation of the KeyData property.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Modifiers">
            <summary>
            Gets the modifier flags.  This indicates which combination of modifier keys
            (CTRL, SHIFT, and ALT) were pressed.
            </summary>
            <value>A Keys value representing one or more modifier flags.</value>
            <remarks>
            If IsKeyEvent returns false, this value is equivalent to the value of
            <see cref="P:System.Windows.Forms.Control.ModifierKeys">Control.ModifierKeys</see>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Shift">
            <summary>
            Gets a value indicating whether the SHIFT key was pressed.
            </summary>
            <value>True if the SHIFT key was pressed; otherwise, false.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Alt">
            <summary>
            Gets a value indicating whether the ALT key was pressed.
            </summary>
            <value>True if the ALT key was pressed; otherwise, false.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Control">
            <summary>
            Gets a value indicating whether the CTRL key was pressed.
            </summary>
            <value>True if the CTRL key was pressed; otherwise, false.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.KeyChar">
            <summary>
            Gets the character corresponding to the key pressed.
            </summary>
            <value>
            The ASCII character that is composed. For example, if the user presses the
            SHIFT + K, this property returns an uppercase K.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a key press event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.MouseButtons">MouseButtons</see> values.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a mouse event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
            <value>The number of times the mouse button was pressed and released.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a mouse event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.WheelDelta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated.
            A detent is one notch of the mouse wheel.
            </summary>
            <value>
            A signed count of the number of detents the mouse wheel has rotated.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a mouse event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.AllowedDragDropEffects">
            <summary>
            Gets which drag-and-drop operations are allowed by the originator (or source)
            of the drag drop event.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.DragDropEffects">DragDropEffects</see> values.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a drag drop event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.DragDropData">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.IDataObject">IDataObject</see> that contains the data
            associated with this event.
            </summary>
            <value>The data associated with this event.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a drag drop event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.DragDropEffect">
            <summary>
            Gets or sets the target drop effect in a drag-and-drop operation.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.DragDropEffects">DragDropEffects</see> values.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a drag drop event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.DragDropKeyState">
            <summary>
            Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state
            of the mouse buttons.
            </summary>
            <value>
            The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the event is not a drag drop event.
            </exception>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether an event handler has handled this
            event.
            </summary>
            <value>True if this event has been handled; otherwise, false.</value>
            <remarks>
            This is a relaxed form of consuming events.  The event will continue to get
            dispatched to event handlers even after it is marked as handled, but other
            event handlers that might conflict are expected to ignore events that have
            already been handled.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.SourceEventArgs">
            <summary>
            Gets the underlying source EventArgs for this PInputEventArgs.
            </summary>
            <value>The underlying source EventArgs for this PInputEventArgs.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Type">
            <summary>
            Gets or sets the type of this input event.
            </summary>
            <value>The type of this event.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsKeyEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see>
            or <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> event.
            </summary>
            <value>True if this is a key event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsKeyPressEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see>
            event.
            </summary>
            <value>True if this is a key press event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsMouseEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see>,
            <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see>, <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see>,
            <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see>, <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see>,
            <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see>, or <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see>
            event.
            </summary>
            <value>True if this is a mouse event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsDragDropEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see>,
            <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see>, <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see>,
            or <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> event.
            </summary>
            <value>True if this is drag drop event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsClickEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> event.
            </summary>
            <value>True if this is a click event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsFocusEvent">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> or
            <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> event.
            </summary>
            <value>True if this is a focus event; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.IsMouseEnterOrMouseLeave">
            <summary>
            Gets a value indicating if this is a <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see>
            of <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> event.
            </summary>
            <value>
            True if this is a mouse enter or mouse leave event; otherwise, false.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.CanvasPosition">
            <summary>
            Gets the mouse position in PCanvas coordinates.
            </summary>
            <value>The mouse position in canvas coordinates.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.CanvasDelta">
            <summary>
            Gets the delta between the last and current mouse position in PCanvas
            coordinates.
            </summary>
            <value>
            The delta between the last and current mouse position in canvas coordinates.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Position">
            <summary>
            Return the mouse position transformed through the view matrix of the bottom
            camera.
            </summary>
            <value>
            The mouse position transformed through the view matrix of the bottom camera.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PInputEventArgs.Delta">
            <summary>
            Return the delta between the last and current mouse positions transformed
            through the view matrix of the bottom camera.
            </summary>
            <value>
            The delta between the last and current mouse positions transformed through
            the view matrix of the bottom camera.
            </value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PPanEventHandler">
            <summary>
            <b>PPanEventHandler</b> provides event handlers for basic panning of the canvas
            view with the left mouse button.
            </summary>
            <remarks>
            Clicking and dragging the mouse translates the view so that the point on the
            surface stays under the mouse.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.#ctor">
            <summary>
            Constructs a new PPanEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.PPanEventHandlerAcceptsEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            The filter for a PPanEventHandler.  This method only accepts left mouse button
            events that have not yet been handled.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the event is an unhandled left mouse button event; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDrag(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDrag</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.Pan(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Pans the camera as the mouse is dragged.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.OnDragActivityStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  Do auto-panning even when the mouse is not moving.
            </summary>
            <param name="sender">The source of the drag event.</param>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPanEventHandler.ValidatePanningDelta(System.Single)">
            <summary>
            Enforces the min and max auto-panning speeds, adjusting the given delta if necessary.
            </summary>
            <param name="delta">The distance moved out of the canvas on the last drag event/</param>
            <returns>The validated pan delta.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPanEventHandler.Autopan">
            <summary>
            Gets or sets a value indicating if the autopan feature is turned on.
            </summary>
            <value>True if autopan is turned on; otherwise false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPanEventHandler.MinAutopanSpeed">
            <summary>
            Gets or sets the minimum speed measured in pixels per second at which
            auto-panning occurs.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPanEventHandler.MaxAutopanSpeed">
            <summary>
            Gets or sets the maximum speed measured in pixels per second at which
            auto-panning occurs.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPanEventHandler.ParamString">
            <summary>
            Returns a string representing the state of this object.
            </summary>
            <value>A string representing the state of this object.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">
            <summary>
            <b>PPropertyEventArgs</b> is used to pass data for a property changed event to a
            <see cref="T:UMD.HCIL.Piccolo.PPropertyEventHandler">PPropertyEventHandler</see>.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.oldValue">
            <summary>
            The old value of the property that changed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.newValue">
            <summary>
            The new value of the property that changed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.propertyEventKey">
            <summary>
            The key that identifies which property changed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a new PPropertyEventArgs.
            </summary>
            <param name="oldValue">The old value of the property that changed.</param>
            <param name="newValue">The new value of the property that changed.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.ToString">
            <summary>
            Overridden.  Returns a string representation of this object for debugging purposes.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.OldValue">
            <summary>
            Gets the old value of the property that changed.
            </summary>
            <value>The old value of the property that changed.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PPropertyEventArgs.NewValue">
            <summary>
            Gets the new value of the property that changed.
            </summary>
            <value>The new value of the property that changed.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Event.PZoomEventHandler">
            <summary>
            <b>ZoomEventhandler</b> provides event handlers for basic zooming
            of the canvas view with the right (third) button.
            </summary>
            <remarks>
            Tthe initial mouse press defines the zoom anchor point, and then
            moving the mouse to the right zooms with a speed proportional
            to the amount the mouse is moved to the right of the anchor point.
            Similarly, if the mouse is moved to the left, the the view is
            zoomed out.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PZoomEventHandler.#ctor">
            <summary>
            Constructs a new PZoomEventHandler.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PZoomEventHandler.PZoomEventHandlerAcceptsEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            The filter for a PZoomEventHandler.  This method only accepts right mouse button
            events that have not yet been handled.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <returns>
            True if the event is an unhandled right mouse button event; otherwise, false.
            </returns>		
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PZoomEventHandler.OnDragActivityFirstStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDragActivityFirstStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDragActivityFirstStep</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Event.PZoomEventHandler.OnDragActivityStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler.OnDragActivityStep(System.Object,UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            PDragSequenceEventHandler.OnDragActivityStep</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PZoomEventHandler.MinScale">
            <summary>
            Gets or sets the minimum view magnification factor that this event handler is
            bound by.
            </summary>
            <value>The minimum view magnification factor.</value>
            <remarks>
            When this property is set the camera is left at its current scale evem if the
            value is larger than the current scale.
            <para>
            The value must be greater than 0.
            </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PZoomEventHandler.MaxScale">
            <summary>
            Gets or sets the maximum view magnification factor that this event handler is
            bound by.
            </summary>
            <value>The maximum view magnification factor.</value>
            <remarks>
            When this property is set the camera is left at its current scale even if
            the value is smaller than the current scale.
            <para>
            The value must be greater than 0.
            </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Event.PZoomEventHandler.ParamString">
            <summary>
            Returns a string representing the state of this object.
            </summary>
            <value>A string representing the state of this object.</value>
            <remarks>
            This method is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Nodes.NamespaceDoc">
            <summary>
            This namespace contains nodes that may be useful for Piccolo applications. These 
            nodes are intended to be useful, but not definitive. Many applications will also 
            end up defining their nodes which can be used along with these.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Nodes.PImage">
            <summary>
            <b>PImage</b> is a wrapper around a <see cref="T:System.Drawing.Image">
            System.Drawing.Image</see>.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PNode">
            <summary>
            <b>PNode</b> is the central abstraction in Piccolo. All objects that are
            visible on the screen are instances of the node class. All nodes may have 
            other "child" nodes added to them. 
            </summary>
            <remarks>
            See UMD.HCIL.PiccoloExample.NodeExample for demonstrations of how nodes
            can be used and how new types of nodes can be created.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_TAG">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.TagChanged">TagChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether TagChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_BOUNDS">
            <summary>
            A bit field that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.BoundsChanged">BoundsChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether BoundsChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_FULLBOUNDS">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.FullBoundsChanged">FullBoundsChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether FullBoundsChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_TRANSFORM">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.TransformChanged">TransformChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether TransformChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_VISIBLE">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.VisibleChanged">VisibleChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether VisibleChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_BRUSH">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.BrushChanged">BrushChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether BrushChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_PICKABLE">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.PickableChanged">PickableChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether PickableChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>	
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_CHILDRENPICKABLE">
            <summary>
            A bit field that identifies a
            <see cref="E:UMD.HCIL.Piccolo.PNode.ChildrenPickableChanged">ChildrenPickableChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether ChildrenPickableChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_CHILDREN">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.ChildrenChanged">ChildrenChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether ChildrenChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>	
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_CODE_PARENT">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PNode.ParentChanged">ParentChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether ParentChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PaintInvalidated">
            <summary>
            Used to recieve low level paint invalidated events.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.FullBoundsInvalidated">
            <summary>
            Used to recieve low level full bounds invalidated events.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_KEYDOWN">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.KeyDown">KeyDown</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_KEYPRESS">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.KeyPress">KeyPress</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_KEYUP">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.KeyUp">KeyUp</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_CLICK">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.Click">Click</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_DOUBLECLICK">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.DoubleClick">DoubleClick</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEDOWN">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDown">MouseDown</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEUP">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseUp">MouseUp</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEDRAG">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseDrag">MouseDrag</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEMOVE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseMove">MouseMove</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEENTER">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseEnter">MouseEnter</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSELEAVE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseLeave">MouseLeave</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_MOUSEWHEEL">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.MouseWheel">MouseWheel</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_DRAGENTER">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.DragEnter">DragEnter</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_DRAGLEAVE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.DragLeave">DragLeave</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_DRAGOVER">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.DragOver">DragOver</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_DRAGDROP">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.DragDrop">DragDrop</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_GOTFOCUS">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.GotFocus">GotFocus</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.EVENT_KEY_LOSTFOCUS">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.LostFocus">LostFocus</see> events in a node's event
            handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_TAG">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.TagChanged"/> events in a node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_BOUNDS">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.BoundsChanged">BoundsChanged</see> events in a node's
            event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_FULLBOUNDS">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.FullBoundsChanged">FullBoundsChanged</see> events in
            a node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_TRANSFORM">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.TransformChanged">TransformChanged</see> events in
            a node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_VISIBLE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.VisibleChanged">VisibleChanged</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_BRUSH">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.BrushChanged">BrushChanged</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_PICKABLE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.PickableChanged">PickableChanged</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_CHILDRENPICKABLE">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.ChildrenPickableChanged">ChildrenPickableChanged</see>
            events in a node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_CHILDREN">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.ChildrenChanged">ChildrenChanged</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.PROPERTY_KEY_PARENT">
            <summary>
            The key that identifies <see cref="E:UMD.HCIL.Piccolo.PNode.ParentChanged">ParentChanged</see> events in a
            node's event handler list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PNode.bounds">
            <summary>
            The bounds of this node, stored in local coordinates.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.#ctor">
            <summary>
            Constructs a new PNode.
            </summary>
            <Remarks>
            By default a node's brush is null, and bounds are empty. These values
            must be set for the node to show up on the screen once it's added to
            a scene graph.
            </Remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AnimateToBounds(System.Single,System.Single,System.Single,System.Single,System.Int64)">
            <summary>
            Animate this node's bounds from their current location when the activity
            starts to the specified bounds.
            </summary>
            <param name="x">The x coordinate of the target bounds.</param>
            <param name="y">The y coordinate of the target bounds.</param>
            <param name="width">The width of the target bounds.</param>
            <param name="height">The height of the target bounds.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>The newly scheduled activity.</returns>
            <remarks>
            If this node descends from the root then the activity will be scheduled,
            else the returned activity should be scheduled manually. If two different
            transform activities are scheduled for the same node at the same time,
            they will both be applied to the node, but the last one scheduled will be
            applied last on each frame, so it will appear to have replaced the original.
            Generally you will not want to do that. Note this method animates the node's
            bounds, but does not change the node's matrix. Use <see cref="M:UMD.HCIL.Piccolo.PNode.AnimateMatrixToBounds(System.Single,System.Single,System.Single,System.Single,System.Int64)">
            AnimateMatrixToBounds</see> to animate the node's matrix instead.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AnimateMatrixToBounds(System.Single,System.Single,System.Single,System.Single,System.Int64)">
            <summary>
            Animate this node from it's current matrix when the activity starts a new matrix that will fit
            the node into the given bounds.
            </summary>
            <param name="x">The x coordinate of the target bounds.</param>
            <param name="y">The y coordinate of the target bounds.</param>
            <param name="width">The width of the target bounds.</param>
            <param name="height">The height of the target bounds.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>The newly scheduled activity.</returns>
            <remarks>
            If this node descends from the root then the activity will be scheduled,
            else the returned activity should be scheduled manually. If two different
            transform activities are scheduled for the same node at the same time,
            they will both be applied to the node, but the last one scheduled will be
            applied last on each frame, so it will appear to have replaced the original.
            Generally you will not want to do that. Note this method animates the node's
            matrix, but does not directly change the node's bounds rectangle. Use
            <see cref="M:UMD.HCIL.Piccolo.PNode.AnimateToBounds(System.Single,System.Single,System.Single,System.Single,System.Int64)">AnimateToBounds</see> to animate the node's bounds
            rectangle instead.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AnimateToPositionScaleRotation(System.Single,System.Single,System.Single,System.Single,System.Int64)">
            <summary>
            Animate this node's matrix from its current location when the
            activity starts to the specified location, scale, and rotation.
            </summary>
            <param name="x">The x coordinate of the target location.</param>
            <param name="y">The y coordinate of the target location</param>
            <param name="scale">The scale of the target matrix</param>
            <param name="theta">The rotation of the target matrix</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>The newly scheduled activity.</returns>
            <remarks>
            If this node descends from the root then the activity will be scheduled,
            else the returned activity should be scheduled manually. If two different
            transform activities are scheduled for the same node at the same time,
            they will both be applied to the node, but the last one scheduled will be
            applied last on each frame, so it will appear to have replaced the
            original. Generally you will not want to do that.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AnimateToMatrix(UMD.HCIL.Piccolo.Util.PMatrix,System.Int64)">
            <summary>
            Animate this node's matrix from its current values when the activity
            starts to the new values specified in the given matrix.
            </summary>
            <param name="destMatrix">The final matrix value.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>The newly scheduled activity</returns>
            <remarks>
            If this node descends from the root then the activity will be scheduled,
            else the returned activity should be scheduled manually. If two different
            transform activities are scheduled for the same node at the same time,
            they will both be applied to the node, but the last one scheduled will be
            applied last on each frame, so it will appear to have replaced the
            original. Generally you will not want to do that.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AnimateToColor(System.Drawing.Color,System.Int64)">
            <summary>
            Animate this node's color from its current value to the new value
            specified.
            </summary>
            <param name="destColor">The final color value.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>The newly scheduled activity.</returns>
            <remarks>
            This method assumes that this nodes Brush property is of type SolidBrush.
            If this node descends from the root then the activity will be scheduled,
            else the returned activity should be scheduled manually. If two different
            color activities are scheduled for the same node at the same time, they will
            both be applied to the node, but the last one scheduled will be applied last
            on each frame, so it will appear to have replaced the original. Generally
            you will not want to do that.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddActivity(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Schedule the given activity with the root.
            </summary>
            <param name="activity">The new activity to schedule.</param>
            <returns>True if the activity is successfully scheduled.</returns>
            <remarks>
            Note that only scheduled activities will be stepped. If the activity is
            successfully added true is returned, else false. 
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Clone">
            <summary>
            The copy method copies this node and all of its descendents.
            </summary>
            <returns>A new copy of this node or null if the node was not serializable</returns>
            <remarks>
            Note that copying is implemented in terms of c# serialization. See
            the serialization notes for more information.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToParent(System.Drawing.PointF)">
            <summary>
            Transform the given point from this node's local coordinate system to
            its parent's local coordinate system.
            </summary>
            <param name="point">The point in local coordinate system to be transformed.</param>
            <returns>The point in parent's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToParent(System.Drawing.SizeF)">
            <summary>
            Transform the given size from this node's local coordinate system to
            its parent's local coordinate system.
            </summary>
            <param name="size">The size in local coordinate system to be transformed.</param>
            <returns>The point in parent's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToParent(System.Drawing.RectangleF)">
            <summary>
            Transform the given rectangle from this node's local coordinate system to
            its parent's local coordinate system.
            </summary>
            <param name="rectangle">The rectangle in local coordinate system to be transformed.</param>
            <returns>The rectangle in parent's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ParentToLocal(System.Drawing.PointF)">
            <summary>
            Transform the given point from this node's parent's local coordinate system to
            the local coordinate system of this node.
            </summary>
            <param name="point">The point in parent's coordinate system to be transformed.</param>
            <returns>The point in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ParentToLocal(System.Drawing.SizeF)">
            <summary>
            Transform the given size from this node's parent's local coordinate system to
            the local coordinate system of this node.
            </summary>
            <param name="size">The size in parent's coordinate system to be transformed.</param>
            <returns>The size in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ParentToLocal(System.Drawing.RectangleF)">
            <summary>
            Transform the given rectangle from this node's parent's local coordinate system to
            the local coordinate system of this node.
            </summary>
            <param name="rectangle">The rectangle in parent's coordinate system to be transformed.</param>
            <returns>The rectangle in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToGlobal(System.Drawing.PointF)">
            <summary>
            Transform the given point from this node's local coordinate system to
            the global coordinate system.
            </summary>
            <param name="point">The point in local coordinate system to be transformed.</param>
            <returns>The point in global coordinates.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToGlobal(System.Drawing.SizeF)">
            <summary>
            Transform the given size from this node's local coordinate system to
            the global coordinate system.
            </summary>
            <param name="size">The size in local coordinate system to be transformed.</param>
            <returns>The size in global coordinates.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LocalToGlobal(System.Drawing.RectangleF)">
            <summary>
            Transform the given rectangle from this node's local coordinate system to
            the global coordinate system.
            </summary>
            <param name="rectangle">The rectangle in local coordinate system to be transformed.</param>
            <returns>The rectangle in global coordinates.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GlobalToLocal(System.Drawing.PointF)">
            <summary>
            Transform the given point from global coordinates to this node's 
            local coordinate system.
            </summary>
            <param name="point">The point in global coordinates to be transformed.</param>
            <returns>The point in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GlobalToLocal(System.Drawing.SizeF)">
            <summary>
            Transform the given size from global coordinates to this node's 
            local coordinate system.
            </summary>
            <param name="size">The size in global coordinates to be transformed.</param>
            <returns>The size in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GlobalToLocal(System.Drawing.RectangleF)">
            <summary>
            Transform the given rectangle from global coordinates to this node's 
            local coordinate system.
            </summary>
            <param name="rectangle">The rectangle in global coordinates to be transformed.</param>
            <returns>The rectangle in this node's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddInputEventListener(UMD.HCIL.Piccolo.Event.PInputEventListener)">
            <summary>
            Adds the specified input event listener to receive input events 
            from this node.
            </summary>
            <param name="listener">The new input listener</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveInputEventListener(UMD.HCIL.Piccolo.Event.PInputEventListener)">
            <summary>
            Removes the specified input event listener so that it no longer 
            receives input events from this node.
            </summary>
            <param name="listener">The input listener to remove.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnKeyDown(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the KeyDown event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnKeyDown method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnKeyDown in a derived class,
            be sure to call the base class's OnKeyDown method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnKeyPress(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the KeyPress event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnKeyPress method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnKeyPress in a derived class,
            be sure to call the base class's OnKeyPress method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnKeyUp(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the KeyUp event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnKeyUp method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnKeyUp in a derived class,
            be sure to call the base class's OnKeyUp method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnClick(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnClick method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnClick in a derived class,
            be sure to call the base class's OnClick method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnDoubleClick(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the DoubleClick event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnDoubleClick method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnDoubleClick in a derived class,
            be sure to call the base class's OnDOubleClick method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseDown(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseDown method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseDown in a derived class,
            be sure to call the base class's OnMouseDown method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseUp(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseUp method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseUp in a derived class,
            be sure to call the base class's OnMouseUp method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseMove(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseMove method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseMove in a derived class,
            be sure to call the base class's OnMouseMove method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseDrag(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseDrag event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseDrag method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseDrag in a derived class,
            be sure to call the base class's OnMouseDrag method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseEnter(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseEnter event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseEnter method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseEnter in a derived class,
            be sure to call the base class's OnMouseEnter method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseLeave(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseLeave method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseLeave in a derived class,
            be sure to call the base class's OnMouseLeave method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnMouseWheel(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the MouseWheel event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnMouseWheel method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnMouseWheel in a derived class,
            be sure to call the base class's OnMouseWheel method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnDragEnter(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnDragEnter method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnDragEnter in a derived class,
            be sure to call the base class's OnDragEnter method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnDragLeave(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the DragLeave event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnDragLeave method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnDragLeave in a derived class,
            be sure to call the base class's OnDragLeave method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnDragOver(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnDragOver method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnDragOver in a derived class,
            be sure to call the base class's OnDragOver method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnDragDrop(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the DragDrop event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnDragDrop method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnDragDrop in a derived class,
            be sure to call the base class's OnDragDrop method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnGotFocus(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the GotFocus event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnGotFocus method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnGotFocus in a derived class,
            be sure to call the base class's OnGotFocus method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnLostFocus(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Raises the LostFocus event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data</param>
            <remarks>
            Raising an event invokes the event handler through a delegate.
            <para>
            The OnLostFocus method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for handling
            the event in a derived class.
            </para>
            <para>
            <b>Notes to Inheritors:</b>  When overriding OnLostFocus in a derived class,
            be sure to call the base class's OnLostFocus method so that registered
            delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.HandleEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs,UMD.HCIL.Piccolo.PInputEventHandler)">
            <summary>
            Raise the given input event.
            </summary>
            <param name="e">The arguments for this input event.</param>
            <param name="handler">The delegate to dispatch this event to.</param>
            <remarks>
            If an event has been set as handled, and the delegate is not a member of a listener
            class, then the event is consumed.  If the delegate is a member of a listener class
            the decision of consumption is left up to the filter associated with that class.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FirePropertyChangedEvent(System.Object,System.Int32,System.Object,System.Object)">
            <summary>
            Raise the given property change event.
            </summary>
            <param name="propertyKey">The key associated with the property that changed.</param>
            <param name="propertyCode">The code that identifies the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FireChildPropertyChangedEvent(UMD.HCIL.Piccolo.Event.PPropertyEventArgs,System.Object,System.Int32)">
            <summary>
            Called by child node to forward property change events up the node tree so that
            property change listeners registered with this node will be notified of property
            changes of its children nodes.
            </summary>
            <remarks>
            For performance reason only propertyCodes listed in the propertyChangeParentMask
            are forwarded.
            </remarks>
            <param name="e">The property change event to forward.</param>
            <param name="propertyKey">The key associated with the property that changed.</param>
            <param name="propertyCode">The code that identifies the property that changed.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GetPropertyHandlers(System.Object)">
            <summary>
            Gets all property event handlers for this node, that are associated with the
            specified property key.
            </summary>
            <param name="propertyKey">The key for which to find associated handlers.</param>
            <returns>
            All property event handlers associated with <code>propertyKey</code>
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the bounds of this node to the given values.
            </summary>
            <param name="x">The new x coordinate of the bounds.</param>
            <param name="y">The new y coordinate of the bounds.</param>
            <param name="width">The new width of the bounds.</param>
            <param name="height">The new height of the bounds.</param>
            <returns>True if the bounds have changed; otherwise, false.</returns>
            <remarks>
            These bounds are stored in the local coordinate system of this node.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.InternalUpdateBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gives nodes a chance to update their internal structure before bounds changed
            notifications are sent. When this message is received, the node's bounds field
            will contain the new value.
            </summary>
            <param name="x">The new x coordinate of the bounds.</param>
            <param name="y">The new y coordinate of the bounds.</param>
            <param name="width">The new width of the bounds.</param>
            <param name="height">The new height of the bounds.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.StartResizeBounds">
            <summary>
            Notify this node that you will begin to repeatedly call <c>SetBounds</c>.
            </summary>
            <remarks>
            After a call to <c>StartResizeBounds</c>, <c>EndResizeBounds</c> should eventually
            be called to notify the node of the end of the sequence of <c>SetBounds</c> calls.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.EndResizeBounds">
            <summary>
            Notify this node that you have finished a resize bounds sequence.
            </summary>
            <remarks>
            A call to <c>StartResizeBounds</c> should precede a call to <c>EndResizeBounds</c>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ResetBounds">
            <summary>
            Set the bounds of this node back to an empty rectangle.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.CenterBoundsOnPoint(System.Single,System.Single)">
            <summary>
            Adjust the bounds of this node so that they are centered on the given point
            specified in the local coordinate system of this node.
            </summary>
            <param name="x">
            The x coordinate of the point on which to center the bounds, in local coordinates.
            </param>
            <param name="y">
            The y coordinate of the point on which to center the bounds, in local coordinates.
            </param>
            <returns>True if the bounds changed.</returns>
            <remarks>Note that this method will modify the node's bounds, while CenterFullBoundsOnPoint
            will modify the node's matrix.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.CenterFullBoundsOnPoint(System.Single,System.Single)">
            <summary>
            Adjust the full bounds of this node so that they are centered on the given point
            specified in the local coordinates of this node's parent.
            </summary>
            <param name="x">
            The x coordinate of the point on which to center the bounds, in parent coordinates.
            </param>
            <param name="y">
            The y coordinate of the point on which to center the bounds, in parent coordinates.
            </param>
            <remarks>
            Note that this meathod will modify the node's matrix, while CenterBoundsOnPoint
            will modify the node's bounds.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Intersects(System.Drawing.RectangleF)">
            <summary>
            Return true if this node intersects the given rectangle specified in local bounds.
            </summary>
            <param name="bounds">The bounds to test for intersection.</param>
            <returns>true if the given rectangle intersects this node's geometry.</returns>
            <remarks>
            If the geometry of this node is complex, this method can become expensive.  It
            is therefore recommended that <c>FullIntersects</c> is used for quick rejects
            before calling this method.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ComputeFullBounds">
            <summary>
            Compute and return the full bounds of this node.
            </summary>
            <returns>The full bounds in the parent coordinate system of this node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FullIntersects(System.Drawing.RectangleF)">
            <summary>
            Return true if the full bounds of this node intersect with the specified bounds.
            </summary>
            <param name="bounds">
            The bounds to test for intersection (specified in the parent's coordinate system).
            </param>
            <returns>True if this node's full bounds intersect the given bounds.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.SignalBoundsChanged">
            <summary>
            This method should be called when the bounds of this node are changed.
            </summary>
            <remarks>
            This method invalidates the full bounds of this node, and also notifies each of 
            this node's children that their parent's bounds have changed. As a result 
            of this method getting called this node's <c>LayoutChildren</c> will be called.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.InvalidateLayout">
            <summary>
            Invalidate this node's layout, so that later <c>LayoutChildren</c> will get
            called.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ParentBoundsChanged">
            <summary>
            A notification that the bounds of this node's parent have changed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.InvalidateFullBounds">
            <summary>
            Invalidates the full bounds of this node, and sets the child bounds invalid flag
            on each of this node's ancestors.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnFullBoundsInvalidated">
            <summary>
            Raises the <see cref="F:UMD.HCIL.Piccolo.PNode.FullBoundsInvalidated">FullBoundsInvalidated</see> event.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ValidateFullBounds">
            <summary>
            This method is called to validate the bounds of this node and all of its 
            descendents.
            </summary>
            <returns>True if this node or any of its descendents have volatile bounds.</returns>
            <remarks>
            This method returns true if this node's bounds or the bounds of any of its
            descendents are marked as volatile.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.LayoutChildren">
            <summary>
            Nodes that apply layout constraints to their children should override this method
            and do the layout there.
            </summary>
            <remarks>
            This method gets called whenever Piccolo determines that this node's children may
            need to be re-layed out.  This occurs when the bounds of this node or a descendent
            node change.  This method may also be invoked indirectly when LayoutChildren is
            called on an ancestor node, since typically you will modify the bounds of the
            children there.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RotateBy(System.Single)">
            <summary>
            Rotates this node by theta (in degrees) about the 0,0 point.
            </summary>
            <param name="theta">The rotation in degrees.</param>
            <remarks>This will affect this node and all its descendents.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RotateInPlace(System.Single)">
            <summary>
            Rotates this node by theta (in degrees), and then translates the node so
            that the x, y position of its fullBounds stays constant.
            </summary>
            <param name="theta">The amount to rotate by in degrees.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RotateBy(System.Single,System.Drawing.PointF)">
            <summary>
            Rotates this node by theta (in degrees) about the given 
            point.
            </summary>
            <param name="theta">The amount to rotate by in degrees.</param>
            <param name="point">The point to rotate about.</param>
            <remarks>This will affect this node and all its descendents.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RotateBy(System.Single,System.Single,System.Single)">
            <summary>
            Rotates this node by theta (in degrees) about the given 
            point.
            </summary>
            <param name="theta">The amount to rotate by in degrees</param>
            <param name="x">The x-coordinate of the point to rotate about.</param>
            <param name="y">The y-coordinate of the point to rotate about.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ScaleBy(System.Single)">
            <summary>
            Scale this node's matrix by the given amount.
            </summary>
            <param name="scale">The amount to scale by.</param>
            <remarks>This will affect this node and all of its descendents.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ScaleBy(System.Single,System.Drawing.PointF)">
            <summary>
            Scale this node's matrix by the given amount about the specified
            point.
            </summary>
            <param name="scale">The amount to scale by.</param>
            <param name="point">The point to scale about.</param>
            <remarks>This will affect this node and all of its descendents.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ScaleBy(System.Single,System.Single,System.Single)">
            <summary>
            Scale this node's matrix by the given amount about the specified
            point.
            </summary>
            <param name="scale">The amount to scale by.</param>
            <param name="x">The x-coordinate of the point to scale about.</param>
            <param name="y">The y-coordinate of the point to scale about.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OffsetBy(System.Single,System.Single)">
            <summary>
            Offset this node relative to the parent's coordinate system.  This is NOT
            affected by this node's current scale or rotation.
            </summary>
            <param name="dx">The amount to add to the x-offset for this node.</param>
            <param name="dy">The amount to add to the y-offset for this node.</param>
            <remarks>
            This is implemented by directly adding dx to the dx position and dy to
            the dy position of the matrix.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.SetOffset(System.Single,System.Single)">
            <summary>
            Sets the offset applied to this node by it's matrix.
            </summary>
            <param name="x">
            The x amount of the offset, specified in the parent coordinate system.
            </param>
            <param name="y">
            The y amount of the offset, specified in the parent coordinate system.
            </param>
            <remarks>
            The offset affects this node and all of its descendents and is specified
            in the parent coordinate system.  This directly sets the values that are in
            the dx and dy positions of the matrix.  Unlike <c>PNode.TranslateBy()</c>,
            this is not affected by the scale value of the matrix.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.TranslateBy(System.Single,System.Single)">
            <summary>
            Translate this node's matrix by the given amount, using the standard matrix
            <c>Translate</c> method.
            </summary>
            <param name="dx">The amount to translate in the x direction.</param>
            <param name="dy">The amount to translate in the y direction.</param>
            <remarks>This translation affects this node and all of its descendents.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.TransformBy(UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Transform this node's matrix by the given matrix.
            </summary>
            <param name="matrix">The transform to apply.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between a and b, based on t.
            Specifically, it computes Lerp(a, b, t) = a + t*(b - a).
            This produces a result that changes from a (when t = 0) to b (when t = 1).
            </summary>
            <param name="t">The variable 'time' parameter.</param>
            <param name="a">The starting value.</param>
            <param name="b">The ending value.</param>
            <returns>A value between a and b determined by t.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Position(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Animate this node's matrix to one that will make this node appear at the specified
            position relative to the specified bounding box.
            </summary>
            <param name="srcPt"></param>
            <param name="destPt"></param>
            <param name="destBounds"></param>
            <param name="millis"></param>
            <remarks>
            The source point specifies a point in the unit square (0, 0) - (1, 1) that
            represents an anchor point on the corresponding node to this matrox.  The
            destination point specifies	an anchor point on the reference node.  The
            position method then computes the matrix that results in transforming this
            node so that the source anchor point coincides with the reference anchor
            point. This can be useful for layout algorithms as it is straightforward to
            position one object relative to another.
            <para>
            For example, If you have two nodes, A and B, and you call
            <code>
                PointF srcPt = new PointF(1.0f, 0.0f);
                PointF destPt = new PointF(0.0f, 0.0f);
                A.Position(srcPt, destPt, B.GlobalBounds, 750);
            </code>
            The result is that A will move so that its upper-right corner is at
            the same place as the upper-left corner of B, and the transition will
            be smoothly animated over a period of 750 milliseconds.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.InvalidatePaint">
            <summary>
            Invalidate this node's paint, and mark all of its ancestors as having
            a node with invalid paint.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.OnPaintInvalidated">
            <summary>
            Raises the <see cref="F:UMD.HCIL.Piccolo.PNode.PaintInvalidated">PaintInvalidated</see> event.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ValidateFullPaint">
            <summary>
            Repaint this node and any of its descendents if they have invalid paint.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Repaint">
            <summary>
            Mark the area on the screen represented by this node's full bounds 
            as needing a repaint.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RepaintFrom(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Pass the given repaint request up the tree, so that any cameras
            can invalidate that region on their associated canvas.
            </summary>
            <param name="bounds">
            The bounds to repaint, specified in the local coordinate system.
            </param>
            <param name="childOrThis">
            If childOrThis does not equal this then this node's matrix will
            be applied to the bounds paramater.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.IsOpaque(System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="boundary"></param>
            <returns></returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Paint this node behind any of its children nodes.
            </summary>
            <param name="paintContext">The paint context to use for painting this node.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Subclasses that define a different appearance should
            override this method and paint themselves there.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FullPaint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Paint this node and all of its descendents.
            </summary>
            <param name="paintContext">The paint context to use for painting this node.</param>
            <remarks>
            <b>Notes to Inheritors:</b>  Most subclasses do not need to override this method,
            they should override <c>paint</c> or <c>paintAfterChildren</c> instead.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PaintAfterChildren(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Subclasses that wish to do additional painting after their children
            are painted should override this method and do that painting here.
            </summary>
            <param name="paintContext">
            The paint context to use for painting after the children are painted.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToImage">
            <summary>
            Return a new Image representing this node and all of its children.
            </summary>
            <returns>A new Image representing this node and its descendents.</returns>
            <remarks>
            The image size will be equal to the size of this node's full bounds.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToImage(System.Int32,System.Int32,System.Drawing.Brush)">
            <summary>
            Return a new Image of the requested size representing this node and all of
            its children.
            </summary>
            <param name="width">The desired width of the image, in pixels.</param>
            <param name="height">The desired height of the image, in pixels.</param>
            <param name="backgroundBrush">
            The brush used to render the background of the image.
            </param>
            <returns>A new Image representing this node and its descendents.</returns>
            <remarks>
            If backgroundBrush is null, then the image will not be filled with a color
            prior to rendering.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToImage(System.Drawing.Image,System.Drawing.Brush)">
            <summary>
            Paint a representation of this node into the specified image.  If backgroundBrush
            is null, then the image will not be filled with a color prior to rendering.
            </summary>
            <param name="image">The image to render this node into.</param>
            <param name="backgroundBrush">
            The brush used to render the background of the image.
            </param>
            <returns>
            A rendering of this node and its descendents into the specified image.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Print">
            <summary>
            Constructs a new PrintDocument, allows the user to select which printer
            to print to, and then prints the node.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.printDocument_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the node into the given Graphics context.
            </summary>
            <param name="sender">The source of the PrintPage event.</param>
            <param name="e">The PrintPageEventArgs.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ScaleAndDraw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Scale the Graphics so that this node's full bounds fit in displayRect and then
            render into the given Graphics context.
            </summary>
            <param name="g">The Graphics context to use when rendering the node.</param>
            <param name="displayRect">The imageable area.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Pick(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Try to pick this node before its children have had a chance to be picked.
            </summary>
            <param name="pickPath">The pick path used for the pick operation.</param>
            <returns>True if this node was picked; else false.</returns>
            <remarks>
            Nodes that paint on top of their children may want to override this method to see
            if the pick path intersects that paint.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FullPick(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Try to pick this node and all of its descendents.
            </summary>
            <param name="pickPath">The pick path to add the node to if its picked.</param>
            <returns>True if this node or one of its descendents was picked; else false.</returns>
            <remarks>
            <b>Notes to Inheritors:</b>  Most subclasses should not need to override this
            method. Instead they should override <c>Pick</c> or <c>PickAfterChildren</c>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.FindIntersectingNodes(System.Drawing.RectangleF,UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Checks this node and it's descendents for intersection with the given bounds
            and adds any intersecting nodes to the given list.
            </summary>
            <param name="fullBounds">
            The bounds to check for intersection, in parent coordinates.
            </param>
            <param name="results">
            The resulting list of nodes.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PickAfterChildren(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Try to pick this node after its children have had a chance to be picked.
            </summary>
            <param name="pickPath">The pick path used for the pick operation.</param>
            <returns>True if this node was picked; else false.</returns>
            <remarks>
            <b>Notes to Inheritors:</b>  Most subclasses that define a different geometry will
            need to override this method.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToPickPath">
            <summary>
            Creates a pick path with a null camera and empty pickbounds and adds this node.
            </summary>
            <returns>
            A pick path with a null camera and empty pickbounds that contains this node
            </returns>
            <remarks>
            This method is useful if you want to dispatch events directly to a single node.
            For an example, see PSelectionExample, where the KeyboardFocus is set using
            this approach.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToPickPath(UMD.HCIL.Piccolo.PCamera,System.Drawing.RectangleF)">
            <summary>
            Creates a pick path with the given Camera and pickbounds and adds this node.
            </summary>
            <param name="aCamera">The camera to use when creating the pick path.</param>
            <param name="pickBounds">The pick bounds to use when creating the pick path.</param>
            <returns>
            A pick path with the given camera and pickbounds that contains this node
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddChild(UMD.HCIL.Piccolo.PNode)">
            <summary>Add a node to be a new child of this node.</summary>
            <param name="child">The new child to add to this node.</param>
            <remarks>
            The new node is added to the end of the list of this node's children.
            If child was previously a child of another node, it is removed from that
            node first.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddChild(System.Int32,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Add a node to be a new child of this node at the specified index.
            </summary>
            <param name="index">The index at which to add the new child.</param>
            <param name="child">The new child to add to this node.</param>
            <remarks>
            If child was previously a child of another node, it is removed 
            from that node first.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddChildren(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Add a list of nodes to be children of this node.
            </summary>
            <param name="nodes">A list of nodes to be added to this node.</param>
            <remarks>
            If these nodes already have parents they will first be removed from
            those parents.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.AddChildren(System.Collections.ICollection)">
            <summary>
            Add a collection of nodes to be children of this node.
            </summary>
            <param name="nodes">
            A collection of nodes to be added to this node.
            </param>
            <remarks>
            This method allows you to pass in any <see cref="T:System.Collections.ICollection"/>, rather than a
            <see cref="T:UMD.HCIL.Piccolo.Util.PNodeList"/>.  This can be useful if you are using an ArrayList
            or some other collection type to store PNodes.  Note, however, that this list
            still must contain only objects that extend PNode otherwise you will get a
            runtime error.  To protect against problems of this type, use the
            <see cref="M:UMD.HCIL.Piccolo.PNode.AddChildren(UMD.HCIL.Piccolo.Util.PNodeList)">AddChildren(PNodeList)</see> method instead.
            <para>
            If these nodes already have parents they will first be removed from
            those parents.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.IsAncestorOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Return true if this node is an ancestor of the parameter node.
            </summary>
            <param name="node">A possible descendent node.</param>
            <returns>True if this node is an ancestor of the given node; else false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.IsDescendentOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Return true if this node is a descendent of the parameter node.
            </summary>
            <param name="node">A possible descendent node.</param>
            <returns>True if this node is a descendent of the given node; else false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.IsDescendentOfRoot">
            <summary>
            Return true if this node is a descendent of the Root.
            </summary>
            <returns>True if this node is a descendent of the root, else false;</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.MoveToBack">
            <summary>
            Change the order of this node in its parent's children list so that
            it will draw in back of all of its other sibling nodes.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.MoveInBackOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Change the order of this node in its parent's children list so that
            it will draw before the given sibling node.
            </summary>
            <param name="sibling">The sibling to move behind.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.MoveToFront">
            <summary>
            Change the order of this node in its parent's children list so that
            it will draw in front of all of its other sibling nodes.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.MoveInFrontOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Change the order of this node in its parent's children list so that
            it will draw after the given sibling node.
            </summary>
            <param name="sibling">The sibling to move in front of.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.IndexOfChild(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Return the index where the given child is stored.
            </summary>
            <param name="child">The child whose index is desired.</param>
            <returns>The index of the given child.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveChild(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Remove the given child from this node's children list.
            </summary>
            <param name="child">The child to remove.</param>
            <remarks>
            Any subsequent children are shifted to the left (one is subtracted 
            from their indices). The removed child’s parent is set to null.
            </remarks>
            <returns>The removed child.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveChild(System.Int32)">
            <summary>
            Remove the child at the specified position from this node's children.
            </summary>
            <param name="index">The index of the child to remove.</param>
            <remarks >
            Any subsequent children are shifted to the left (one is subtracted 
            from their indices). The removed child’s parent is set to null.
            </remarks>
            <returns>The removed child.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveChildren(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Remove all the children in the given list from this node’s list
            of children.
            </summary>
            <param name="childrenNodes">The list of children to remove.</param>
            <remarks>All removed nodes will have their parent set to null.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveChildren(System.Collections.ICollection)">
            <summary>
            Remove all the children in the given collection from this node’s
            list of children.
            </summary>
            <param name="childrenNodes">
            The collection of children to remove.
            </param>
            <remarks>
            This method allows you to pass in any <see cref="T:System.Collections.ICollection"/>, rather than a
            <see cref="T:UMD.HCIL.Piccolo.Util.PNodeList"/>.  This can be useful if you are using an ArrayList
            or some other collection type to store PNodes.  Note, however, that this list
            still must contain only objects that extend PNode otherwise you will get a
            runtime error.  To protect against problems of this type, use the
            <see cref="M:UMD.HCIL.Piccolo.PNode.RemoveChildren(UMD.HCIL.Piccolo.Util.PNodeList)">RemoveChildren(PNodeList)</see> method
            instead.
            <para>
            All removed nodes will have their parent set to null.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveAllChildren">
            <summary>
            Remove all the children from this node.
            </summary>
            <remarks>
            Note this method is more efficient then removing each child individually.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.RemoveFromParent">
            <summary>
            Delete this node by removing it from its parent’s list of children.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.Reparent(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Set the parent of this node, and transform the node in such a way that it
            doesn't move in global coordinates.
            </summary>
            <param name="newParent">The new parent of this node.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ReplaceWith(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Swaps this node out of the scene graph tree, and replaces it with the specified
            replacement node.
            </summary>
            <param name="replacementNode">
            The new node that replaces the current node in the scene graph tree.
            </param>
            <remarks>
            This node is left dangling, and it is up to the caller to manage it.  The
            replacement node will be added to this node's parent in the same position as this node
            was located.  That is, if this was the 3rd child of its parent, then after calling
            <c>ReplaceWith</c>, the replacement node will also be the 3rd child of its parent.
            If this node has no parent when <c>ReplaceWith</c> is called, then nothing will be
            done at all.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GetChild(System.Int32)">
            <summary>
            Return the child node at the specified index.
            </summary>
            <param name="index">The index of the desired child.</param>
            <returns>The child node at the specified index.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GetEnumerator">
            <summary>
            Return an enumerator for this node’s direct descendent children.
            </summary>
            <returns>An enumerator for this node's children.</returns>
            <remarks>
            This method allows you to use the foreach loop to iterate over a node's children.
            For example, you could do the following:
            
            <code>
            	foreach(PNode node in aNode) {
            		node.DoSomething();
            	}
            </code>
            
            Typically, you will not need to call this method directly.  Instead use the
            ChildrenEnumerator property.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GetAllNodes(UMD.HCIL.Piccolo.Util.PNodeFilter,UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Gets a list containing the subset of this node and all of its descendent nodes
            that are accepted by the given node filter. 
            </summary>
            <param name="filter">The filter used to determine the subset.</param>
            <param name="results">The list used to collect the subset; can be null.</param>
            <returns>
            A list containing the subset of this node and all its descendents accepted by
            the filter.
            </returns>
            <remarks>
            If the filter is null then all nodes will be accepted. If the results parameter is not
            null then it will be used to store this subset instead of creating a new list.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this node and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this node and all of its descendent nodes to the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
            <remarks>
            This node's parent is written out conditionally, that is it will only be written out
            if someone else writes it out unconditionally.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.ToString">
            <summary>
            Returns a string representation of this object for debugging purposes.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Tag">
            <summary>
            Gets or sets the object that contains data about the control.
            </summary>
            <value>
            An Object that contains data about the control. The default is a null reference.
            </value>
            <remarks>
            Any type derived from the Object class can be assigned to this property.
            <para>
            A common use for the Tag property is to store data that is closely associated with
            the node. For example, if you have a node with a tooltip, you might store the text
            in that node's tag property.
            </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.LocalToGlobalMatrix">
            <summary>
            Return the matrix that converts local coordinates at this node 
            to the global coordinate system.
            </summary>
            <value>The concatenation of matrices from the top node down to this
            node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalToLocalMatrix">
            <summary>
            Return the matrix that converts global coordinates  to local coordinates
            of this node.
            </summary>
            <value>The inverse of the concatenation of matrices from the root down to
            this node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.HandlerList">
            <summary>
            Return the list of event handlers associated with this node.
            </summary>
            <value>The list of event handlers for this node.</value>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.KeyDown">
            <summary>
            Occurs when a key is pressed while the node has focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the KeyDown Event as in
            KeyDown += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by keyDownEventKey in the Events list).
            When a user removes an event handler from the KeyDown event as in 
            KeyDown -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by keyDownEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.KeyPress">
            <summary>
            Occurs when a key is pressed while the node has focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the KeyPress Event as in
            KeyPress += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by keyPressEventKey in the Events list).
            When a user removes an event handler from the KeyPress event as in 
            KeyPress -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by keyPressEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.KeyUp">
            <summary>
            Occurs when a key is released while the node has focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the KeyUp Event as in
            KeyUp += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by keyUpEventKey in the Events list).
            When a user removes an event handler from the KeyUp event as in 
            KeyUp -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by keyUpEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.Click">
            <summary>
            Occurs when the node is clicked.
            </summary>
            <remarks>
            When a user attaches an event handler to the Click Event as in
            Click += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by clickEventKey in the Events list).
            When a user removes an event handler from the Click event as in 
            Click -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by clickEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.DoubleClick">
            <summary>
            Occurs when the node is double clicked.
            </summary>
            <remarks>
            When a user attaches an event handler to the DoubleClick Event as in
            DoubleClick += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by doubleClickEventKey in the Events list).
            When a user removes an event handler from the DoubleClick event as in 
            DoubleClick -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by doubleClickEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is pressed.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseDown Event as in
            MouseDown += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseDownEventKey in the Events list).
            When a user removes an event handler from the MouseDown event as in 
            MouseDown -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseDownEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is released.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseUp Event as in
            MouseUp += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseUpEventKey in the Events list).
            When a user removes an event handler from the MouseUp event as in 
            MouseUp -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseUpEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the node.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseMove Event as in
            MouseMove += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseMoveEventKey in the Events list).
            When a user removes an event handler from the MouseMove event as in 
            MouseMove -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseMoveEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseDrag">
            <summary>
            Occurs when the mouse pointer is dragged over the node.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseDrag Event as in
            MouseDrag += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseDragEventKey in the Events list).
            When a user removes an event handler from the MouseDrag event as in 
            MouseDrag -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseDragEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the node.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseEnter Event as in
            MouseEnter += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseEnterEventKey in the Events list).
            When a user removes an event handler from the MouseEnter event as in 
            MouseEnter -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseEnterEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the node.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseLeave Event as in
            MouseLeave += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseLeaveEventKey in the Events list).
            When a user removes an event handler from the MouseLeave event as in 
            MouseLeave -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseLeaveEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the node has focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the MouseWheel Event as in
            MouseWheel += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by mouseWheelEventKey in the Events list).
            When a user removes an event handler from the MouseWheel event as in 
            MouseWheel -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by mouseWheelEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.DragEnter">
            <summary>
            Occurs when an object is dragged into this node's bounds.
            </summary>
            <remarks>
            When a user attaches an event handler to the DragEnter Event as in
            DragEnter += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by DragEnterEventKey in the Events list).
            When a user removes an event handler from the DragEnter event as in 
            DragEnter -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by DragEnterEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.DragLeave">
            <summary>
            Occurs when an object is dragged out of this node's bounds.
            </summary>
            <remarks>
            When a user attaches an event handler to the DragLeave Event as in
            DragLeave += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by DragLeaveEventKey in the Events list).
            When a user removes an event handler from the DragLeave event as in 
            DragLeave -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by DragLeaveEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.DragOver">
            <summary>
            Occurs when an object is dragged over this node's bounds.
            </summary>
            <remarks>
            When a user attaches an event handler to the DragOver Event as in
            DragOver += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by dragOverEventKey in the Events list).
            When a user removes an event handler from the DragOver event as in 
            DragOver -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by dragOverEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.DragDrop">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
            <remarks>
            When a user attaches an event handler to the DragDrop Event as in
            DragDrop += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by dragDropEventKey in the Events list).
            When a user removes an event handler from the DragDrop event as in 
            DragDrop -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by dragDropEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.GotFocus">
            <summary>
            Occurs when the node receives focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the GotFocus Event as in
            GotFocus += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by gotFocusEventKey in the Events list).
            When a user removes an event handler from the GotFocus event as in 
            GotFocus -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by gotFocusEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.LostFocus">
            <summary>
            Occurs when the node loses focus.
            </summary>
            <remarks>
            When a user attaches an event handler to the LostFocus Event as in
            LostFocus += new PInputEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by lostFocusEventKey in the Events list).
            When a user removes an event handler from the LostFocus event as in 
            LostFocus -= new PInputEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by lostFocusEventKey in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.TagChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Tag">Tag</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the new
            value will be a reference to this node's tag, but old value will always be null.
            </para>
            <para>
            When a user attaches an event handler to the TagChanged Event as in
            TagChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_TAG in the Events list).
            When a user removes an event handler from the tagChanged event as in 
            TagChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_TAG in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.BoundsChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Bounds">Bounds</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the new value will
            be a this node's bounds, but old value will always be null.
            </para>
            <para>
            When a user attaches an event handler to the BoundsChanged Event as in
            BoundsChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_BOUNDS in the Events list).
            When a user removes an event handler from the BoundsChanged event as in 
            BoundsChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_BOUNDS in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.FullBoundsChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.FullBounds">FullBounds</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the new value will be
            a this node's full bounds cache, but old value will always be null.
            </para>
            <para>
            When a user attaches an event handler to the FullBoundsChanged Event as in
            FullBoundsChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_FULLBOUNDS in the Events list).
            When a user removes an event handler from the FullBoundsChanged event as in 
            FullBoundsChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_FULLBOUNDS in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.TransformChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Matrix">Matrix</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the new value
            will be a reference to this node's matrix, but old value will always be null.
            </para>
            <para>
            When a user attaches an event handler to the TransformChanged Event as in
            TransformChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_TRANSFORM in the Events list).
            When a user removes an event handler from the TransformChanged event as in 
            TransformChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_TRANSFORM in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.VisibleChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Visible">Visible</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, both the old and
            new value will be null.
            </para>
            <para>
            When a user attaches an event handler to the VisibleChanged Event as in
            VisibleChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_VISIBLE in the Events list).
            When a user removes an event handler from the VisibleChanged event as in 
            VisibleChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_VISIBLE in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.BrushChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Brush">Brush</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, both the old
            and new value will be a set correctly.
            </para>
            <para>
            When a user attaches an event handler to the BrushChanged Event as in
            BrushChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_BRUSH in the Events list).
            When a user removes an event handler from the BrushChanged event as in 
            BrushChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_BRUSH in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.PickableChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Pickable">Pickable</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, both the old and
            new value will be null.
            </para>
            <para>
            When a user attaches an event handler to the PickableChanged Event as in
            PickableChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_PICKABLE in the Events list).
            When a user removes an event handler from the PickableChanged event as in 
            PickableChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_PICKABLE in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.ChildrenPickableChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.ChildrenPickable">ChildrenPickable</see>
            property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, both the old
            and new value will be null.
            </para>
            <para>
            When a user attaches an event handler to the ChildrenPickableChanged Event as in
            ChildrenPickableChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_CHILDRENPICKABLE in the Events list).
            When a user removes an event handler from the ChildrenPickableChanged event as in 
            ChildrenPickableChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_CHILDRENPICKABLE in the Events list).
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.ChildrenChanged">
            <summary>
            Occurs when there is a change in the set of this node's direct children.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the new value will
            be a reference to this node's children, but the old value will always be null.
            </para>
            <para>
            When a user attaches an event handler to the ChildrenChanged Event as in
            ChildrenChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_CHILDREN in the Events list).
            When a user removes an event handler from the ChildrenChanged event as in 
            ChildrenChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_CHILDREN in the Events list).
            </para>
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.ChildrenReference">PNode.ChildrenReference</seealso>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PNode.ParentChanged">
            <summary>
            Occurs when the value of the <see cref="P:UMD.HCIL.Piccolo.PNode.Parent">Parent</see> property changes.
            </summary>
            <remarks>
            <para>
            In the <see cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</see>, the old and new
            value will be a set correctly.
            </para>
            <para>
            When a user attaches an event handler to the ParentChanged Event as in
            ParentChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_PARENT in the Events list).
            When a user removes an event handler from the ParentChanged event as in 
            ParentChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_PARENT in the Events list).
            </para>
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">
            <summary>
            Gets or sets a value that determines which property change events are
            forwarded to this node's parent so that it's property change listeners
            will also be notified.
            </summary>
            <value>
            A bitwise combination of the PROPERTY_CODE_XXX flags that determines
            which properties change events are forwarded to this node's parent.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Bounds">
            <summary>
            Gets or sets this node's bounds in local coordinates.
            </summary>
            <value>The bounds of this node.</value>
            <remarks>
            These bounds are stored in the local coordinate system of this node
            and do not include the bounds of any of this node's children.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.X">
            <summary>
            Gets the x position (in local coordinates) of this node's bounds.
            </summary>
            <value>The x position of this node's bounds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Y">
            <summary>
            Gets the y position (in local coordinates) of this node's bounds.
            </summary>
            <value>The y position of this node's bounds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Width">
            <summary>
            Gets the width (in local coordinates) of this node's bounds.
            </summary>
            <value>The width of this node's bounds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Height">
            <summary>
            Gets the height (in local coordinates) of this node's bounds.
            </summary>
            <value>The height of this node's bounds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalBounds">
            <summary>
            Gets a copy of the bounds of this node in the global coordinate system.
            </summary>
            <value>The bounds in the global coordinate system.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.FullBounds">
            <summary>
            Gets this node's full bounds in the parent coordinate system of this node.
            </summary>
            <value>This full bounds of this node.</value>
            <remarks>
            These bounds are stored in the parent coordinate system of this node and they
            include the union of this node's bounds and all the bounds of it's descendents.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.UnionOfChildrenBounds">
            <summary>
            Gets the union of the full bounds of all the children of this node.
            </summary>
            <value>The union of the full bounds of the children of this node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalFullBounds">
            <summary>
            Gets the full bounds of this node in the global coordinate system.
            </summary>
            <value>The full bounds in the global coordinate system.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.BoundsVolatile">
            <summary>
            Gets a value indicating whether this nodes bounds may change at any time.
            </summary>
            <value>The property is true if this node has volatile bounds; otherwise, false.</value>
            <remarks>
            <b>Notes to Inheritors:</b>  The default behavior is to return false.  Subclasses that
            override this method to return true, should also override the get accessor of the Bounds
            property and compute the volatile bounds there before returning.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildBoundsVolatile">
            <summary>
            Gets or sets a value indicating whether this has a child with volatile bounds.
            </summary>
            <value>The property is true if this node has a child with volatile bounds; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.BoundsModified">
            <summary>
            Gets or sets a value indicating whether this node's bounds have recently changed.
            </summary>
            <value>The property is true if this node has a child with volatile bounds; otherwise, false.</value>
            <remarks>This flag will be reset on the next call of <c>ValidateFullBounds</c>.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.FullBoundsInvalid">
            <summary>
            Gets or sets a value indicating whether the full bounds of this node are valid.
            </summary>
            <value>The property is true if the full bounds of this node are invalid; otherwise, false.</value>
            <remarks>
            If this property is true, the full bounds of this node have changed and need to be
            recomputed.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildBoundsInvalid">
            <summary>
            Gets or sets a value indicating if one of this node's descendents has invalid bounds.
            </summary>
            <value>The property is true if the bounds of of this node's descendents are invalid; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Rotation">
            <summary>
            Gets or sets the rotation applied by this node's transform in degrees.
            </summary>
            <value>The rotation in degrees</value>
            <remarks>
            This rotation affects this node and all it's descendents.  The value
            returned will be between 0 and 360,
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalRotation">
            <summary>
            Gets or sets a the total amount of rotation applied to this node by its own
            matrix together with the matrices of all its ancestors.
            </summary>
            <value>
            A value between 0 and 360 degrees, that represents the total
            rotation of this node.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Scale">
            <summary>
            Gets or sets the scale applied by this node's matrix.
            </summary>
            <value>
            A float value that represents the scale applied by this node's matrix.
            </value>
            <remarks>
            The scale affects this node and all its descendents.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalScale">
            <summary>
            Gets or sets the global scale that is being applied to this node by its matrix
            together with the matrices of all its ancestors.
            </summary>
            <value>The total scale of this node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Offset">
            <summary>
            Gets or sets the offset applied to this node by its matrix.
            </summary>
            <value>
            The offset applied to this node, specified in the parent
            coordinate system.
            </value>
            <remarks>
            The offset affects this node and all of its descendents and is specified
            in the parent coordinate system.  This property returns the values that
            are in the dx and dy positions of the matrix.  Setting this property
            directly sets those values.  Unlike <c>PNode.TranslateBy()</c>, this is not
            affected by the scale value of the matrix.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.OffsetX">
            <summary>
            Gets or sets the x offset applied to this node by its matrix.
            </summary>
            <value>
            The x offset applied to this node, specified in the parent
            coordinate system.
            </value>
            <remarks>
            The offset affects this node and all of its descendents and is
            specified in the parent coordinate system.  This returns the value
            that is in the dx position of the matrix.  Setting this property
            directly sets that value.  Unlike <c>PNode.TranslateBy()</c>, this is not
            affected by the scale value of the matrix.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.OffsetY">
            <summary>
            Gets or sets the y offset applied to this node by its matrix.
            </summary>
            <value>
            The y offset applied to this node, specified in the parent
            coordinate system.
            </value>
            <remarks>
            The offset affects this node and all of its descendents and is
            specified in the parent coordinate system.  This returns the value
            that is in the dx position of the matrix.  Setting this property
            directly sets that value.  Unlike <c>PNode.TranslateBy()</c>, this is not
            affected by the scale value of the matrix.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.GlobalTranslation">
            <summary>
            Gets or sets the global translation that is being applied to this node by its
            matrix together with the matrices of all its ancestors.
            </summary>
            <value>The desired global translation.</value>
            <remarks>
            Setting this property translates this node's matrix the required amount so that
            the node's global translation is as requested.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Matrix">
            <summary>
            Gets or sets the matrix associated with this node.
            </summary>
            <value>The matrix associated with this node.</value>
            <remarks>This property returns a copy of the node's matrix.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.MatrixReference">
            <summary>
            Gets a reference to the matrix associated with this node.
            </summary>
            <value>A reference to this node's matrix.</value>
            <remarks>
            The returned matrix should not be modified.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.InverseMatrix">
            <summary>
            Gets an inverted copy of the matrix associated with this node.
            </summary>
            <value>An inverted copy of this node's matrix.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PaintInvalid">
            <summary>
            Gets or sets a value indicating whether this node's paint is invalid,
            in which case the node needs to be repainted.
            </summary>
            <value>True if this node needs to be repainted; else false;</value>
            <remarks>
            If this property is set to true, the node will later be repainted.
            Note, this property is most often set internally.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildPaintInvalid">
            <summary>
            Gets or sets a value indicating whether this node has a child with
            invalid paint.
            </summary>
            <value>True if this node has a child with invalid paint, else false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Occluded">
            <summary>
            Returns true if this node is occluded by another node, in which case it
            should not be drawn.
            </summary>
            <value></value>
            <remarks>
            If Occluded returns true, then <c>FullPaint</c> won't call <c>Paint</c> 
            and so this node will not be drawn.  Note, it's children may be drawn
            though.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Visible">
            <summary>
            Gets or sets a value indicating whether this node is visible, that is
            if it will paint itself and its descendents.
            </summary>
            <value>True if this node and it's descendents are visible; else false.</value>
            <remarks>
            Setting <code>Visible</code> to false will not affect whether a node is pickable.
            That is, invisible nodes will still receive events.  To disable a node from receiving
            events, set the <see cref="P:UMD.HCIL.Piccolo.PNode.Pickable">Pickable</see> property explicitly.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Brush">
            <summary>
            Gets or sets the Brush used to paint this node.
            </summary>
            <value>The Brush used to paint this node.</value>
            <remarks>
            This property may be set to null, in which case paint will still be called,
            but the node will not be filled.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Pickable">
            <summary>
            Gets or sets a value indicating whether this node is pickable
            </summary>
            <value>True if this node is pickable; else false.</value>
            <remarks>
            Only pickable nodes can receive input events. Nodes are pickable by default.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildrenPickable">
            <summary>
            Gets or sets a value indicating whether the children of his node should be picked.
            </summary>
            <value>True if this node tries to pick it's children; else false.</value>
            <remarks>
            If this flag is false then this node will not try to pick its children. Children
            are pickable by default.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Parent">
            <summary>
            Gets or sets the parent of this node.
            </summary>
            <value>The node that this node descends directly from.</value>
            <remarks>
            This property will be null if the node has not been added to a parent yet.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildrenCount">
            <summary>
            Gets the number of children that this node has.
            </summary>
            <value>The number of children this node has.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Item(System.Int32)">
            <summary>
            Allows a PNode to be indexed directly to access it's children.
            </summary>
            <remarks>
            This provides a shortcut to indexing a node's children.  For example,
            <c>aNode.GetChild(i)</c> is equivalent to <c>aNode[i]</c>.  Note that using the
            indexor to set a child will remove the child currently at that index.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildrenReference">
            <summary>
            Gets a reference to the list used to manage this node’s children.
            </summary>
            <value>A reference to the list of children.</value>
            <remarks>This list should not be modified.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ChildrenEnumerator">
            <summary>
            Return an enumerator for this node’s direct descendent children.
            </summary>
            <value>An enumerator for this node's children.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.Root">
            <summary>
            Gets the root node (instance of PRoot).
            </summary>
            <value>The root node that this node descends from.</value>
            <remarks>
            If this node does not descend from a PRoot then null will be returned.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.AllNodes">
            <summary>
            Gets a list containing this node and all of its descendent nodes.
            </summary>
            <value>A list containing this node and all its descendents.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.ParamString">
            <summary>
            Gets a string representing the state of this node.
            </summary>
            <value>A string representation of this node's state.</value>
            <remarks>
            This property is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity">
            <summary>
            An activity that animates the target node's bounds from the source rectangle to
            the destination rectangle.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity.#ctor(UMD.HCIL.Piccolo.PNode,System.Drawing.RectangleF,System.Int64)">
            <summary>
            Constructs a new PNodeBoundsActivity
            </summary>
            <param name="target">The target node.</param>
            <param name="dst">The destination bounds.</param>
            <param name="duration">The duration of the activity.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity.OnActivityStarted">
            <summary>
            Overridden.  See
            <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityStarted">base.OnActivityStarted</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity.SetRelativeTargetValue(System.Single)">
            <summary>
            Overridden.  See
            <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.SetRelativeTargetValue(System.Single)">base.SetRelativeTargetValue</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity.OnActivityFinished">
            <summary>
            Overridden.  See
            <see cref="M:UMD.HCIL.Piccolo.Activities.PInterpolatingActivity.OnActivityFinished">base.OnActivityFinished</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PNodeBoundsActivity.Target">
            <summary>
            Gets the target node.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PNode.PNodeTransformTarget">
            <summary>
            A target for a transform activity that gets and sets the matrix of the specified PNode.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeTransformTarget.#ctor(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Constructs a new PNodeTransformTarget.
            </summary>
            <param name="target">The target node.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PNodeTransformTarget.Target">
            <summary>
            Gets the target node.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PNodeTransformTarget.Matrix">
            <summary>
            Implements the PTransformActivity.Target interface.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PNode.PNodeColorTarget">
            <summary>
            A target for a color activity that gets and sets the color of the specified PNode.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PNode.PNodeColorTarget.#ctor(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Constructs a new PNodeColorTarget
            </summary>
            <param name="target">The target node.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PNodeColorTarget.Target">
            <summary>
            Gets the target node.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PNode.PNodeColorTarget.Color">
            <summary>
            Implements the PColorActivity.Target interface.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PImage.PROPERTY_CODE_IMAGE">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.Nodes.PImage.ImageChanged">ImageChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether ImageChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PImage.PROPERTY_KEY_IMAGE">
            <summary>
            The key that identifies a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PImage.Image">Image</see>.
            </summary>
            <remarks>
            In a property change event both the old and new value will be set correctly
            to Image objects.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PImage.image">
            <summary>
            The underlying image object.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.#ctor">
            <summary>
            Constructs a new PImage with a <c>null</c> image.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.#ctor(System.Drawing.Image)">
            <summary>
            Constructs a new PImage wrapping the given <see cref="T:System.Drawing.Image">
            System.Drawing.Image</see>.
            </summary>
            <param name="newImage">The image to wrap.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.#ctor(System.String)">
            <summary>
            Constructs a new PImage by loading the given file and wrapping the
            resulting <see cref="T:System.Drawing.Image">System.Drawing.Image</see>.
            </summary>
            <param name="fileName">The filename of the image to load.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.#ctor(System.Uri)">
            <summary>
            Constructs a new PImage by loading the given URI and wrapping the
            resulting <see cref="T:System.Drawing.Image">System.Drawing.Image</see>.
            If the URI is <c>null</c>, create an empty PImage; this behavior is
            useful when fetching resources that may be missing.
            </summary>
            <param name="requestURI">The URI of the image to load.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">PNode.Paint</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this PImage and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.Nodes.PImage.ImageChanged">
            <summary>
            Occurs when there is a change in this node's
            <see cref="P:UMD.HCIL.Piccolo.Nodes.PImage.Image">Image</see>.
            </summary>
            <remarks>
            When a user attaches an event handler to the ImageChanged Event as in
            ImageChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_IMAGE in the Events list).
            When a user removes an event handler from the ImageChanged event as in 
            ImageChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_IMAGE in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PImage.Image">
            <summary>
            Gets or sets the image shown by this node.
            </summary>
            <value>The image shown by this node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PImage.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this node.
            </summary>
            <value>A string representation of this node's state.</value>
            <remarks>
            This property is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Nodes.PPath">
            <summary>
            <b>PPath</b> is a wrapper around a <see cref="T:System.Drawing.Drawing2D.GraphicsPath">
            System.Drawing.Drawing2D.GraphicsPath</see>.
            </summary>
            <remarks>
            The SetBounds method works by scaling the path to fit into the specified bounds.
            This normally works well, but if the specified base bounds get too small then it is
            impossible to expand the path shape again since all its numbers have tended to zero,
            so application code may need to take this into consideration. 
            <para>
            One option that applications have is to call <c>StartResizeBounds</c> before starting
            an interaction that may make the bounds very small, and calling <c>EndResizeBounds</c>
            when this interaction is finished. When this is done PPath will use a copy of the
            original path to do the resizing so the numbers in the path wont loose resolution.
            </para>
            <para>
            This class also provides methods for constructing common shapes using a GraphicsPath.
            </para>
            <para>
            <b>Performance Note</b>:  Checking for intersections between some paths and rectangles
            can be very slow.  This is due to the way .NET implements the IsVisible method.
            The problem generally occurs in extreme cases, when the path consists of numerous
            lines joined at very steep angles, which exhausts the intersection algorithm.
            One simple workaround is to break the figure up into several PPath nodes.  Also,
            remember to set the Brush to null if you do not want to a fill a path.  Otherwise,
            the path will be filled with a white brush, and picking will be more expensive.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PROPERTY_CODE_PEN">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.Nodes.PPath.PenChanged">PenChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether PenChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PROPERTY_CODE_PATH">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.Nodes.PPath.PathChanged">PathChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether PathChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PROPERTY_KEY_PEN">
            <summary>
            The key that identifies a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PPath.Pen">Pen</see>.
            </summary>
            <remarks>
            In a property change event both the old and new value will be set correctly
            to Pen objects.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PROPERTY_KEY_PATH">
            <summary>
            The key that identifies a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PPath.PathReference">Path</see>.
            </summary>
            <remarks>
            In a property change event the new value will be a reference to this node's path, but old
            value will always be null.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor">
            <summary>
            Constructs a new PPath with an empty path.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Constructs a new PPath wrapping the given
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath">
            System.Drawing.Drawing2D.GraphicsPath</see>.
            </summary>
            <param name="path">The path to wrap.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Constructs a new PPath with the given points and point types.
            </summary>
            <param name="pts">The points in the path.</param>
            <param name="types">The types of the points in the path.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Pen)">
            <summary>
            Constructs a new PPath with the given points, point types and pen.
            </summary>
            <param name="pts">The points in the path.</param>
            <param name="types">The types of the points in the path.</param>
            <param name="pen">The pen to use when rendering this node.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Constructs a new PPath with the given points, point types and fill mode.
            </summary>
            <param name="pts">The points in the path.</param>
            <param name="types">The types of the points in the path.</param>
            <param name="fillMode">The fill mode to use when rendering this node.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode,System.Drawing.Pen)">
            <summary>
            Constructs a new PPath with the given points, point types, fill mode and pen.
            </summary>
            <param name="pts">The points in the path.</param>
            <param name="types">The types of the points in the path.</param>
            <param name="fillMode">The fill mode to use when rendering this node.</param>
            <param name="pen">The pen to use when rendering this node.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CreateLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new PPath with the shape of a line specified by the given coordinates.
            </summary>
            <param name="x1">The x-coordinate of the start-point of the line.</param>
            <param name="y1">The y-coordinate of the start-point of the line.</param>
            <param name="x2">The x-coordinate of the end-point of the line.</param>
            <param name="y2">The y-coordinate of the end-point of the line.</param>
            <returns>The new PPath node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CreateRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new PPath with the shape of the rectangle specified by the given dimensions.
            </summary>
            <param name="x">The x-coordinate of the top left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The new PPath node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CreateEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new PPath with the shape of the ellipse specified by the given dimensions.
            </summary>
            <param name="x">
            The x-coordinate of the top left corner of the bounding box of the ellipse.
            </param>
            <param name="y">
            The y-coordinate of the top left corner of the bounding box of the ellipse.
            </param>
            <param name="width">The width of the ellipse.</param>
            <param name="height">The height of the ellipse.</param>
            <returns>The new PPath node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CreatePolygon(System.Drawing.PointF[])">
            <summary>
            Creates a new PPath with the shape of the polygon specified by the given dimension.
            </summary>
            <param name="points">The points in the desired polygon.</param>
            <returns>The new PPath node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.StartResizeBounds">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.StartResizeBounds">PNode.StartResizeBounds</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.EndResizeBounds">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.EndResizeBounds">PNode.EndResizeBounds</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.InternalUpdateBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Overridden.  Set the bounds of this path.
            </summary>
            <param name="x">The new x-coordinate of the bounds/</param>
            <param name="y">The new y-coordinate of the bounds.</param>
            <param name="width">The new width of the bounds.</param>
            <param name="height">The new height of the bounds.</param>
            <returns>True if the bounds have changed; otherwise, false.</returns>
            <remarks>
            This works by scaling the path to fit into the specified bounds.  This normally
            works well, but if the specified base bounds get too small then it is impossible
            to expand the path shape again since all its numbers have tended to zero, so
            application code may need to take this into consideration.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.Intersects(System.Drawing.RectangleF)">
            <summary>
            Returns true if this path intersects the given rectangle.
            </summary>
            <remarks>
            This method first checks if the interior of the path intersects with the rectangle.
            If not, the method then checks if the path bounding the pen stroke intersects with
            the rectangle.  If either of these cases are true, this method returns true.
            <para>
            <b>Performance Note</b>:  For some paths, this method can be very slow.  This is due
            to the implementation of IsVisible.  The problem usually occurs when many lines are
            joined at very steep angles.  See <see cref="T:UMD.HCIL.Piccolo.Nodes.PPath">PPath Overview</see> for workarounds.
            </para>
            </remarks>
            <param name="bounds">The rectangle to check for intersection.</param>
            <returns>True if this path intersects the given rectangle; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.PickAfterChildren(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  Performs picking in canvas coordinates if <see cref="P:UMD.HCIL.Piccolo.Nodes.PPath.PickMode">PickMode</see>
            is false.
            </summary>
            <remarks>
            Due to the implementation of the GraphicsPath object, picking in canvas coordinates
            is more accurate, but will introduce a significant performance hit.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.Intersects(System.Drawing.RectangleF,UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Returns true if this path intersects the given rectangle.
            </summary>
            <remarks>
            This method first checks if the interior of the path intersects with the rectangle.
            If not, the method then checks if the path bounding the pen stroke intersects with
            the rectangle.  If either of these cases are true, this method returns true.
            <para>
            <b>Performance Note</b>:  For some paths, this method can be very slow.  This is due
            to the implementation of IsVisible.  The problem usually occurs when many lines are
            joined at very steep angles.  See <see cref="T:UMD.HCIL.Piccolo.Nodes.PPath">PPath Overview</see> for workarounds.
            </para>
            </remarks>
            <param name="bounds">The rectangle to check for intersection.</param>
            <param name="matrix">
            A matrix object that specifies a transform to apply to the path and bounds before
            checking for an intersection.
            </param>
            <returns>True if this path intersects the given rectangle; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.SetTempRegion(System.Drawing.Drawing2D.GraphicsPath,UMD.HCIL.Piccolo.Util.PMatrix,System.Boolean)">
            <summary>
            Sets the temp region to the transformed path, widening the path if
            requested to do so.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.UpdateBoundsFromPath">
            <summary>
            This method is called to update the bounds whenever the underlying path changes.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">PNode.Paint</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            GraphicsPath.AddArc</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            GraphicsPath.AddBezier</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddClosedCurve(System.Drawing.PointF[])">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])">GraphicsPath.AddClosedCurve</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddCurve(System.Drawing.PointF[])">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])">GraphicsPath.AddCurve</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            GraphicsPath.AddEllipse</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)">GraphicsPath.AddLine</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">GraphicsPath.AddPath</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddPolygon(System.Drawing.PointF[])">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])">GraphicsPath.AddPolygon</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)">
            GraphicsPath.AddRectangle</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CloseFigure">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.CloseFigure">GraphicsPath.CloseFigure</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.CloseAllFigures">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures">GraphicsPath.CloseAllFigures</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.Reset">
            <summary>
            See <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Reset">GraphicsPath.Reset</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this PPath and all of its descendent nodes from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PPath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this PPath and all of its descendent nodes to the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
            <remarks>
            This node's parent is written out conditionally, that is it will only be written out
            if someone else writes it out unconditionally.
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.Nodes.PPath.PenChanged">
            <summary>
            Occurs when there is a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PPath.Pen">Pen</see>.
            </summary>
            <remarks>
            When a user attaches an event handler to the PenChanged Event as in
            PenChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_PEN in the Events list).
            When a user removes an event handler from the PenChanged event as in 
            PenChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_PEN in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.Pen">
            <summary>
            Gets or sets the pen used when rendering this node.
            </summary>
            <value>The pen used when rendering this node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.PickMode">
            <summary>
            Gets or sets the mode used to pick this node.
            <seealso cref="T:UMD.HCIL.Piccolo.Nodes.PPath.PathPickMode">PathPickMode</seealso>
            </summary>
            <value>The mode used to pick this node.</value>
        </member>
        <member name="E:UMD.HCIL.Piccolo.Nodes.PPath.PathChanged">
            <summary>
            Occurs when there is a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PPath.Pen">Pen</see>.
            </summary>
            <remarks>
            When a user attaches an event handler to the PathChanged Event as in
            PathChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_PATH in the Events list).
            When a user removes an event handler from the PathChanged event as in 
            PathChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_PATH in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.PathReference">
            <summary>
            Gets a reference to the underlying path object.
            </summary>
            <value>The underlying path object.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.FillMode">
            <summary>
            See <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode">GraphicsPath.FillMode</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.PathData">
            <summary>
            See <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathData">GraphicsPath.PathData</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.PointCount">
            <summary>
            See <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PointCount">GraphicsPath.PointCount</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PPath.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this node.
            </summary>
            <value>A string representation of this node's state.</value>
            <remarks>
            This property is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Nodes.PPath.PathPickMode">
            <summary>
            Represents the types of picking modes for a PPath object.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PathPickMode.Fast">
            <summary>
            Faster Picking.  Paths are picked in local coordinates.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PPath.PathPickMode.Accurate">
            <summary>
            Slower and more accurate picking.  Paths are picked in canvas
            coordinates.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Nodes.PText">
            <summary>
            <b>PText</b> is a multi-line text node.  The text will wrap based on the width
            of the node's bounds.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PText.PROPERTY_CODE_TEXT">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.Nodes.PText.TextChanged">TextChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether TextChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PText.PROPERTY_CODE_FONT">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.Nodes.PText.FontChanged">FontChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether FontChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PText.PROPERTY_KEY_TEXT">
            <summary>
            The key that identifies a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PText.Text">Text</see>.
            </summary>
            <remarks>
            In a property change event both the old and new value will be set correctly
            to String objects.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PText.PROPERTY_KEY_FONT">
            <summary>
            The key that identifies a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PText.Font">Font</see>.
            </summary>
            <remarks>
            In a property change event both the old and new value will be set correctly
            to Font objects.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Nodes.PText.DEFAULT_FONT">
            <summary>
            The default font to use when rendering this PText node.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.#ctor">
            <summary>
            Constructs a new PText with an empty string.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.#ctor(System.String)">
            <summary>
            Constructs a new PText with the given string.
            </summary>
            <param name="aText">The desired text string for this PText.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">PNode.Paint</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.InternalUpdateBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Overridden.  See <see cref="M:UMD.HCIL.Piccolo.PNode.InternalUpdateBounds(System.Single,System.Single,System.Single,System.Single)">PNode.InternalUpdateBounds</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.RecomputeBounds">
            <summary>
            Override this method to change the way bounds are computed. For example
            this is where you can control how lines are wrapped.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this PText and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Nodes.PText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this PText and all of its descendent nodes to the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
            <remarks>
            This node's parent is written out conditionally, that is it will only be written out
            if someone else writes it out unconditionally.
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.Nodes.PText.TextChanged">
            <summary>
            Occurs when there is a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PText.Text">Text</see>.
            </summary>
            <remarks>
            When a user attaches an event handler to the TextChanged Event as in
            TextChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_TEXT in the Events list).
            When a user removes an event handler from the TextChanged event as in 
            TextChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_TEXT in the Events list).
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.Nodes.PText.FontChanged">
            <summary>
            Occurs when there is a change in this node's <see cref="P:UMD.HCIL.Piccolo.Nodes.PText.Font">Font</see>.
            </summary>
            <remarks>
            When a user attaches an event handler to the FontChanged Event as in
            FontChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_FONT in the Events list).
            When a user removes an event handler from the FontChanged event as in 
            FontChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_FONT in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.ConstrainWidthToTextWidth">
            <summary>
            Gets or sets a value indicating whether this node changes its width to fit
            the width of its text.
            </summary>
            <value>
            True if this node changes its width to fit its text width; otherwise, false.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.ConstrainHeightToTextHeight">
            <summary>
            Gets or sets a value indicating whether this node changes its height to fit
            the height of its text.
            </summary>
            <value>
            True if this node changes its height to fit its text height; otherwise, false.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.Text">
            <summary>
            Gets or sets the text for this node.
            </summary>
            <value>This node's text.</value>
            <remarks>
            The text will be broken up into multiple lines based on the size of the text
            and the bounds width of this node.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.TextAlignment">
            <summary>
            Gets or sets a value specifiying the alignment to use when rendering this
            node's text.
            </summary>
            <value>The alignment to use when rendering this node's text.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.TextBrush">
            <summary>
            Gets or sets the brush to use when rendering this node's text.
            </summary>
            <value>The brush to use when rendering this node's text.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.Font">
            <summary>
            Gets or sets the font to use when rendering this node's text.
            </summary>
            <value>The font to use when rendering this node's text.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Nodes.PText.ParamString">
            <summary>
            Overridden.  Gets a string representing the state of this node.
            </summary>
            <value>A string representation of this node's state.</value>
            <remarks>
            This property is intended to be used only for debugging purposes, and the content
            and format of the returned string may vary between implementations. The returned
            string may be empty but may not be <c>null</c>.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.GraphicsPathSurrogate">
            <summary>
            <b>GraphicsPathSurrogate</b> is a serialization surrogate that defines how to read and write
            a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.GraphicsPathSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this GraphicsPath to the given SerializationInfo.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.GraphicsPathSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Read this GraphicsPath from the given SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate begins.
            </param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.MatrixSurrogate">
            <summary>
            <b>MatrixSurrogate</b> is a serialization surrogate that defines how to read and write
            a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.MatrixSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write this Matrix to the given SerializationInfo.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">The streaming context of this serialization operation.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.MatrixSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Read this Matrix from the given SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">The StreamingContext of this serialization operation.</param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate begins.
            </param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.NamespaceDoc">
            <summary>
            This namespace defines several utility classes that are likely
            to be useful for Piccolo applications.  These utility classes are
            also used within the implementation of Piccolo.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PActivityList">
            <summary>
            <b>PActivityList</b> is a typesafe list of PActivity objects.
            </summary>
            <remarks>
            This class is used by <see cref="T:UMD.HCIL.Piccolo.Activities.PActivityScheduler"/> to maintain a list activities
            currently being processed.  See <see cref="P:UMD.HCIL.Piccolo.Activities.PActivityScheduler.ActivitiesReference">
            PActivityScheduler.ActivitiesReference</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.#ctor">
            <summary>
            Constructs a new PActivityList.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.#ctor(UMD.HCIL.Piccolo.Util.PActivityList)">
            <summary>
            Initializes a new instance of the PActivityList class that contains activities copied
            from the specified list and that has the same initial capacity as the number
            of activities copied.
            </summary>
            <param name="list">The list whose activities are copied to the new list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.Contains(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Determines whether the list contains a specific activity.
            </summary>
            <param name="activity">The activity to locate in the list.</param>
            <returns>
            True if the activity is found in the list; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.IndexOf(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Determines the index of a specific activity in the list.
            </summary>
            <param name="activity">The activity to locate in the list.</param>
            <returns>
            The index of the activity if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.Add(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Adds a activity to the list.
            </summary>
            <param name="activity">The activity to add.</param>
            <returns>The position into which the new activity was inserted.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.AddRange(UMD.HCIL.Piccolo.Util.PActivityList)">
            <summary>
            Adds the activities of the given list to the end of this list.
            </summary>
            <param name="list">
            The list whose activities should be added to the end of this list.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of activities from the list.
            </summary>
            <param name="index">
            The zero-based starting index of the range of activities to remove.
            </param>
            <param name="count">
            The number of activities to remove.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.Remove(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Removes the first occurrence of a specific activity from the list.
            </summary>
            <param name="activity">The activity to remove from the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.Insert(System.Int32,UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Inserts a activity to the list at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which the activity should be inserted.
            </param>
            <param name="activity">The activity to insert into the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PActivityList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the activities in the entire list using the specified comparer.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing elements,
            or a null reference to use the IComparable implementation of
            each activity.
            </param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PActivityList.Item(System.Int32)">
            <summary>
            Allows a PActivityList to be indexed directly to access it's children.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PCameraList">
            <summary>
            <b>PCameraList</b> is a typesafe list of PCamera objects.
            </summary>
            <remarks>
            This class is used by <see cref="T:UMD.HCIL.Piccolo.PLayer"/> to maintain a list of the
            cameras viewing that layer.  See <see cref="P:UMD.HCIL.Piccolo.PLayer.CamerasReference">
            PLayer.CamerasReference</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.#ctor">
            <summary>
            Constructs a new PCameraList.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.#ctor(UMD.HCIL.Piccolo.Util.PCameraList)">
            <summary>
            Initializes a new instance of the PCameraList class that contains cameras copied
            from the specified list and that has the same initial capacity as the number
            of cameras copied.
            </summary>
            <param name="list">The list whose cameras are copied to the new list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.Contains(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Determines whether the list contains a specific camera.
            </summary>
            <param name="camera">The camera to locate in the list.</param>
            <returns>
            True if the camera is found in the list; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.IndexOf(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Determines the index of a specific camera in the list.
            </summary>
            <param name="camera">The camera to locate in the list.</param>
            <returns>
            The index of the camera if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.Add(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Adds a camera to the list.
            </summary>
            <param name="camera">The camera to add.</param>
            <returns>The position into which the new camera was inserted.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.AddRange(UMD.HCIL.Piccolo.Util.PCameraList)">
            <summary>
            Adds the cameras of the given list to the end of this list.
            </summary>
            <param name="list">
            The list whose cameras should be added to the end of this list.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of cameras from the list.
            </summary>
            <param name="index">
            The zero-based starting index of the range of cameras to remove.
            </param>
            <param name="count">
            The number of cameras to remove.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.Remove(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Removes the first occurrence of a specific camera from the list.
            </summary>
            <param name="camera">The camera to remove from the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.Insert(System.Int32,UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Inserts a camera to the list at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which the camera should be inserted.
            </param>
            <param name="camera">The camera to insert into the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PCameraList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the cameras in the entire list using the specified comparer.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing elements,
            or a null reference to use the IComparable implementation of
            each camera.
            </param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PCameraList.Item(System.Int32)">
            <summary>
            Allows a PCameraList to be indexed directly to access it's children.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PDebug">
            <summary>
            <b>PDebug</b> is used to set framework wide debugging flags.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.ScheduleProcessInputs">
            <summary>
            This method is called when the scene graph needs an update.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.ProcessInvalidate">
            <summary>
            This method is called just before the piccolo scene is invalidated.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.StartProcessingOutput">
            <summary>
            This method is called just before the Piccolo scene graph is painted.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.EndProcessingOutput(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            This method is called just after the Piccolo scene graph is painted.
            </summary>
            <param name="paintContext">The paint context used to paint the scene graph.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.StartProcessingInput">
            <summary>
            This method is called just before input events are processed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.EndProcessingInput">
            <summary>
            This method is called just after input events are processed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PDebug.ResetFPSTiming">
            <summary>
            Reset the variables used to track FPS.
            </summary>
            <remarks>
            If you reset seldom they you will get good average FPS values, if you reset more
            often only the frames recorded after the last reset will be taken into consideration.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugRegionManagement">
            <summary>
            Gets or sets a flag that indicates whether the current clip should be specially painted.
            </summary>
            <value>A flag that indicates whether the current clip should be specially painted.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugPaintCalls">
            <summary>
            Gets or sets a flag that indicates when the paint method causes an invalidate (which will
            create a soft infinite loop).
            </summary>
            <value>
            A flag that indicates when the paint method causes an invalidate (which will create
            a soft infinite loop).
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugPrintFrameRate">
            <summary>
            Gets or sets a flag that indicates whether the frame rate should be printed to the
            console.
            </summary>
            <value>
            a flag that indicates whether the frame rate should be printed to the console.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugPrintUsedMemory">
            <summary>
            Gets or sets a flag that indicates whether total memory usage should be printed to the
            console.
            </summary>
            <value>
            A flag that indicates whether total memory usage should be printed to the console.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugBounds">
            <summary>
            Gets or sets a flag that indicates whether the bounds of nodes should be specially
            painted.
            </summary>
            <value>
            A flag that indicates whether the bounds of nodes should be specially painted.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugFullBounds">
            <summary>
            Gets or sets a flag that indicates whether the full bounds of nodes should be specially
            painted.
            </summary>
            <value>
            A flag that indicates whether the full bounds of nodes should be specially painted.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.PrintResultsFrameRate">
            <summary>
            Gets or sets a flag that specifies the interval at which to print debug information to
            the console.
            </summary>
            <value>
            A flag that specifies the interval at which to print debug information to the console.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugThreading">
            <summary>
            Gets or sets a flag that checks for whether the scene graph is modified outside the event thread.
            Piccolo is not thread safe, and so no part of the scene graph can be modified outside the event thread.
            It takes time to check, so only turn this flag on for debugging.  If the scene graph is modified
            outside the event thread, a message will be printed out.
            </summary>
            <value>
            A flag that indicates whether the scene graph is checked to make sure it is modified only within the
            event thread.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.ProcessingOutput">
            <summary>
            Gets or sets a flag that indicates whether Piccolo is in the process of painting.
            </summary>
            <value>True if Piccolo is currently painting; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.DebugPaintColor">
            <summary>
            Gets the color used for painting debugging information.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.TotalFPS">
            <summary>
            Gets the number of frames currently being processed and painted per second.
            </summary>
            <value>The number of frames processed and painted per second.</value>
            <remarks>
            Note that since piccolo doesn’t paint continuously this rate will be slow
            unless you are interacting with the system or have activities scheduled.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.InputFPS">
            <summary>
            Gets the number of frames per second used to process input events and
            activities.
            </summary>
            <value>
            The number of frames per second used to process input events and activities.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.OutputFPS">
            <summary>
            Gets the number of frames per second used to paint graphics to the screen.
            </summary>
            <value>
            The number of frames per second used to paint graphics to the screen.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.FramesProcessed">
            <summary>
            Gets the number of frames that have been processed since the last time
            ResetFPSTiming was called.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PDebug.ApproximateUsedMemory">
            <summary>
            Gets the number of bytes currently thought to be allocated.
            </summary>
            <value>The number of bytes currently thought to be allocated.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PLayerList">
            <summary>
            <b>PLayerList</b> is a typesafe list of PLayer objects.
            </summary>
            <remarks>
            This class is used by <see cref="T:UMD.HCIL.Piccolo.PCamera"/> to maintain a list of the
            layers that camera is viewing.  See <see cref="P:UMD.HCIL.Piccolo.PCamera.LayersReference">
            PCamera.LayersReference</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.#ctor">
            <summary>
            Constructs a new PLayerList.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.#ctor(UMD.HCIL.Piccolo.Util.PLayerList)">
            <summary>
            Initializes a new instance of the PLayerList class that contains layers copied
            from the specified list and that has the same initial capacity as the number
            of layers copied.
            </summary>
            <param name="list">The list whose layers are copied to the new list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.Contains(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Determines whether the list contains a specific layer.
            </summary>
            <param name="layer">The layer to locate in the list.</param>
            <returns>
            True if the layer is found in the list; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.IndexOf(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Determines the index of a specific layer in the list.
            </summary>
            <param name="layer">The layer to locate in the list.</param>
            <returns>
            The index of the layer if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.Add(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Adds a layer to the list.
            </summary>
            <param name="layer">The layer to add.</param>
            <returns>The position into which the new layer was inserted.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.AddRange(UMD.HCIL.Piccolo.Util.PLayerList)">
            <summary>
            Adds the layers of the given list to the end of this list.
            </summary>
            <param name="list">
            The list whose layers should be added to the end of this list.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of layers from the list.
            </summary>
            <param name="index">
            The zero-based starting index of the range of layers to remove.
            </param>
            <param name="count">
            The number of layers to remove.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.Remove(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Removes the first occurrence of a specific layer from the list.
            </summary>
            <param name="layer">The layer to remove from the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.Insert(System.Int32,UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Inserts a layer to the list at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which the layer should be inserted.
            </param>
            <param name="layer">The layer to insert into the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PLayerList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the layers in the entire list using the specified comparer.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing elements,
            or a null reference to use the IComparable implementation of
            each layer.
            </param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PLayerList.Item(System.Int32)">
            <summary>
            Allows a PLayerList to be indexed directly to access it's children.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PMatrix">
            <summary>
            <b>PMatrix</b> is a wrapper around a <see cref="T:System.Drawing.Drawing2D.Matrix">
            System.Drawing.Drawing2D.Matrix</see> that includes several convenience methods.  
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor">
            <summary>
            Constructs a new PMatrix initialized to the identity matrix.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])">
            <summary>
            Constructs a new PMatrix initialized to the geometric transform defined by the
            specified rectangle and array of points.
            </summary>
            <param name="rect">
            A <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle
            to be transformed.
            </param>
            <param name="plgpts">
            An array of three <see cref="T:System.Drawing.Point"/> structures that represents
            the points of a parallelogram to which the upper-left, upper-right, and lower-left
            corners of the rectangle is to be transformed. The lower-right corner of the
            parallelogram is implied by the first three corners. 
            </param>
            <remarks>
            This method initializes the new PMatrix such that it represents the geometric
            transform that maps the rectangle specified by the rect parameter to the
            parallelogram defined by the three points in the plgpts parameter. The upper-left
            corner of the rectangle is mapped to the first point in the plgpts array, the
            upper-right corner is mapped to the second point, and the lower-left corner is
            mapped to the third point. The lower-left point of the parallelogram is implied
            by the first three.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])">
            <summary>
            Constructs a new PMatrix initialized to the geometric transform defined by the
            specified rectangle and array of points.
            </summary>
            <param name="rect">
            A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle
            to be transformed.
            </param>
            <param name="plgpts">
            An array of three <see cref="T:System.Drawing.PointF"/> structures that represents
            the points of a parallelogram to which the upper-left, upper-right, and lower-left
            corners of the rectangle is to be transformed. The lower-right corner of the
            parallelogram is implied by the first three corners. 
            </param>
            <remarks>
            This method initializes the new PMatrix such that it represents the geometric
            transform that maps the rectangle specified by the rect parameter to the
            parallelogram defined by the three points in the plgpts parameter. The upper-left
            corner of the rectangle is mapped to the first point in the plgpts array, the
            upper-right corner is mapped to the second point, and the lower-left corner is
            mapped to the third point. The lower-left point of the parallelogram is implied
            by the first three.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new PMatrix initialized with the specified elements.
            </summary>
            <param name="m11">
            The value in the first row and first column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </param>
            <param name="m12">
            The value in the first row and second column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </param>
            <param name="m21">
            The value in the second row and first column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>. 
            </param>
            <param name="m22">
            The value in the second row and second column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </param>
            <param name="dx">
            The value in the third row and first column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>. 
            </param>
            <param name="dy">
            The value in the third row and second column of the new <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>. 
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Constructs a new PMatrix initialized to the values in the given
            <see cref="T:System.Drawing.Drawing2D.Matrix">Matrix</see>.
            </summary>
            <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix">Matrix</see>
            to use when initializing this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </summary>
            <returns>The <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object that his method creates.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Multiply(UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Multiplies this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by the specified <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>
            object by prepending the specified Matrix.
            </summary>
            <param name="matrix">
            The <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by which this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object is to be
            multiplied.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Invert">
            <summary>
            Inverts this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object, if it is invertible.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Reset">
            <summary>
            Resets this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to have the elements of the identity matrix.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.TranslateBy(System.Single,System.Single)">
            <summary>
            Applies the specified translation vector (dx and dy) to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>
            object by prepending the translation vector.
            </summary>
            <param name="dx">
            The x value by which to translate this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </param>
            <param name="dy">
            The y value by which to translate this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.ScaleBy(System.Single)">
            <summary>
            Applies the specified scale vector to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by
            prepending the scale vector.
            </summary>
            <param name="scale">
            The value by which to scale this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> along both axes.
            </param>
            <remarks>
            This value will be applied to the current scale value of the matrix.  This is not
            the same as setting the <see cref="P:UMD.HCIL.Piccolo.Util.PMatrix.Scale"/> directly.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.ScaleBy(System.Single,System.Single)">
            <summary>
            Applies the specified scale vector to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by
            prepending the scale vector.
            </summary>
            <param name="scaleX">
            The value by which to scale this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> in the x-axis direction. 
            </param>
            <param name="scaleY">
            The value by which to scale this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> in the y-axis direction. 
            </param>
            <remarks>
            This value will be applied to the current scale value of the matrix.  This is not
            the same as setting the <see cref="P:UMD.HCIL.Piccolo.Util.PMatrix.Scale"/> directly.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.ScaleBy(System.Single,System.Single,System.Single)">
            <summary>
            Scale about the specified point.  Applies the specified scale vector to this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by translating to the given point before prepending the
            scale vector.
            </summary>
            <param name="scale">
            The value by which to scale this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> along both axes, around the point
            (x, y).
            </param>
            <param name="x">
            The x-coordinate of the point to scale about.
            </param>
            <param name="y">
            The y-coordinate of the point to scale about.
            </param>
            <remarks>
            This value will be applied to the current scale value of the matrix.  This is not
            the same as setting the <see cref="P:UMD.HCIL.Piccolo.Util.PMatrix.Scale"/> directly.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.RotateBy(System.Single)">
            <summary>
            Prepend to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object a clockwise rotation, around the origin
            and by the specified angle.
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </summary>
            <param name="theta">The angle of the rotation, in degrees.</param>
            <remarks>
            This value will be applied to the current rotation value of the matrix.  This is not
            the same as setting the <see cref="P:UMD.HCIL.Piccolo.Util.PMatrix.Rotation"/> directly.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.RotateBy(System.Single,System.Single,System.Single)">
            <summary>
            Applies a clockwise rotation about the specified point to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>
            object by prepending the rotation.
            </summary>
            <param name="theta">The angle of the rotation, in degrees.</param>
            <param name="x">The x-coordinate of the point to rotate about.</param>
            <param name="y">The y-coordinate of the point to rotate about.</param>
            <remarks>
            This value will be applied to the current rotation value of the matrix.  This is not
            the same as setting the <see cref="P:UMD.HCIL.Piccolo.Util.PMatrix.Rotation"/> directly.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.ShearBy(System.Single,System.Single)">
            <summary>
            Applies the specified shear vector to this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object by prepending
            the shear transformation.
            </summary>
            <param name="shearX">The horizontal shear factor.</param>
            <param name="shearY">The vertical shear factor.</param>
            <remarks>
            The transformation applied in this method is a pure shear only if one of the parameters
            is 0. Applied to a rectangle at the origin, when the shearY factor is 0, the
            transformation moves the bottom edge horizontally by shearX times the height of the
            rectangle. When the shearX factor is 0, it moves the right edge vertically by shearY times
            the width of the rectangle. Caution is in order when both parameters are nonzero, because
            the results are hard to predict. For example, if both factors are 1, the transformation is
            singular (hence noninvertible), squeezing the entire plane to a single line.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Transform(System.Drawing.PointF)">
            <summary>
            Applies the geometric transform represented by this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the
            given point.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Transform(System.Drawing.SizeF)">
            <summary>
            Applies the geometric transform represented by this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the
            given size.
            </summary>
            <param name="size">The size to be transformed.</param>
            <returns>The transformed size.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Applies the geometric transform represented by this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to all
            of the points in the given array.
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </summary>
            <param name="pts">The array of points to transform.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Applies only the scale and rotate components of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to all
            of the points in the given array.
            </summary>
            <param name="pts">The array of points to transform.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.Transform(System.Drawing.RectangleF)">
            <summary>
            Applies the geometric transform represented by this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the
            given rectangle.
            </summary>
            <param name="rect">The rectangle to transform.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.InverseTransform(System.Drawing.PointF)">
            <summary>
            Applies the inverse of the geometric transform represented by this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the given point.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.InverseTransform(System.Drawing.SizeF)">
            <summary>
            Applies the inverse of the geometric transform represented by this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the given size.
            </summary>
            <param name="size">The size to be transformed.</param>
            <returns>The transformed size.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.InverseTransform(System.Drawing.RectangleF)">
            <summary>
            Applies the inverse of the geometric transform represented by this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object to the given rectangle.
            </summary>
            <param name="rect">The rectangle to transform.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this PMatrix from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PMatrix.ToString">
            <summary>
            Overridden.  Returns a string representation of this object for debugging
            purposes.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.Matrix">
            <summary>
            Gets or sets the underlying matrix object.
            </summary>
            <value>The underlying matrix object.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.MatrixReference">
            <summary>
            Gets a reference to the underlying matrix object.
            </summary>
            <value>A Reference to the underlying matrix object.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.Elements">
            <summary>
            Gets an array of floating-point values that represents the elements of this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </summary>
            <value>
            An array of floating-point values that represents the elements of this
            <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </value>
            <remarks>
            The elements m11, m12, m21, m22, dx, dy of the <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object are
            represented by the values in the array in that order.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.IsIdentity">
            <summary>
            Gets a value indicating whether this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object is the identity
            matrix.
            </summary>
            <value>This property is true if this Matrix is identity; otherwise, false.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.IsInvertible">
            <summary>
            Gets a value indicating whether this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object is invertible.
            </summary>
            <value>
            This property is true if this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> is invertible; otherwise, false.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.OffsetX">
            <summary>
            Gets or sets the x translation value (the dx value, or the element in the third
            row and first column) of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </summary>
            <value>The x translation value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.OffsetY">
            <summary>
            Gets or sets the y translation value (the dy value, or the element in the third
            row and second column) of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/> object.
            </summary>
            <value>The y translation value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.Scale">
            <summary>
            Gets or sets the scale value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </summary>
            <value>The scale value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.Rotation">
            <summary>
            Gets or sets the rotation value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>, in degrees.
            </summary>
            <value>
            The rotation value of this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>, in degrees.  The value will be
            between 0 and 360.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PMatrix.ElementString">
            <summary>
            Gets a string representation of the elements in this <see cref="T:UMD.HCIL.Piccolo.Util.PMatrix"/>.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PNodeFilter">
            <summary>
            <b>PNodeFilter</b> is a interface that filters (accepts or rejects) nodes.
            </summary>
            <remarks>
            The main use of this class is to retrieve all the children of a node the meet
            some criteria by using the method <see cref="M:UMD.HCIL.Piccolo.PNode.GetAllNodes(UMD.HCIL.Piccolo.Util.PNodeFilter,UMD.HCIL.Piccolo.Util.PNodeList)">
            PNode.GetAllNodes</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeFilter.Accept(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the filter should accept the given node.
            </summary>
            <param name="aNode">The node to accept or reject.</param>
            <returns>
            True if the filter should accept the give node; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeFilter.AcceptChildrenOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns true if the filter should test the children of the given node for
            acceptance.
            </summary>
            <param name="aNode">The node whose children we must decide whether to test.</param>
            <returns>
            True if the filter should test the children of the given node; otherwise, false.
            </returns>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PNodeList">
            <summary>
            <b>PNodeList</b> is a typesafe list of PNode objects.
            </summary>
            <remarks>
            This class is used by <see cref="T:UMD.HCIL.Piccolo.PNode"/> to maintain a list of it's
            children.  See <see cref="P:UMD.HCIL.Piccolo.PNode.ChildrenReference">
            PNode.ChildrenReference</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.#ctor">
            <summary>
            Constructs a new PNodeList.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.#ctor(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Initializes a new instance of the PNodeList class that contains nodes copied
            from the specified list and that has the same initial capacity as the number
            of nodes copied.
            </summary>
            <param name="list">The list whose nodes are copied to the new list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.Contains(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Determines whether the list contains a specific node.
            </summary>
            <param name="node">The node to locate in the list.</param>
            <returns>
            True if the node is found in the list; otherwise, false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.IndexOf(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Determines the index of a specific node in the list.
            </summary>
            <param name="node">The node to locate in the list.</param>
            <returns>
            The index of the node if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.Add(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Adds a node to the list.
            </summary>
            <param name="node">The node to add.</param>
            <returns>The position into which the new node was inserted.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.AddRange(UMD.HCIL.Piccolo.Util.PNodeList)">
            <summary>
            Adds the nodes of the given list to the end of this list.
            </summary>
            <param name="list">
            The list whose nodes should be added to the end of this list.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of nodes from the list.
            </summary>
            <param name="index">
            The zero-based starting index of the range of nodes to remove.
            </param>
            <param name="count">
            The number of nodes to remove.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.Remove(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Removes the first occurrence of a specific node from the list.
            </summary>
            <param name="node">The node to remove from the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.Insert(System.Int32,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Inserts a node to the list at the specified position.
            </summary>
            <param name="index">
            The zero-based index at which the node should be inserted.
            </param>
            <param name="node">The node to insert into the list.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PNodeList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the nodes in the entire list using the specified comparer.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing elements,
            or a null reference to use the IComparable implementation of
            each node.
            </param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PNodeList.Item(System.Int32)">
            <summary>
            Allows a PNodeList to be indexed directly to access it's children.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.RenderQuality">
            <summary>
            This enumeration is used by the <see cref="T:UMD.HCIL.Piccolo.Util.PPaintContext"/> class.  It represents the
            quality level with which the piccolo scene graph will be rendered.
            </summary>
            <remarks>Lower quality rendering is faster.</remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.RenderQuality.LowQuality">
            <summary>
            The scene graph will be rendered in low quality mode.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.RenderQuality.HighQuality">
            <summary>
            The scene graph will be rendered in high quality mode.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PPaintContext">
            <summary>
            <b>PPaintContext</b> is used by piccolo nodes to paint themselves on the screen.
            </summary>
            <remarks>
            This class wraps a Graphics object to implement painting.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.CURRENT_PAINT_CONTEXT">
            <summary>
            The current PPaintContext.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.TEMP_MATRIX">
            <summary>
            A temporary matrix used to calculate the scale.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.PTS">
            <summary>
            A temporary array of points used to calculate the scale.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.graphics">
            <summary>
            The graphics object used for rendering.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.canvas">
            <summary>
            The canvas that this paint context will render on.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.renderQuality">
            <summary>
            Rendering hints for this paint context.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.clipStack">
            <summary>
            A stack of the clip regions that the paint context applies.  These regions are not
            affected by the matrices in the transform stack.
            </summary>
            <remarks>
            The last clip pushed will be the clip applied before the current clip.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.localClipStack">
            <summary>
            A stack of rectangles representing the local clips.  These values will be affected by
            the matrices in the transform stack.
            </summary>
            <remarks>The last clip pushed will be the current clip.</remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.cameraStack">
            <summary>
            A stack of the cameras being painted.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPaintContext.transformStack">
            <summary>
            A stack of the transforms that the paint context applies.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.#ctor(System.Drawing.Graphics,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Constructs a new PPaintContext.
            </summary>
            <param name="graphics">
            The graphics context to associate with this paint context.
            </param>
            <param name="canvas">The canvas that the paint context will render on.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.InitializeStacks">
            <summary>
            Override this method to modify the initial state of the context attribute stacks.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PushCamera(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Pushes the given camera onto the camera stack.
            </summary>
            <param name="camera">The camera to push.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PopCamera(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Pops a camera from the camera stack.
            </summary>
            <param name="camera">The camera to pop.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PushClip(System.Drawing.Region)">
            <summary>
            Pushes the current clip onto the clip stack and sets clip of the graphics context to
            the intersection of the current clip and the given clip.
            </summary>
            <remarks>
            The intersection of the current local clip and the new local clip is also pushed onto
            the local clip stack.
            </remarks>
            <param name="aClip">The clip to push.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PopClip">
            <summary>
            Pops a clip from both the clip stack and the local clip stack and sets the clip of the
            graphics context to the clip popped from the clip stack.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PushMatrix(UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Pushes the given matrix onto the transform stack.
            </summary>
            <param name="matrix">The matrix to push.</param>
            <remarks>
            This method also applies the matrix to the graphics context and the current local clip.
            The new local clip is then pushed onto the local clip stack.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PopMatrix">
            <summary>
            Pops a matrix from the transform stack.
            </summary>
            <remarks>This method also pops a clip from the local clip stack.</remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.OnLowRenderQuality(System.Drawing.Graphics,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            This method is called when the render quality is set to low.
            </summary>
            <param name="graphics">
            The graphics context associated with this paint context.
            </param>
            <param name="canvas">The canvas that this paint context will render on.</param>
            <remarks>
            Override this method to change how the low render quality is set.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.OnHighRenderQuality(System.Drawing.Graphics,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            This method is called when the render quality is set to high.
            </summary>
            <param name="graphics">
            The graphics context associated with this paint context.
            </param>
            <param name="canvas">The canvas that this paint context will render on.</param>
            <remarks>
            Override this method to change how the high render quality is set.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPaintContext.PaintClipRegion(System.Drawing.Brush)">
            <summary>
            Override this method to change the way the clipping region is painted when the debug
            region management flag is set.
            </summary>
            <param name="brush">The brush to use for painting the clipping region.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.Graphics">
            <summary>
            Gets the graphics context associated with this paint context.
            </summary>
            <value>The graphics context associated with this paint context.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.Canvas">
            <summary>
            Gets the canvas that this paint context renders on.
            </summary>
            <value>The canvas that this paint context renders on.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.LocalClip">
            <summary>
            Gets the current local clip.
            </summary>
            <value>The current local clip.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.Scale">
            <summary>
            Gets the scale value applied by the graphics context associated with this paint
            context.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.Camera">
            <summary>
            Gets the bottom-most camera on the camera stack (the last camera pushed).
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.RenderQuality">
            <summary>
            Sets the rendering hints for this paint context. The render quality is most often set
            by the rendering PCanvas.  Use <see cref="P:UMD.HCIL.Piccolo.PCanvas.AnimatingRenderQuality">
            PCanvas.AnimatingRenderQuality</see> and <see cref="P:UMD.HCIL.Piccolo.PCanvas.InteractingRenderQuality">
            PCanvas.InteractingRenderQuality</see> to set these values.
            </summary>
            <value>The rendering hints for this paint context.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPaintContext.GridFitText">
            <summary>
            Gets a value indicating if text will be rendered with hinting.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PPickPath">
            <summary>
            <b>PPickPath</b> represents an ordered list of nodes that have been picked.
            </summary>
            <remarks>
            The topmost ancestor node is the last node in the list (and should be a camera), 
            the bottommost child node is at the front of the list.  It is this bottom node that 
            is given first chance to handle events, and that any active event handlers usually
            manipulate.
            <para>
            Note that because of layers (which can be picked by multiple camera's) the ordered
            list of nodes in a pick path do not all share a parent child relationship with the
            nodes in the list next to them.  This means that the normal LocalToGlobal methods don't
            work when trying to transform geometry up and down the pick path, instead you should
            use the pick path's CanvasToLocal methods to get the mouse event points into your local
            coord system.
            </para>
            <para>
            Note that <see cref="T:UMD.HCIL.Piccolo.Event.PInputEventArgs"/> wraps most of the useful PPickPath methods, so
            often you can use a <see cref="T:UMD.HCIL.Piccolo.Event.PInputEventArgs"/> directly instead of accessing its
            pick path.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PPickPath.CURRENT_PICK_PATH">
            <summary>
            The current PPickPath.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.#ctor(UMD.HCIL.Piccolo.PCamera,System.Drawing.RectangleF)">
            <summary>
            Constructs a new PPickPath.
            </summary>
            <param name="aCamera">The camera that originated the pick action.</param>
            <param name="aScreenPickBounds">The bounds being picked.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.AcceptsNode(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Determines whether or not the specified node will be included when picking.
            </summary>
            <param name="node">The node to exclude or include.</param>
            <returns>True if the node should be included; otherwise, false.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.PushNode(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Pushes the given node onto the node stack.
            </summary>
            <param name="aNode">The node to push.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.PopNode(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Pops a node from the node stack.
            </summary>
            <param name="aNode">The node to pop.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.PushMatrix(UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Pushes the given matrix onto the matrix stack.
            </summary>
            <param name="aMatrix">The matrix to push.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.PopMatrix(UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Pops a matrix from the matrix stack.
            </summary>
            <param name="aMatrix">The matrix to pop.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.GetPathTransformTo(UMD.HCIL.Piccolo.PNode)">
            <summary>
            Returns the product of the matrices from the top-most ancestor node (the last node
            in the list) to the given node.
            </summary>
            <param name="nodeOnPath">
            The bottom-most node in the path for which the matrix product will be computed.
            </param>
            <returns>
            The product of the matrices from the top-most node to the given node.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.ProcessEvent(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Gives each node in the pick path, starting with the bottom-most one, a chance to
            handle the event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.CanvasToLocal(System.Drawing.PointF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Convert the given point from canvas coordinates, down the pick path (and through any
            camera view transforms applied to the path) to the local coordinates of the given node.
            </summary>
            <param name="canvasPoint">The point in canvas coordinates.</param>
            <param name="nodeOnPath">
            The node for which the local coordinates will be computed.
            </param>
            <returns>The point in the local coordinates of the given node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.CanvasToLocal(System.Drawing.SizeF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Convert the given size from canvas coordinates, down the pick path (and through any
            camera view transforms applied to the path) to the local coordinates of the given node.
            </summary>
            <param name="canvasSize">The size in canvas coordinates.</param>
            <param name="nodeOnPath">
            The node for which the local coordinates will be computed.
            </param>
            <returns>The size in the local coordinates of the given node.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PPickPath.CanvasToLocal(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Convert the given rectangle from canvas coordinates, down the pick path (and through
            any camera view transforms applied to the path) to the local coordinates of the given
            node.
            </summary>
            <param name="canvasRectangle">The rectangle in canvas coordinates.</param>
            <param name="nodeOnPath">
            The node for which the local coordinates will be computed.
            </param>
            <returns>The rectangle in the local coordinates of the given node.</returns>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.PickBounds">
            <summary>
            Gets the current pick bounds.
            </summary>
            <value>The current pick bounds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.PickedNode">
            <summary>
            Gets the bottom-most node on the pick path node stack.  That is the last node to
            be picked.
            </summary>
            <value>The bottom-most node on the pick path node stack.</value>
            <remarks>This is the node that will have the first chance to handle events.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.NextPickedNode">
            <summary>
            Gets the next node that will be picked after the current picked node.
            </summary>
            <remarks>
            If you have two overlaping children nodes then the topmost child will
            always be picked first, use this method to find the covered child.
            </remarks>
            <value>
            The next node that will be picked after the current node, or null when
            no more nodes will be picked.
            </value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.TopCamera">
            <summary>
            Gets the top-most camera on the pick path.  This is the camera that originated the
            pick action.
            </summary>
            <value>The top-most camera on the pick path.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.BottomCamera">
            <summary>
            Gets the bottom-most camera on the pick path.  This may be different then the top camera
            if internal cameras are in use.
            </summary>
            <value>The bottom-most camera on the pick path.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.NodeStackReference">
            <summary>
            Gets a reference to the pick path node stack.
            </summary>
            <value>A reference ot the pick path node stack.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PPickPath.Scale">
            <summary>
            Gets the total combined scale of the pick path matrices.
            </summary>
            <value>The total combined scale of the pick path matrices.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PTuple">
            <summary>
            <b>PTuple</b> is used to associate a node with a matrix.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PTuple.node">
            <summary>
            The node to associate with the matrix.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PTuple.matrix">
            <summary>
            The matrix to associate with the node.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PTuple.#ctor(UMD.HCIL.Piccolo.PNode,UMD.HCIL.Piccolo.Util.PMatrix)">
            <summary>
            Creates a new PTuple that associates the given node witht he given matrix.
            </summary>
            <param name="n">The node to associate with the matrix.</param>
            <param name="m">The matrix to associate with the node.</param>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PStream">
            <summary>
            <b>PStream</b> wraps a <see cref="T:System.IO.Stream">System.IO.Stream</see> to handle optional
            elements.
            </summary>
            <remarks>
            This is similar to the concept of "weak references", but applied to object
            serialization rather than garbage collection.  Here, PStream provides a method,
            <see cref="M:UMD.HCIL.Piccolo.Util.PStream.WriteConditionalObject(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)"/>, which only serializes the specified object if
            there is a strong reference (if it has already been written) to that object elsewhere
            in the stream.
            <para>
            To discover strong references to objects, PStream uses a two-phase writing process.
            First, a "discovery" phase is used to find out what objects are about to be serialized.
            This works by effectively serializing the object graph to /dev/null, recording which
            objects are unconditionally written using the standard <c>GetObjectData</c> method.  Then,
            in the second "write" phase, PStream actually serializes the data to the stream.  During
            this phase, calls to <see cref="M:UMD.HCIL.Piccolo.Util.PStream.WriteConditionalObject(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)"/> will only write the specified
            object if the object was found to be serialized during the discovery stage.  If the
            object was not recorded during the discovery stage, a null value is unconditionally
            written in place of the object.
            </para>
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new PStream.
            </summary>
            <param name="aStream">The stream to to write to.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.WriteObjectTree(System.Runtime.Serialization.IFormatter,System.Object)">
            <summary>
            Serializes the object tree to the underlying stream using the given formatter.
            </summary>
            <param name="formatter">The formatter to use when serializing the object.</param>
            <param name="aRoot">The object to serialize.</param>
            <remarks>
            Applications should call this method to serialize a part of the scene graph.  The nodes
            in the scene graph may then choose to conditionally serialize their references by calling
            WriteConditionalObject from their <c>GetObjectData</c> method.  For example, all nodes
            implemented in the piccolo framework conditionally serialize their parents so that
            serializing a node won't pull in the entire object graph.  See
            <see cref="M:UMD.HCIL.Piccolo.PNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">PNode.GetObjectData</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.ReadObjectTree(System.Runtime.Serialization.IFormatter)">
            <summary>
            Deserializes the object tree from the underlying stream using the given formatter.
            </summary>
            <param name="formatter">The formatter to use when deserializing the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.WriteConditionalObject(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)">
            <summary>
            Conditionally adds the given object to the given <see cref="T:System.Runtime.Serialization.SerializationInfo">
            System.Runtime.Serialization.SerializationInfo</see>, using the specified name.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to add the object to.</param>
            <param name="name">
            The name to use when adding the object to the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </param>
            <param name="obj">The object to add to the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <remarks>
            This method only serializes the specified object if there is a strong reference (if
            it has already been written) to that object elsewhere in the stream.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordUnconditionallyWritten(System.Object,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Performs a discovery phase to find out which objects are about to be serialized.
            </summary>
            <param name="aRoot">The object to perform the discover phase on.</param>
            <param name="surrogateSelector">
            The surrogate selector to check when serializing the object graph.
            </param>
            <remarks>
            This works by effectively serializing the object graph to /dev/null, recording which
            objects are unconditionally written using the standard
            <c>GetObjectData</c> method. 
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogateSelector">
            <summary>
            <b>RecordWrittenSurrogateSelector</b> is a surrogate selector that will always return
            a <see cref="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate"/>, regardless of the type specified.
            </summary>
            <remarks>
            This class is used in the discovery phase.  The binary formatter is given this surrogate
            selector so that each time an object is serialized, the
            <see cref="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method will be called.  This makes it
            possible to avoid registerring every type in the namespace with a standard
            <see cref="T:System.Runtime.Serialization.SurrogateSelector">System.Runtime.Serialization.SurrogateSelector</see>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogateSelector.#ctor(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Constructs a new RecordWrittenSurrogateSelector.
            </summary>
            <param name="actualSurrogateSelector">
            The actual surrogate selector used to get the actual surrogate for the specified
            type.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <summary>
            Returns a <see cref="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate"/>, that wraps the surrogate for a
            particular type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which the surrogate is requested.</param>
            <param name="context">The streaming context.</param>
            <param name="selector">The surrogate to use.</param>
            <returns>
            A <see cref="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate"/> that wraps the surrogate for the given type.
            </returns>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate">
            <summary>
            <b>RecordWrittenSurrogate</b> is a serialization surrogate that is used during the
            discovery phase to record which objects are unconditionally written.
            </summary>
            <remarks>
            This surrogate will always be returned by the <see cref="T:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogateSelector"/>
            regardless of which type is specified.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate.#ctor(System.Runtime.Serialization.ISerializationSurrogate)">
            <summary>
            Constructs a new RecordWrittenSurrogate.
            </summary>
            <param name="actualSurrogate">
            The actual surrogate designated to handle serialization for the associated type, or
            <c>null</c>.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to
            serialize the object and records that the object was unconditionally written.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PStream.RecordWrittenSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Returns <c>null</c> since this surrogate is never be used for deserialization.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate begins.
            </param>
            <returns></returns>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PUtil">
            <summary>
            <b>PUtil</b> provides utility methods for the Piccolo framework.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.DEFAULT_ACTIVITY_STEP_RATE">
            <summary>
            The default step rate for activities.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.ACTIVITY_SCHEDULER_FRAME_INTERVAL">
            <summary>
            The default timer interval for the activity scheduler.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.DEFAULT_GREEK_THRESHOLD">
            <summary>
            The default minimum size for rendering all details of a node.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.DEFAULT_MAX_FONT_SIZE">
            <summary>
            The default maximum size for rendering fonts.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.NULL_ENUMERATOR">
            <summary>
            An enumerator for an empty list.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.CAMERA_WITH_CANVAS_FILTER">
            <summary>
            A node filter that only accepts cameras that are associated with canvases.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.CreateBasicScenegraph">
            <summary>
            Creates a basic scene graph.
            </summary>
            <returns>The main camera node in the new scene graph.</returns>
            <remarks>
            The scene graph will consist of  root node with two children, a layer and a
            camera.  Additionally, The camera will be set to view the layer.  Typically,
            you will want to add new nodes to the layer.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.DistanceBetweenPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns the geometric distance between the two given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The distance between p1 and p2.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.CenterOfRectangle(System.Drawing.RectangleF)">
            <summary>
            Returns the center of the given rectangle.
            </summary>
            <param name="r">The rectangle whose center point is desired.</param>
            <returns>The center point of the given rectangle.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.DeltaRequiredToContain(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Return the delta required for the rectangle b1 to contain the rectangle b2.
            </summary>
            <param name="b1">The first rectangle.</param>
            <param name="b2">The second rectangle.</param>
            <returns>The delta required for b1 to contain b2.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.DeltaRequiredToCenter(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Return the delta required to center the rectangle b2 in the rectangle b1.
            </summary>
            <param name="b1">The first rectangle.</param>
            <param name="b2">The second rectangle.</param>
            <returns>The delta required to center b2 in b1.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.RectangleOutCode(System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary>
            Returns the orientation with which the given point lies outside of the given
            rectangle.
            </summary>
            <param name="p">The point to compare against the rectangle.</param>
            <param name="r">The rectangle to compare against the point.</param>
            <returns></returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.InflatedRectangle(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Gets a rectangle centered on the given point and inflated in the x and y directions
            by the given amounts.
            </summary>
            <param name="aCenterPoint">The center point for the inflated rectangle.</param>
            <param name="inflateX">
            The amount to inflate the rectangle in the x direction.
            </param>
            <param name="inflateY">
            The amount to inflate the rectangle in the y direction.
            </param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.PathIntersectsRect(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.RectangleF)">
            <summary>
            Returns true if the interior of the given path intersects the given rectangle.
            </summary>
            <param name="path">The path to check for intersection.</param>
            <param name="rect">The rectangle to check for intersection.</param>
            <returns>
            True if the interior of the given path intersects the given rectangle; otherwise,
            false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.RectIntersectsPerpLine(System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Return true if the given rectangle intersects the given line, which must have either
            a slope of 0 or 90 degrees.
            </summary>
            <param name="rect">The rectangle to compare for intersection.</param>
            <param name="x1">
            The x-coordinate of the first end point of the line to check for intersection.
            </param>
            <param name="y1">
            The y-coordinate of the first end point of the line to check for intersection.
            </param>
            <param name="x2">
            The x-coordinate of the second end point of the line to check for intersection.
            </param>
            <param name="y2">
            The y-coordinate of the second end point of the line to check for intersection.
            </param>
            <returns>True if the rectangle intersects the line; otherwise, false.</returns>
            <remarks>
            This is a quick method to check if a vertical or horizontal line intersects a
            rectangle.  If the line is not perpendicular or horizontal, the result will be
            unpredictable.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.AddPointToRect(System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Expands the given rectangle to include the given point.
            </summary>
            <param name="rect">The rectangle to expand.</param>
            <param name="p">The point to include.</param>
            <returns>The expanded rectangle.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.AddRectToRect(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Returns the union of the two rectangles.  If one rectangle is empty and one is not,
            the non-empty rectangle will be returned.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns>The union of the two rectangles.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.Darker(System.Drawing.Color,System.Single)">
            <summary>
            Darkens the given color by an amount specified by the scaleFactor.
            </summary>
            <param name="color">The color to darken.</param>
            <param name="scaleFactor">
            The factor used to determine how much to darken the color.
            </param>
            <returns>The new darker color.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.Brighter(System.Drawing.Color,System.Single)">
            <summary>
            Lightens the given color by an amount specified by the scaleFactor.
            </summary>
            <param name="color">The color to lighten.</param>
            <param name="scaleFactor">
            The factor used to determine how much to lighten the color.
            </param>
            <returns>The new lighter color.</returns>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.NULL_OUTPUT_STREAM">
            <summary>
            A stream that writes to /dev/null.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.AddFrameworkSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISerializationSurrogate)">
            <summary>
            Adds a surrogate to the framework surrogate selector.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which the surrogate is required.</param>
            <param name="context">The context-specific data.</param>
            <param name="surrogate">The surrogate to call for this type.</param>
            <remarks>
            Surrogates that are added in this way will be used by the piccolo framework for cloning
            operations.  For example, if several custom nodes reference a type that is not serializable,
            you might want to add a surrogate here for that type.  Alternatively, you could override
            <see cref="M:UMD.HCIL.Piccolo.PNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> in each custom node and specify how to serialize the type
            there. 
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.ReadBrush(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Read in a <see cref="T:System.Drawing.Brush"/> from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read from.</param>
            <param name="name">The name the brush was written under.</param>
            <returns>The <see cref="T:System.Drawing.Brush"/> read in.</returns>
            <remarks>
            A serialization surrogate cannot be used here since the serialization depends on
            the type of brush and we do not want to add a surrogate for every type.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.WriteBrush(System.Drawing.Brush,System.String,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Write this <see cref="T:System.Drawing.Brush"/> to the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> to write out.</param> 
            <param name="name">The name to write the brush under</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to write to.</param>
            <remarks>
            A serialization surrogate cannot be used here since the serialization depends on
            the type of brush and we do not want to add a surrogate for every type.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.ReadPen(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Read in a <see cref="T:System.Drawing.Pen"/> from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read from.</param>
            <returns>The <see cref="T:System.Drawing.Pen"/> read in.</returns>
            <remarks>
            A serialization surrogate is not used for Pens because of a .NET bug.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.Util.PUtil.WritePen(System.Drawing.Pen,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Write this <see cref="T:System.Drawing.Pen"/> to the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> to write out.</param> 
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to write to.</param>
            <remarks>
            A serialization surrogate is not used for Pens because of a .NET bug.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PUtil.CurrentTimeMillis">
            <summary>
            Gets the current time in milliseconds.
            </summary>
            <value>The current time in milliseconds.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PUtil.GreekThreshold">
            <summary>
            Gets or sets a system wide value that specifies the smallest size at which nodes
            should render themselves completely.
            </summary>
            <value>
            The smallest size at which nodes should render themselves completely.
            </value>
            <remarks>
            Once a node becomes very small, it is no longer necessary to render it completely
            since it is impossible to see the details anyway.  When this happens, you might
            choose to simply render a filled rectangle or nothing at all.  This property
            specifies when nodes should be "greeked".  Note, however, there is nothing in the
            piccolo framework that enforces the "greeking" of nodes.  Nodes can choose to ignore
            this property.  For an example of "greeking," see
            <see cref="T:UMD.HCIL.Piccolo.Nodes.PText">PText</see>.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PUtil.MaxFontSize">
            <summary>
            Gets or sets a system wide value that specifies the maximum size at which text
            should be rendered.
            </summary>
            <value>The maximum size at which text should be rendered.</value>
            <remarks>
            This value specifies the largest font size at which text should be rendered.  Nodes
            that have text should pay attention to this value.  Note, however, there is nothing
            in the piccolo framework that enforces nodes to stop rendering text at this size.
            For an example of a node that uses this property, see
            <see cref="T:UMD.HCIL.Piccolo.Nodes.PText">PText</see>.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.Util.PUtil.FrameworkSurrogateSelector">
            <summary>
            Gets the surrogate selector used by the piccolo framework to write objects in the
            scene graph.  See <see cref="M:UMD.HCIL.Piccolo.PNode.Clone"/> for an example.
            </summary>
            <value>
            The surrogate selector used by the piccolo framework to write objects in the scene
            graph.
            </value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PUtil.OutCode">
            <summary>
            Bit fields representing the various orientations with which a point can lie outside
            of a rectangle.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.OutCode.None">
            <summary>
            The mouse is over the canvas.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.OutCode.Left">
            <summary>
            The mouse is to the left of the canvas.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.OutCode.Top">
            <summary>
            The mouse is above the canvas.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.OutCode.Right">
            <summary>
            The mouse is to the right of the canvas.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.Util.PUtil.OutCode.Bottom">
            <summary>
            The mouse is below the canvas.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.Util.PUtil.CameraWithCanvasFilter">
            <summary>
            A node filter that only accepts cameras that are associated with canvases.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.NamespaceDoc">
            <summary>
            Piccolo.NET is a general-purpose c#-based engine that supports 2D visualizations. 
            A primary characteristic of Piccolo.NET is that it is designed to support zoomable 
            information spaces, although any particular applications may or may not
            take advantage of this feature. Piccolo is implemented entirely in C#, 
            and as such runs identically on any platform that supports the CLR.
            <para>
            Piccolo is not an application in itself, but rather it is an engine that is designed 
            to support applications that require the ability to create, manipulate, and render 
            object-oriented graphics. If you are familiar with the terminology of 3D graphics, 
            Piccolo supports a scenegraph. This is a data structure that represents a hierarchy 
            of graphical objects. Piccolo uses a tuned run-time system to render the scenegraph 
            as quickly as possible to support interactive applications.
            </para>
            <para>
            This is the root namespace for all Piccolo classes. It contains the core scenegraph
            classes itself, and in addition, contains the <see cref="N:UMD.HCIL.Piccolo.Activities">Activities</see>,
            <see cref="N:UMD.HCIL.Piccolo.Event">Event</see>, <see cref="N:UMD.HCIL.Piccolo.Nodes">Nodes</see> and
            <see cref="N:UMD.HCIL.Piccolo.Util">Util</see> namespaces that are used to build Piccolo applications.
            </para>
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.CameraViewConstraint">
            <summary>
            This enumeration is used by the PCamera class.  It represents the types
            of constraints that can be applied to a camera's view matrix.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.CameraViewConstraint.None">
            <summary>
            No constraint should be applied to the view.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.CameraViewConstraint.All">
            <summary>
            Try to keep the entire bounds of all the camera's layers within the camera's
            view.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.CameraViewConstraint.Center">
            <summary>
            Try to keep the center point of all the camera's layers within the camera's view.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PCamera">
            <summary>
            <b>PCamera</b> represents a viewport onto a list of layer nodes.
            </summary>
            <remarks>
            Each camera maintains a view transform through which it views these
            layers. Translating and scaling this view transform is how zooming
            and panning are implemented.
            <para>
            Cameras are also the point through which all PInputEvents enter Piccolo. The
            canvas coordinate system, and the local coordinate system of the topmost camera
            should always be the same.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCamera.PROPERTY_CODE_LAYERS">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PCamera.LayersChanged">LayersChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether LayersChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCamera.PROPERTY_CODE_VIEWTRANSFORM">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PCamera.ViewTransformChanged">ViewTransformChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether ViewTransformChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCamera.PROPERTY_KEY_LAYERS">
            <summary>
            The key that identifies a change in the set of this camera's layers.
            </summary>
            <remarks>
            In a property change event the new value will be a reference to the list of this
            nodes layers, but old value will always be null.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCamera.PROPERTY_KEY_VIEWTRANSFORM">
            <summary>
            The key that identifies a change in this camera's view matrix. 
            </summary>
            <remarks>
            In a property change event the new value will be a reference to this
            node's view matrix, but old value will always be null.
            <seealso cref="P:UMD.HCIL.Piccolo.PCamera.ViewMatrix">PCamera.ViewMatrix</seealso>.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.#ctor">
            <summary>
            Constructs a new camera with no layers and a default white color.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.RepaintFrom(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Overridden.  Repaint this camera, and forward the repaint request to the camera's
            canvas if it is not null.
            </summary>
            <param name="bounds">The bounds to repaint, in local coordinates.</param>
            <param name="childOrThis">
            If childOrThis does not equal this then this camera's matrix will be applied to the
            bounds paramater.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.RepaintFromLayer(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Repaint from one of the camera's layers.
            </summary>
            <param name="bounds">The bounds to repaint, in view coordinates.</param>
            <param name="repaintedLayer">The layer that was repainted.</param>
            <remarks>
            The repaint region needs to be transformed from view to local coordinates in
            this case.  Unlike most repaint methods in piccolo this one must not modify
            the bounds parameter.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.GetLayer(System.Int32)">
            <summary>
            Return the layer at the specified index.
            </summary>
            <param name="index">The index of the desired layer.</param>
            <returns>The layer at the specified index.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.IndexOfLayer(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Return the index where the given layer is stored.
            </summary>
            <param name="layer">The layer whose index is desired.</param>
            <returns>The index where the given layer is stored.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.AddLayer(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Add the layer to the end of this camera's list of layers.  Layers may be
            viewed by multiple cameras at once.
            </summary>
            <param name="layer">The layer to add to this camera.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.AddLayer(System.Int32,UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Add the layer at the given index in this camera's list of layers.  Layers
            may be viewed by multiple cameras at once.
            </summary>
            <param name="index">The index at which to add the layer.</param>
            <param name="layer">The layer to add to this camera.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.RemoveLayer(UMD.HCIL.Piccolo.PLayer)">
            <summary>
            Remove the given layer from the list of layers managed by this camera.
            </summary>
            <param name="layer">The layer to remove.</param>
            <returns>The removed layer.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.RemoveLayer(System.Int32)">
            <summary>
            Remove the layer at the given index from the list of layers managed by this
            camera.
            </summary>
            <param name="index">The index of the layer to remove.</param>
            <returns>The removed layer.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.Paint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Paint this camera (default background color is white) and then paint
            the camera's view through the view transform.
            </summary>
            <param name="paintContext">The paint context to use for painting this camera.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PaintTransformedView(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Paint the camera's view through the view transform.
            </summary>
            <param name="paintContext">The paint context to use for painting this camera.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PaintCameraView(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Paint all the layers that the camera is looking at.
            </summary>
            <param name="paintContext">
            The paint context to use for painting this camera's view.
            </param>
            <remarks>
            This method is only called when the cameras view matrix and clip are applied to
            the paintContext.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PaintDebugInfo(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            This method paints the bounds and full bounds of nodes when the appropriate debug
            flags are set.
            </summary>
            <param name="paintContext">
            The paint context to use for painting debug information.
            </param>
            <remarks>
            Setting debugBounds and/or debugFullBounds flags is useful for visual debugging.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PaintDebugBounds(UMD.HCIL.Piccolo.Util.PPaintContext,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Override this method to change the way the bounds are painted when the debug bounds
            flag is set.
            </summary>
            <param name="paintContext">The paint context to use for painting debug information.</param>
            <param name="boundsPen">The pen to use for painting the bounds of a node.</param>
            <param name="nodeBounds">The bounds of the node to paint.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PaintDebugFullBounds(UMD.HCIL.Piccolo.Util.PPaintContext,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Override this method to change the way the full bounds are painted when the debug
            full bounds flag is set.
            </summary>
            <param name="paintContext">The paint context to use for painting debug information.</param>
            <param name="fullBoundsBrush">The brush to use for painting the full bounds of a node.</param>
            <param name="nodeBounds">The full bounds of the node to paint.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.FullPaint(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Overridden.  Push the camera onto the paintContext, so that it can later be accessed
            by <see cref="P:UMD.HCIL.Piccolo.Util.PPaintContext.Camera">PPaintContext.Camera</see>, and then paint this
            node and all of it's descendents.
            </summary>
            <param name="paintContext">The paint context to use for painting this camera.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.Pick(System.Single,System.Single,System.Single)">
            <summary>
            Generate and return a PPickPath for the point x,y specified in the local
            coordinate system of this camera.
            </summary>
            <param name="x">The x coordinate of the pick point.</param>
            <param name="y">The y coordinate of the pick point.</param>
            <param name="halo">
            The value to use for the width and height of the rectangle used for picking.
            </param>
            <returns>A PPickPath for the given point.</returns>
            <remarks>
            Picking is done with a rectangle, halo specifies how large that rectangle
            will be.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PickAfterChildren(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Overridden.  After the direct children of the camera have been given a chance
            to be picked objects viewed by the camera are given a chance to be picked.
            </summary>
            <param name="pickPath">The pick path used for the pick operation.</param>
            <returns>
            True if an object viewed by the camera was picked; else false.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PickCameraView(UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Pick all the layers that the camera is looking at.
            </summary>
            <param name="pickPath">The pick path to use for the pick operation.</param>
            <returns>
            True if an object viewed by the camera was picked; else false.
            </returns>
            <remarks>
            This method is only called when the camera's view matrix and clip are
            applied to the pickPath.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ScaleViewBy(System.Single)">
            <summary>
            Scale the view transform that is applied to the layers viewed by this camera
            by the given amount.
            </summary>
            <param name="scale">The amount to scale the view by.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ScaleViewBy(System.Single,System.Single,System.Single)">
            <summary>
            Scale the view transform that is applied to the layers viewed by this camera
            by the given amount about the given point.
            </summary>
            <param name="scale">The amount ot scale the view by.</param>
            <param name="x">The x coordinate of the point to scale about.</param>
            <param name="y">The y coordinate of the point to scale about.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.TranslateViewBy(System.Single,System.Single)">
            <summary>
            Translate the view matrix that is applied to the camera's layers.
            </summary>
            <param name="dx">The amount to translate in the x direction.</param>
            <param name="dy">The amount to translate in the y direction.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.SetViewOffset(System.Single,System.Single)">
            <summary>
            Sets the offset of the view matrix that is applied to the camera's layers.
            </summary>
            <param name="x">The x coordinate of the offset to apply to the camera's layers.</param>
            <param name="y">The y coordinate of the offset to apply to the camera's layers.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ApplyViewConstraints">
            <summary>
            Applies a previously set constraint to the camera's view matrix.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ViewToLocal(System.Drawing.PointF)">
            <summary>
            Transform the point from the camera's view coordinate system to the camera's
            local coordinate system.
            </summary>
            <param name="point">
            The point in the camera's view coordinate system to be transformed.
            </param>
            <returns>The point in the camera's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ViewToLocal(System.Drawing.SizeF)">
            <summary>
            Transform the size from the camera's view coordinate system to the camera's
            local coordinate system.
            </summary>
            <param name="size">
            The size in the camera's view coordinate system to be transformed.
            </param>
            <returns>The size in the camera's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.ViewToLocal(System.Drawing.RectangleF)">
            <summary>
            Transform the rectangle from the camera's view coordinate system to the
            camera's local coordinate system.
            </summary>
            <param name="rectangle">
            The rectangle in the camera's view coordinate system to be transformed.
            </param>
            <returns>The rectangle in the camera's local coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.LocalToView(System.Drawing.PointF)">
            <summary>
            Transform the point from the camera's local coordinate system to the camera's
            view coordinate system. 
            </summary>
            <param name="point">
            The point in the camera's local coordinate system to be transformed.
            </param>
            <returns>The point in the camera's view coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.LocalToView(System.Drawing.SizeF)">
            <summary>
            Transform the size from the camera's local coordinate system to the camera's
            view coordinate system. 
            </summary>
            <param name="size">
            The size in the camera's local coordinate system to be transformed.
            </param>
            <returns>The size in the camera's view coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.LocalToView(System.Drawing.RectangleF)">
            <summary>
            Transform the rectangle from the camera's local coordinate system to the camera's
            view coordinate system. 
            </summary>
            <param name="rectangle">
            The rectangle in the camera's local coordinate system to be transformed.
            </param>
            <returns>The rectangle in the camera's view coordinate system.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.AnimateViewToCenterBounds(System.Drawing.RectangleF,System.Boolean,System.Int64)">
            <summary>
            Animate the camera's view from its current matrix when the activity starts
            to a new matrix that centers the given bounds in the camera layers' coordinate
            system into the camera's view bounds.
            </summary>
            <param name="centerBounds">The bounds to center the view on.</param>
            <param name="shouldScaleToFit">
            Indicates whether the camera should scale it's view when necessary to fully fit
            the given bounds within the camera's view bounds.
            </param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
            <remarks>
            If the duration is 0 then the view will be transformed immediately, and null will
            be returned.  Else a new PTransformActivity will get returned that is set to
            animate the camera’s view matrix to the new bounds. If shouldScaleToFit is true,
            then the camera will also scale its view so that the given bounds fit fully within
            the camera's view bounds, else the camera will maintain its original scale.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.AnimateViewToPanToBounds(System.Drawing.RectangleF,System.Int64)">
            <summary>
            Pan the camera's view from its current matrix when the activity starts to a new
            matrix so that the view bounds will contain (if possible, intersect if not
            possible) the new bounds in the camera layers' coordinate system. 
            </summary>
            <param name="panToBounds">The bounds to pan the view to.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
            <remarks>
            If the duration is 0 then the view will be transformed immediately, and null will
            be returned. Else a new PTransformActivity will get returned that is set to
            animate the camera’s view matrix to the new bounds.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.AnimateViewToMatrix(UMD.HCIL.Piccolo.Util.PMatrix,System.Int64)">
            <summary>
            Animate the camera's view matrix from its current value when the activity starts
            to the new destination matrix value.
            </summary>
            <param name="destination">The final matrix value.</param>
            <param name="duration">The amount of time that the animation should take.</param>
            <returns>
            The newly scheduled activity, if the duration is greater than 0; else null.
            </returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this camera and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overridden.  Write this camera and all its children to the given
            SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">
            The streaming context of this serialization operation.
            </param>
            <remarks>
            Note that the camera's layers are written conditionally, so they will only
            get written out if someone else writes them unconditionally.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.Canvas">
            <summary>
            Gets or sets the canvas associated with this camera.
            </summary>
            <value>
            The canvas associated with this camera.
            </value>
            <remarks>
            This property will return null if no canvas has been associated with this camera,
            as may be the case for internal cameras.
            <para>
            When the camera is repainted it will request repaints on this canvas.
            </para>
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PCamera.LayersChanged">
            <summary>
            Occurs when there is a change in the set of this camera's layers.
            </summary>
            <remarks>
            When a user attaches an event handler to the LayersChanged Event as in
            LayersChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_LAYERS in the Events list).
            When a user removes an event handler from the LayersChanged event as in 
            LayersChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_LAYERS in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.LayersReference">
            <summary>
            Gets a reference to the list of layers managed by this camera.
            </summary>
            <value>The list of layers managed by this camera.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.LayerCount">
            <summary>
            Gets the number of layers managed by this camera.
            </summary>
            <value>The number of layers managed by this camera.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.UnionOfLayerFullBounds">
            <summary>
            Gets the total bounds of all the layers that this camera looks at.
            </summary>
            <value>The total bounds of this camera's layers.</value>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PCamera.ViewTransformChanged">
            <summary>
            Occurs when the value of the ViewMatrix property changes.
            </summary>
            <remarks>
            When a user attaches an event handler to the ViewTransformChanged Event as in
            ViewTransformChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_VIEWTRANSFORM in the Events list).
            When a user removes an event handler from the ViewTransformChanged event as in 
            ViewTransformChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_VIEWTRANSFORM in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewBounds">
            <summary>
            Gets or sets the bounds of the view.
            </summary>
            <value>The bounds of the view.</value>
            <remarks>
            This property will return the bounds of the camera in view coordinates.
            Setting this property will center the the specified rectangle and scale
            the view so that the rectangle fits fully within the camera's view bounds.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewScale">
            <summary>
            Gets or sets the scale applied by the view transform to the layers
            viewed by this camera.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewOffset">
            <summary>
            Sets the offset of the view matrix that is applied to the camera's layers.
            </summary>
            <value>The offset to apply to the camera's layers.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewMatrix">
            <summary>
            Gets or sets the view matrix that is applied to the camera's layers.
            </summary>
            <value>The view matrix that is applied to the camera's layers.</value>
            <remarks>This property returns a copy of the view matrix.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewMatrixReference">
            <summary>
            Gets a reference to the view matrix that is applied to the camera's layers.
            </summary>
            <value>A reference to the view matrix that is applied to the camera's layers.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.ViewConstraint">
            <summary>
            Gets or sets a constraint that will be applied to the camera's view matrix.
            </summary>
            <value>A constraint to apply to the camera's view matrix.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PCamera.PCameraTransformTarget">
            <summary>
            A target for a transform activity that gets and sets the matrix of the specified
            PCamera.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCamera.PCameraTransformTarget.#ctor(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Constructs a new PCameraTransformTarget.
            </summary>
            <param name="target">The target camera.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCamera.PCameraTransformTarget.Matrix">
            <summary>
            Gets or sets the camera's matrix.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.LowRenderQualityDelegate">
            <summary>
            A delegate that is notified when Piccolo renders in low quality.
            </summary>
            <remarks>
            This delegate will be called whenever Piccolo renders in low quality so that you
            can set additional flags on the graphics object.  Piccolo will set various
            flags for you by default.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.HighRenderQualityDelegate">
            <summary>
            A delegate that is notified when Piccolo renders in high quality.
            </summary>
            <remarks>
            This delegate will be called whenever Piccolo renders in high quality so that you
            can set additional flags on the graphics object.  Piccolo will set various
            flags for you by default.
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PCanvas">
            <summary>
            <b>PCanvas</b> is a simple C# Control that can be used to embed Piccolo into a
            C# application.
            </summary>
            <remarks>
            Canvases view the Piccolo scene graph through a camera.  The canvas manages
            screen updates coming from this camera, and forwards mouse and keyboard events
            to the camera.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCanvas.CURRENT_PCANVAS">
            <summary>
            The current canvas.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCanvas.LowRenderQuality">
            <summary>
            Used to specify what flags should be set for low quality rendering.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCanvas.HighRenderQuality">
            <summary>
            Used to specify what flags should be set for high quality rendering.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PCanvas.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.#ctor">
            <summary>
            Construct a canvas with the basic scene graph consisting of a root, camera,
            and layer. Event handlers for zooming and panning are automatically
            installed.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.CreateBasicScenegraph">
            <summary>
            Override this method to modify the way the scene graph is created.
            </summary>
            <returns>The main camera node in the new scene graph.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.AddInputEventListener(UMD.HCIL.Piccolo.Event.PInputEventListener)">
            <summary>
            Add an input listener to the camera associated with this canvas.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.RemoveInputEventListener(UMD.HCIL.Piccolo.Event.PInputEventListener)">
            <summary>
            Remove an input listener to the camera associated with this canvas.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnInteractingChanged(UMD.HCIL.Piccolo.Event.PPropertyEventArgs)">
            <summary>
            Raises the InteractingChanged event by invoking the delegates.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            This event is raised when the interacting state of the canvas changes.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.PushCursor(System.Windows.Forms.Cursor)">
            <summary>
            Set the canvas cursor, and remember the previous cursor on the cursor stack.
            </summary>
            <param name="cursor">The new canvas cursor.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.PopCursor">
            <summary>
            Pop the cursor on top of the cursorStack and set it as the canvas cursor.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnResize(System.EventArgs)">
            <summary>
            Overridden.  See <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">Control.OnResize</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden.  Forwards the KeyDown event to the default input manager.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overridden.  Forwards the KeyPress event to the default input manager.
            </summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden.  Determines whether the specified key is a regular input key or a
            special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the Keys values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
            <remarks>
            This method is overridden so that events from the arrow keys will be sent to the
            control, rather than pre-processed.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden.  Forwards the KeyUp event to the default input manager.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnClick(System.EventArgs)">
            <summary>
            Overridden.  Forwards the Click event to the default input manager.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnDoubleClick(System.EventArgs)">
            <summary>
            Overridden.  Forwards the DoubleClick event to the default input manager.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden.  Forwards the MouseDown event to the default input manager.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden.  Forwards the MouseMove event to the default input manager.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden.  Forwards the MouseUp event to the default input manager.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseEnter(System.EventArgs)">
            <summary>
            Overridden.  Forwards the MouseEnter event to the default input manager.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden.  Forwards the MouseLeave event to the default input manager.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.SimulateMouseMoveOrDrag">
            <summary>
            Simulates a mouse move or drag event.
            </summary>
            <remarks>
            This method simulates a mouse move or drag event, which is sometimes necessary
            to ensure that the appropriate piccolo mouse enter and leave events are fired.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden.  Forwards the MouseWheel event to the default input manager.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden.  Forwards the DragDrop event to the default input manager.
            </summary>
            <param name="drgevent">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden.  Forwards the DragOver event to the default input manager.
            </summary>
            <param name="drgevent">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden.  Forwards the DragEnter event to the default input manager.
            </summary>
            <param name="drgevent">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden.  Forwards the DragLeave event to the default input manager.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.InvalidateBounds(System.Drawing.RectangleF)">
            <summary>
            Invalidates the specified region of the canvas (adds it to the canvas's update region,
            which is the area that will be repainted at the next paint operation), and causes a paint
            message to be sent to the canvas.
            </summary>
            <param name="bounds">A rectangle object that represents the region to invalidate.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden.  See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.PaintPiccolo(UMD.HCIL.Piccolo.Util.PPaintContext)">
            <summary>
            Paints the piccolo hierarchy.
            </summary>
            <remarks>
            Subclasses that add painting code should override this method rather than
            <see cref="M:UMD.HCIL.Piccolo.PCanvas.OnPaint(System.Windows.Forms.PaintEventArgs)">PCanvas.OnPaint</see> to ensure that any extra processing
            will be included in the output frame rate calculation.
            </remarks>
            <param name="paintContext">The paint context to use for painting piccolo.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.CreatePaintContext(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override this method to return a subclass of PPaintContext.
            </summary>
            <remarks>
            This can be useful if you are trying to plug in a different renderer, other
            than GDI+.  See the PiccoloDirect3D sample.
            </remarks>
            <param name="pe">A PaintEventArgs that contains the PaintEvent data.</param>
            <returns>The paint context to use for painting piccolo.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PCanvas.PaintImmediately">
            <summary>
            Causes the canvas to immediately paint it's invalidated regions.
            </summary>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PCanvas.InteractingChanged">
            <summary>
            Occurs when the interacting state of a canvas changes.
            </summary>
            <remarks>
            When a canvas is interacting, the canvas will render at lower quality that is
            faster.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.Camera">
            <summary>
            Gets or sets the camera associated with this canvas.
            </summary>
            <value>The camera associated with this canvas.</value>
            <remarks>
            All input events from this canvas go through this camera. And this is the
            camera that paints this canvas.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.Root">
            <summary>
            Gets the root of the scene graph viewed by the camera.
            </summary>
            <value>The root for this canvas.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.Layer">
            <summary>
            Gets the main layer of the scene graph viewed by the camera.
            </summary>
            <value>The layer for this canvas.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.PanEventHandler">
            <summary>
            Gets or sets the pan event handler associated with this canvas.
            </summary>
            <value>The pan event handler for this canvas.</value>
            <remarks>
            This event handler is set up to get events from the camera associated
            with this canvas by default.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.ZoomEventHandler">
            <summary>
            Gets or sets the zoom event handler associated with this canvas.
            </summary>
            <value>The zoom event handler for this canvas.</value>
            <remarks>
            This event handler is set up to get events from the camera associated
            with this canvas by default.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.RegionManagement">
            <summary>
            Gets or sets a value indicating whether or not region management should be
            used when painting.
            </summary>
            <value>
            A value that indicates whether or not region management should be used when
            painting.
            </value>
            <remarks>
            When region management is turned on, only the nodes that have been
            invalidated will be painted to the screen.  Typically, this will provide the
            best performance.  In some cases, however, the cost of invalidating lots of
            rectangles is greater than the cost of painting the entire window.  For
            example, if you have a scene filled with lots of animating rectangles where
            the bounds of each rectangle are invalidated on every frame, you might get
            better performance by turning off region management.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.GridFitText">
            <summary>
            Gets or sets a value indicating if text should be rendered with hinting.
            </summary>
            <remarks>
            When grid-fitting is turned on, the position of the pixels in each rendered glyph
            are adjusted to make the glyph easily legible at various screen sizes.  This will
            result in higher quality text.  However, grid-fitting will also change the size of
            the glyphs, which can make it difficult to display adjacent text.  And, while
            zooming, the text may appear jumpy.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.Interacting">
            <summary>
            Gets or sets a value indicating if this canvas is interacting.
            </summary>
            <value>True if the canvas is interacting; otherwise, false.</value>
            <remarks>
            If this property is true, the canvas will normally render at a lower
            quality that is faster.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.Animating">
            <summary>
            Gets a value indicating if this canvas is animating.
            </summary>
            <value>True if the canvas is animating; otherwise, false.</value>
            <remarks>
            Returns true if any activities that respond with true to the method isAnimating
            were run in the last PRoot.ProcessInputs() loop. 
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.DefaultRenderQuality">
            <summary>
            Sets the render quality that should be used for rendering this canvas when it
            is not interacting or animating.
            </summary>
            <value>The default render quality for this canvas.</value>
            <remarks>The default value is <c>RenderQuality.HighQuality</c>.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.AnimatingRenderQuality">
            <summary>
            Sets the render quality that should be used for rendering this canvas when it
            is animating.
            </summary>
            <value>The animating render quality for this canvas.</value>
            <remarks>The default value is <c>RenderQuality.LowQuality</c>.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PCanvas.InteractingRenderQuality">
            <summary>
            Set the render quality that should be used for rendering this canvas when it
            is interacting.
            </summary>
            <value>The interacting render quality for this canvas.</value>
            <remarks>The default value is <c>RenderQuality.LowQuality</c>.</remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PInputManager">
            <summary>
            <b>PInputManager</b> is responsible for dispatching PInputEvents to node's
            event listeners.
            </summary>
            <remarks>Events are dispatched from PRoot's processInputs method.</remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.InputSource">
            <summary>
            This interface is for advanced use only. If you want to implement a
            different kind of input framework than Piccolo provides you can hook
            it in here.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.InputSource.ProcessInput">
            <summary>
            Process pending input events.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.#ctor">
            <summary>
            Constructs a new PInputManager.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.ProcessInput">
            <summary>
            Create a new PInputEvent based on the next windows event and dispatch it to Piccolo.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.Dispatch(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Dispatch the given event to the appropriate focus node.
            </summary>
            <param name="e">An PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.CheckForMouseEnteredAndExited(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Check if the mouse has entered or exited a node during a mouse move or drag
            operation and, if so, dispatch the appropriate event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.CheckForMouseDragEnteredAndExited(UMD.HCIL.Piccolo.Event.PInputEventArgs)">
            <summary>
            Check if the mouse has entered or exited a node during a drag and drop
            operation and, if so, dispatch the appropriate event.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.DispatchToPath(UMD.HCIL.Piccolo.Event.PInputEventArgs,UMD.HCIL.Piccolo.Event.PInputType,UMD.HCIL.Piccolo.Util.PPickPath)">
            <summary>
            Dispatch the given PInputEvent to the given pick path.
            </summary>
            <param name="e">A PInputEventArgs that contains the event data.</param>
            <param name="type">The type of PInputEvent being dispatched.</param>
            <param name="path">The pick path to which the PInputEvent will be dispatched.</param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PInputManager.ProcessEventFromCamera(System.EventArgs,UMD.HCIL.Piccolo.Event.PInputType,UMD.HCIL.Piccolo.PCamera,UMD.HCIL.Piccolo.PCanvas)">
            <summary>
            Process the given windows event from the camera.
            </summary>
            <param name="e">The windows event to be processed.</param>
            <param name="type">The type of windows event being processed.</param>
            <param name="camera">The camera from which to process the windows event.</param>
            <param name="canvas">The source of the windows event being processed.</param>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PInputManager.KeyboardFocus">
            <summary>
            Gets or sets the node that currently has the keyboard focus.
            </summary>
            <value>A pick path with the node that has the keyboard focus.</value>
            <remarks>This pick path receives the key events.</remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PInputManager.MouseFocus">
            <summary>
            Gets or sets the node that currently has the mouse focus.
            </summary>
            <remarks>
            This will return a pick path with the node that received the current mouse
            pressed event, or null if the mouse is not pressed. The mouse focus gets
            mouse dragged events even when the mouse is not over the mouse focus.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PInputManager.MouseOver">
            <summary>
            Gets the node the mouse is currently over
            </summary>
            <value>A pick path containing the node the mouse is over.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PInputManager.LastCanvasPosition">
            <summary>
            Gets the mouse position before the last mouse event, in canvas coordinates.
            </summary>
            <value>The last mouse position.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PInputManager.CurrentCanvasPosition">
            <summary>
            Gets the current mouse position, in canvas coordinates.
            </summary>
            <value>The current mouse position.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PLayer">
            <summary>
            <b>PLayer</b> is a node that can be viewed directly by multiple camera nodes.
            </summary>
            <remarks>
            Generally child nodes are added to a layer to give the viewing cameras 
            something to look at.
            <para>
            A single layer node may be viewed through multiple cameras with each camera
            using its own view matrix. This means that any node (since layers can have
            children) may be visible through multiple cameras at the same time.
            </para>
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PLayer.PROPERTY_CODE_CAMERAS">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PLayer.CamerasChanged">CamerasChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether CamerasChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PLayer.PROPERTY_KEY_CAMERAS">
            <summary>
            The key that identifies a change in the set of this layer's cameras.
            </summary>
            <remarks>
            In a property change event the new value will be a reference to the list of this
            nodes cameras, but old value will always be null.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.#ctor">
            <summary>
            Constructs a new PLayer.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.GetCamera(System.Int32)">
            <summary>
            Get the camera in this layer's camera list at the specified index. 
            </summary>
            <param name="index">The index of the desired camera.</param>
            <returns>The camera at the specified index.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.AddCamera(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Add a camera to this layer's camera list.
            </summary>
            <param name="camera">The new camera to add.</param>
            <remarks>
            This method it called automatically when a layer is added to a camera.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.AddCamera(System.Int32,UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Add a camera to this layer's camera list at the specified index.
            </summary>
            <param name="index">The index at which to add the new layer.</param>
            <param name="camera">The new camera to add.</param>
            <remarks>
            This method it called automatically when a layer is added to a camera.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.RemoveCamera(UMD.HCIL.Piccolo.PCamera)">
            <summary>
            Remove the camera from this layer's camera list.
            </summary>
            <param name="camera">The camera to remove.</param>
            <returns>The removed camera.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.RemoveCamera(System.Int32)">
            <summary>
            Remove the camera at the given index from this layer's camera list.
            </summary>
            <param name="index">The index of the camera to remove.</param>
            <returns>The removed camera.</returns>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.RepaintFrom(System.Drawing.RectangleF,UMD.HCIL.Piccolo.PNode)">
            <summary>
            Overridden.  Forward repaints to the cameras that are viewing this layer.
            </summary>
            <param name="bounds">
            The bounds to repaint, specified in the local coordinate system.
            </param>
            <param name="childOrThis">
            If childOrThis does not equal this then this layer's matrix will be
            applied to the bounds paramater.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.NotifyCameras(System.Drawing.RectangleF)">
            <summary>
            Notify the cameras looking at this layer to paint their views.
            </summary>
            <param name="bounds">
            The bounds to repaint, specified in the view coordinate system.
            </param>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this layer and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PLayer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overridden.  Write this layer and all its children to the given
            SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to write to.</param>
            <param name="context">
            The streaming context of this serialization operation.
            </param>
            <remarks>
            Note that the layer writes out any cameras that are viewing it
            conditionally, so they will only get written out if someone else
            writes them unconditionally.
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PLayer.CamerasChanged">
            <summary>
            Occurs when there is a change in the set of this layer's cameras.
            </summary>
            <remarks>
            When a user attaches an event handler to the CamerasChanged Event as in
            CamerasChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_CAMERAS in the Events list).
            When a user removes an event handler from the CamerasChanged event as in 
            CamerasChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_CAMERAS in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PLayer.CamerasReference">
            <summary>
            Gets the list of cameras viewing this layer.
            </summary>
            <value>The list of cameras viewing this layer.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PLayer.CameraCount">
            <summary>
            Get the number of cameras viewing this layer.
            </summary>
            <value>The number of cameras viewing this layer.</value>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PaintInvalidatedDelegate">
            <summary>
            A delegate that recieves low level paint invalidated events.
            </summary>
            <remarks>
            Used to recieve low level node events.  This delegate together with the
            <see cref="T:UMD.HCIL.Piccolo.FullBoundsInvalidatedDelegate">FullBoundsInvalidatedDelegate</see> gives
            Piccolo users an efficient way to learn about low level changes in Piccolo's scene
            graph. Most users will not need to use this.
            <seealso cref="T:UMD.HCIL.Piccolo.FullBoundsInvalidatedDelegate"/>
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.FullBoundsInvalidatedDelegate">
            <summary>
            A delegate that recieves low level full bounds invalidated events.
            </summary>
            <remarks>
            Used to recieve low level node events.  This delegate together with the
            <see cref="T:UMD.HCIL.Piccolo.PaintInvalidatedDelegate">PaintInvalidatedDelegate</see> gives Piccolo users
            an efficient way to learn about low level changes in Piccolo's scene graph.  Most users
            will not need to use this.
            <seealso cref="T:UMD.HCIL.Piccolo.PaintInvalidatedDelegate"/>
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PInputEventHandler">
            <summary>
            A delegate that is used to register for mouse and keyboard events on a PNode.
            </summary>
            <Remarks>
            Note the events that you get depend on the node that you have registered with. For
            example you will only get mouse moved events when the mouse is over the node
            that you have registered with, not when the mouse is over some other node.
            For more control over events, a listener class can be registered rather than an event
            handler method.  <see cref="T:UMD.HCIL.Piccolo.Event.PInputEventListener"/>
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PDragEventHandler"/>
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PDragSequenceEventHandler"/>
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PInputEventArgs"/>
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPanEventHandler"/>
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PZoomEventHandler"/>
            </Remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PPropertyEventHandler">
            <summary>
            A delegate that is used to register for property change events on a PNode.
            </summary>
            <remarks>
            Note the events that you get depend on the node that you have registered with. For
            example you will only get a bounds PropertyEvent when the bounds of the node
            that you have registered with changes, not when some other node's bounds change.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs"/>
            </remarks>
        </member>
        <member name="T:UMD.HCIL.Piccolo.ProcessScheduledInputsDelegate">
            <summary>
            A delegate used to invoke the <c>ProcessScheduledInputs</c> method on
            the main UI thread.
            </summary>
        </member>
        <member name="T:UMD.HCIL.Piccolo.PRoot">
            <summary>
            <b>PRoot</b> serves as the top node in Piccolo's runtime structure.
            </summary>
            <remarks>
            The PRoot is responsible for running the main UI loop that processes
            input from activities and external events.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PRoot.PROPERTY_CODE_INPUT_SOURCES">
            <summary>
            A bit field that identifies a <see cref="E:UMD.HCIL.Piccolo.PRoot.InputSourcesChanged">InputSourcesChanged</see> event.
            </summary>
            <remarks>
            This field is used to indicate whether InputSourcesChanged events should be forwarded to
            a node's parent.
            <seealso cref="T:UMD.HCIL.Piccolo.Event.PPropertyEventArgs">PPropertyEventArgs</seealso>.
            <seealso cref="P:UMD.HCIL.Piccolo.PNode.PropertyChangeParentMask">PropertyChangeParentMask</seealso>.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PRoot.PROPERTY_KEY_INPUT_SOURCES">
            <summary>
            The key that identifies a change in the set of this root's
            <see cref="T:UMD.HCIL.Piccolo.InputSource">InputSource</see>s.
            </summary>
            <remarks>
            In a property change event the new value will be a reference to the list of this
            root's input sources, but the old value will always be null.
            </remarks>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PRoot.processingInputs">
            <summary>
            A flag that indicates whether Piccolo is currently processing inputs.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PRoot.processInputsScheduled">
            <summary>
            A flag that indicates whether inputs are scheduled to be processed.
            </summary>
        </member>
        <member name="F:UMD.HCIL.Piccolo.PRoot.processScheduledInputsDelegate">
            <summary>
            Used to invoke the <c>ProcessScheduledInputs</c> method on the main UI
            thread.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.#ctor">
            <summary>
            Constructs a new PRoot.
            </summary>
            <remarks>
            Note the PCanvas already creates a basic scene graph for you so usually you
            will not need to construct your own roots.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.AddActivity(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Overridden.  Add an activity to the activity scheduler associated with
            this root.
            </summary>
            <param name="activity">The new activity to scheduled.</param>
            <returns>
            True if the activity is successfully scheduled; otherwise, false.
            </returns>
            <remarks>
            Activities are given a chance to run during each call to the root's
            <c>ProcessInputs</c> method. When the activity has finished running it
            will automatically get removed.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.WaitForActivities">
            <summary>
            Wait for all scheduled activities to finish before returning from
            this method. This will freeze out user input, and so it is generally
            recommended that you use <c>PActivity.StartTime</c> and
            <c>PActivity.StartAfter</c> to offset activities instead of using
            this method.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.WaitForActivity(UMD.HCIL.Piccolo.Activities.PActivity)">
            <summary>
            Wait for all the specified activity to finish before returning from
            this method. This will freeze out user input, and so it is generally
            recommended that you use <c>PActivity.StartTime</c> and
            <c>PActivity.StartAfter</c> to offset activities instead of using
            this method.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.ProcessActivitiesNow">
            <summary>
            Step activities and update all associated canvases immediately.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.AddInputSource(UMD.HCIL.Piccolo.InputSource)">
            <summary>
            Advanced. If you want to add additional input sources to the root's UI process
            you can do that here.
            </summary>
            <param name="inputSource">The new input source to add.</param>
            <remarks>
            You will seldom do this unless you are making additions to the piccolo framework.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.RemoveInputSource(UMD.HCIL.Piccolo.InputSource)">
            <summary>
            Advanced. If you want to remove an input source from the root's UI process you
            can do that here.
            </summary>
            <param name="inputSource">The input source to remove.</param>
            <remarks>
            You will seldom do this unless you are making additions to the piccolo framework.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.ProcessInputs">
            <summary>
            This is the heartbeat of the Piccolo framework, where all processing is done.
            </summary>
            <remarks>
            In this method, pending input events are processed, Activities are given a
            chance to run, and the bounds caches and any paint damage are validated.
            </remarks>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.ProcessScheduledInputs">
            <summary>
            Processes currently scheduled inputs and resets processInputsScheduled flag.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.ScheduleProcessInputsIfNeeded">
            <summary>
            If something in the scene graph needs to be updated, this method will schedule
            ProcessInputs run at a later time.
            </summary>
        </member>
        <member name="M:UMD.HCIL.Piccolo.PRoot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Read this this root and all its children from the given SerializationInfo.
            </summary>
            <param name="info">The SerializationInfo to read from.</param>
            <param name="context">
            The StreamingContext of this serialization operation.
            </param>
            <remarks>
            This constructor is required for Deserialization.
            </remarks>
        </member>
        <member name="E:UMD.HCIL.Piccolo.PRoot.InputSourcesChanged">
            <summary>
            Occurs when there is a change in the set of this root's
            <see cref="T:UMD.HCIL.Piccolo.InputSource">InputSource</see>s.
            </summary>
            <remarks>
            When a user attaches an event handler to the InputSourcesChanged Event as in
            InputSourcesChanged += new PPropertyEventHandler(aHandler),
            the add method adds the handler to the delegate for the event
            (keyed by PROPERTY_KEY_INPUT_SOURCES in the Events list).
            When a user removes an event handler from the InputSourcesChanged event as in 
            InputSourcesChanged -= new PPropertyEventHandler(aHandler),
            the remove method removes the handler from the delegate for the event
            (keyed by PROPERTY_KEY_INPUT_SOURCES in the Events list).
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.ActivityScheduler">
            <summary>
            Get the activity scheduler associated with this root.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.Root">
            <summary>
            Overridden.  Get's this.
            </summary>
            <value>This root node.</value>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.DefaultInputManager">
            <summary>
            Gets the default input manager to be used when processing input events.
            </summary>
            <value>The default input manager.</value>
            <remarks>
            PCanvas's use this method when they forward new input events to the
            PInputManager.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.GlobalTime">
            <summary>
            Gets the global Piccolo time.
            </summary>
            <remarks>
            This is set to <c>PUtil.CurrentTimeMillis</c> at the beginning of the root's
            <c>ProcessInputs</c> method.  Activities should usually use this global time
            instead of <c>PUtil.CurrentTimeMillis</c> so that multiple activities will be
            synchronized.
            </remarks>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.FullBoundsInvalid">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.PNode.FullBoundsInvalid">PNode.FullBoundsInvalid</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.ChildBoundsInvalid">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.PNode.ChildBoundsInvalid">PNode.ChildBoundsInvalid</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.PaintInvalid">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.PNode.PaintInvalid">PNode.PaintInvalid</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.ChildPaintInvalid">
            <summary>
            Overridden.  See <see cref="P:UMD.HCIL.Piccolo.PNode.ChildPaintInvalid">PNode.ChildPaintInvalid</see>.
            </summary>
        </member>
        <member name="P:UMD.HCIL.Piccolo.PRoot.InvokeCanvas">
            <summary>
            Returns a canvas hosting the piccolo scene-graph, to be used for invoking.
            </summary>
        </member>
    </members>
</doc>
